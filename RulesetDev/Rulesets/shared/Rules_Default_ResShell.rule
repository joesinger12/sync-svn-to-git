; -------------------------------------------------------------------------
; Rules pertaining to:   Defaulting the Proposed Building Model - focusing on Shell (building envelope) properties
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2014, California Energy Commission
; Copyright (c) 2012-2014, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
;STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

ENUM_PROPERTIES_VALUE   ; ensures retrieval/logic/us of enum properties assume numeric value (alternative is ENUM_PROPERTIES_STRING)

; SAC 10/25/16 - new rulelist to default shell (zones, dwelling units, crawl spaces) properties
;*************************************************************************
RULELIST "ProposedInput_Shell" 0 0 0 0
;*************************************************************************

   ;--------------------------------------------------------------------
   ; ProposedInput: check and possibly reset Zone:Type
   ;--------------------------------------------------------------------
   "reset Zone:Type if Unconditioned and not in Research mode"    Zone:Action =     ; SAC 09/27/21
      {  if (Type < 10 .OR. ResProj:ResAnalysisType == 0) then  UNCHANGED
         else  EvalRulelist( "ForceReset_Zone_Type_Unconditioned", 1 )  endif  }

   ;--------------------------------------------------------------------
   ; ProposedInput: CrawlSpace Rules
   ;--------------------------------------------------------------------
  ; SAC 2/10/13 - added rule to CREATE CrawlSpace object if one or more ResExtFlrs is specified as being above crawlspace (and if not CrawlSpaces exist thus far)
   "Create CrawlSpace if one needed and not already present"	ResProj:Action		= {	if (ComponentCount( CrawlSpace ) > 0.5) then  UNCHANGED
;																												else if (SumAll( ResExtFlr:AreaAboveCrawl ) < 0.5) then  UNCHANGED
																												else if (SumAll( FloorOverCrawl:Area ) < 0.5) then  UNCHANGED
																												else  EvalRulelist( "Create_CrawlSpace" )  endif endif  }
;	"Default CrawlSpace:Type"	
;	"Set CrawlSpace:Area"						CrawlSpace:Area				= {	SumAll( ResExtFlr:AreaAboveCrawl )  }
	"Set CrawlSpace:Area"						CrawlSpace:Area				= {	SumAll( FloorOverCrawl:Area )  }

	"Default CrawlSpace:Perimeter"			CrawlSpace:Perimeter			= {	if (Area > 0) then  sqrt( Area ) * 4
																									else  0  endif  }
	"Default CrawlSpace:AvgWallHeight"		CrawlSpace:AvgWallHeight	= {	2  }
   "Set CrawlSpace:Volume"                CrawlSpace:Volume          = {   ValidOr( Area, 0 ) * ValidOr( AvgWallHeight, 0 )  }      ; SAC 12/02/20

	"Set CrawlSpace:TreeDescrip"				CrawlSpace:TreeDescrip		= {	if (Area > 0.1)
																									then  Format( "%s SqFt", FltToStr( Local( Area ) ) )
																									else  "activate by creating a 'Floor Over Crawl Space' surface"  endif  }

   ;--------------------------------------------------------------------
   ; ProposedInput: CeilingBelowAttic Rules
   ;--------------------------------------------------------------------
  ; SAC 5/22/14 - moved up above first references of CeilingBelowAttic properties in attic-related rules
    ;       CeilingBelowAttic:Area,              BEMP_Flt,  1, "ft2",              0, "",         0, "",             6010, "Ceiling area" 
    ;       CeilingBelowAttic:Construction,      BEMP_Obj,  1, "",                 0, "Cons",     3, "CanAssignTo",  6012, "Construction assembly" 
	"Default CeilingBelowAttic:WasCathCeil"		CeilingBelowAttic:WasCathCeil		= {	0  }		; mjb	2/20/14 needed later for Budget Conversion

	"Set CeilingBelowAttic:AreaOverCond"			CeilingBelowAttic:AreaOverCond	=        ; SAC 9/10/19 - added OtherZone logic (MFamProto)
      {  if (ParentComponentType() == "ResZn")
         then  if (IfValidAnd( Zone:Type < 10 )) then  Area  else  0  endif
         else if (ParentComponentType() == "ResOtherZn")
         then  if (IfValidAnd( OtherZone:Type < 10 )) then  Area  else  0  endif
         else	0  endif endif  }

	;EM 2/11/15
	"Set CeilingBelowAttic:AreaOverNewZone"			CeilingBelowAttic:AreaOverNewZone	=     ; SAC 9/10/19 - added OtherZone logic (MFamProto)
      {  if (ParentComponentType() == "ResZn")
         then	if (Zone:Status == 3) then  Area  else  0  endif
         else if (ParentComponentType() == "ResOtherZn")
         then  if (OtherZone:Status == 3) then  Area  else  0  endif
         else	0  endif endif  }
   ; SAC 5/14/18 - moved logic determining applicability of QII to ICQ attic bypass diode here in order to enable code check prior to analysis (tic #775)
   "Set CeilingBelowAttic:ICQAtticBypassApplies - whether or not a QII attic bypass diode reduction applies to this ceiling"
      CeilingBelowAttic:ICQAtticBypassApplies  = {
         if (IfValidAnd( AreaOverNewZone > 0 ) .OR.
	          IfValidAnd( AtticZone:Status == 3 ))
	      then  1  else  0  endif  }

   "Create Attic if one needed but not already present (or assign existing Attic if only one present)"
   					CeilingBelowAttic:AtticZone	= {	if (LocalCompAssigned( AtticZone ) > 0.5) then  UNCHANGED
																		else if (ComponentCount( ResAttic ) < 0.5) then  CreateComp( ResAttic, "Attic" )
   																	else if (IfValidAnd( Area > 0.1 )==0) then  UNDEFINED
																		else  CompName( ComponentType( "ResAttic" ), 1 )		; assign FIRST Attic object
																		endif endif endif  }
   "Ensure new attic parent set"    CeilingBelowAttic:AtticZone:Parent  =     ; revised rule to prevent Attic parent from getting screwed up in Com ruleset - SAC 11/05/21 (MFam)
      {  if (Proj:IsSFamResRuleset)
         then  ResProj:Name
         else  UNCHANGED  endif  }
      ;   else if (IfValidAnd( AtticZone:Parent:NumStories > 0 ))
      ;   then  UNCHANGED
      ;   else  Parent2( Name )   endif endif  }

  ; SAC 10/15/14 - added in the course of moving attic edge properties from Cons to CeilingBelowAttic (for multiple attics)
	"Set CeilingBelowAttic:AtcEdg_ClgCons"		CeilingBelowAttic:AtcEdg_ClgCons	= {	if (LocalCompAssigned( Construction ) > 0.5) then  Construction  else  UNDEFINED  endif  }
	"Set CeilingBelowAttic:AtcEdg_AtcCons"		CeilingBelowAttic:AtcEdg_AtcCons	= {	if (LocalCompAssigned( AtticZone ) > 0.5)
																												then  if (LocalCompAssigned( AtticZone:Construction ) > 0.5) then  AtticZone:Construction  else  UNDEFINED  endif
																												else  UNDEFINED  endif  }

   ;--------------------------------------------------------------------
   ; ProposedInput: Surface Area Rules - mjb	8/21/14	needed for proper reporting of special features in conditioned zones only
   ;--------------------------------------------------------------------
   ; SAC 9/10/19 - added logic to cover OtherZone parents (MFamProto)
	"Set ResExtWall:ZoneArea"					ResExtWall:ZoneArea				= {	if (ParentComponentType() == "ResZn")
																								then	if (IfValidAnd( Zone:Type < 10 )) then  Area  else  0  endif
																								else if (ResProj:IsMultiFamily > 0 .AND. ParentComponentType() == "ResOtherZn")
																								then	if (IfValidAnd( OtherZone:Type < 10 )) then  Area  else  0  endif
																								else	0  endif endif  }
	"Set UndWall:ZoneArea"					UndWall:ZoneArea				= {	if (ParentComponentType() == "ResZn")
																								then	if (IfValidAnd( Zone:Type < 10 )) then  Area  else  0  endif
																								else if (ResProj:IsMultiFamily > 0 .AND. ParentComponentType() == "ResOtherZn")
																								then	if (IfValidAnd( OtherZone:Type < 10 )) then  Area  else  0  endif
																								else	0  endif endif  }
	"Set ResExtFlr:ZoneArea"			ResExtFlr:ZoneArea		= {	if (ParentComponentType() == "ResZn")
																								then	if (IfValidAnd( Zone:Type < 10 )) then  Area  else  0  endif
																								else if (ResProj:IsMultiFamily > 0 .AND. ParentComponentType() == "ResOtherZn")
																								then	if (IfValidAnd( OtherZone:Type < 10 )) then  Area  else  0  endif
																								else	0  endif endif  }
	"Set ResIntFlr:ZoneArea"			ResIntFlr:ZoneArea		= {	if (ParentComponentType() == "ResZn")
																								then	if (IfValidAnd( Zone:Type < 10 )) then  Area  else  0  endif
																								else if (ResProj:IsMultiFamily > 0 .AND. ParentComponentType() == "ResOtherZn")
																								then	if (IfValidAnd( OtherZone:Type < 10 )) then  Area  else  0  endif
																								else	0  endif endif  }
	"Set FloorOverCrawl:ZoneArea"			FloorOverCrawl:ZoneArea		= {	if (ParentComponentType() == "ResZn")
																								then	if (IfValidAnd( Zone:Type < 10 )) then  Area  else  0  endif
																								else if (ResProj:IsMultiFamily > 0 .AND. ParentComponentType() == "ResOtherZn")
																								then	if (IfValidAnd( OtherZone:Type < 10 )) then  Area  else  0  endif
																								else	0  endif endif  }
	"Set CathedralCeiling:ZoneArea"		CathedralCeiling:ZoneArea	= {	if (ParentComponentType() == "ResZn")
																								then	if (IfValidAnd( Zone:Type < 10 )) then  Area  else  0  endif
																								else if (ResProj:IsMultiFamily > 0 .AND. ParentComponentType() == "ResOtherZn")
																								then	if (IfValidAnd( OtherZone:Type < 10 )) then  Area  else  0  endif
																								else	0  endif endif  }
	"Set CeilingBelowAttic:ZoneArea"		CeilingBelowAttic:ZoneArea	= {	if (ParentComponentType() == "ResZn")
																								then	if (IfValidAnd( Zone:Type < 10 )) then  Area  else  0  endif
																								else if (ResProj:IsMultiFamily > 0 .AND. ParentComponentType() == "ResOtherZn")
																								then	if (IfValidAnd( OtherZone:Type < 10 )) then  Area  else  0  endif
																								else	0  endif endif  }
	"Set InteriorCeiling:ZoneArea"		InteriorCeiling:ZoneArea	= {	if (ParentComponentType() == "ResZn")
																								then	if (IfValidAnd( Zone:Type < 10 )) then  Area  else  0  endif
																								else if (ResProj:IsMultiFamily > 0 .AND. ParentComponentType() == "ResOtherZn")
																								then	if (IfValidAnd( OtherZone:Type < 10 )) then  Area  else  0  endif
																								else	0  endif endif  }

   ;--------------------------------------------------------------------
   ; ProposedInput: DwellUnitType (non-HVAC) Rules
   ;--------------------------------------------------------------------
	; DwellUnitType:CondFlrArea,      Compulsory, 
	"Default DwellUnitType:NumBedrooms"			DwellUnitType:NumBedrooms		= {	1  }  ; if (EZType == 3) then  0  else  1  endif  }
	"Default DwellUnitType:HaveRefrig"			DwellUnitType:HaveRefrig		= {	1  }  ; if (EZType != 3) then  1  else  0  endif  }
	; "Default DwellUnitType:RefrigEffMethod"	DwellUnitType:RefrigEffMethod	= {				-- defaulted via BEMEnums
	; SAC 4/15/16 - added logic to ensure that user-defined RefrigElecUsage is not retained when RefrigEffMethod is not set to '- specify -'
	"Blast user-input RefrigElecUsage if needed"		DwellUnitType:Action		= {	if (LocalStatus( RefrigElecUsage ) < 7 .OR. RefrigEffMethod == 2) then  UNCHANGED
																											else	EvalRulelist( "ForceDefault_DUT_RefrigElecUsage", 1 )  endif  }
; modified to match RESNET - mjb 11/09/15 // SAC 3/10/16 - revised to use # bedrooms for DwellUnitType
	; SAC 4/14/16 - added T24-2016 default
	"Default DwellUnitType:RefrigElecUsage"	DwellUnitType:RefrigElecUsage	= {	if (ResProj:DRtgRefRunID == 2014) then  637 + 18 * NumBedrooms
																											else if (ResProj:IntGainsMethod <= 2013) then  669
																											else	454 + (37 * NumBedrooms)  endif endif  }      ;  if (Local(ApplRefrigEffMethod[1]) == 1) then  669.  else UNCHANGED endif }

	"Default DwellUnitType:HaveDish"				DwellUnitType:HaveDish			= {	1  }  ; if (EZType != 3) then  1  else  0  endif  }
	; "Default DwellUnitType:DishUsageMethod"	DwellUnitType:DishUsageMethod	= {				-- defaulted via BEMEnums
	; SAC 4/15/16 - added logic to ensure that user-defined DishElecUsage is not retained when DishUsageMethod is not set to '- specify -'
	"Blast user-input DishElecUsage if needed"		DwellUnitType:Action		= {	if (LocalStatus( DishElecUsage ) < 7 .OR. DishUsageMethod == 2) then  UNCHANGED
																											else	EvalRulelist( "ForceDefault_DUT_DishElecUsage", 1 )  endif  }
; RESNET = 78 + 31*NumBedrooms
;  case 0: 78		case 1: 109		case 2: 140		case 3: 171		case 4: 202
;	case 5: 233		case 6: 264		case 7: 295		case 8: 326		case 9: 357
	; SAC 4/14/16 - revised for T24-2016 gains
	"Default DwellUnitType:DishElecUsage"		DwellUnitType:DishElecUsage	= {	; if (HaveDish > 0 .AND. DishUsageMethod == 1)		- include this defaulting even when DishUsageMethod != 1
																											if (HaveDish > 0)
																											then	if (ResProj:DRtgRefRunID == 2014)
																													then	switch (NumBedrooms)
					                                                                                 case 0: 78		case 1: 109		case 2: 140		case 3: 171		case 4: 202
               					                                                               	case 5: 233		case 6: 264		case 7: 295		case 8: 326		case 9: 357
																																default: 109	endswitch
																													else if (ResProj:IntGainsMethod <= 2013)
																													then	switch (NumBedrooms)
																																case 0: 90		case 1: 90		case 2: 126		case 3: 126		case 4: 126
																																case 5: 145		case 6: 145		case 7: 174		case 8: 174		case 9: 174
																																default: 203	endswitch
																													else	0.14507
																													endif endif
																											else  0  endif  }

   ; SAC 10/2/19 - backward compat for 2019+ MFam laundry modeling
      ; DwellUnitType:WasherOption & DryerOption:  0-"- none -"  1-"In-Unit"  2-"Central"  defaulted in enums to In-Unit
   "Default DwellUnitType:DryerOption to WasherOption"   DwellUnitType:DryerOption  = {  WasherOption  }
   "Use user-defined HaveWasher to set WasherOption (then blast it) if 2019+"    DwellUnitType:Action =
      {  if (IfValidAnd( ResProj:EnergyCodeYearNum	>= 2019 )==0 .OR. LocalStatus( HaveWasher ) < 7) then  UNCHANGED
         else  EvalRulelist( "ForceReset_DwellUnitType_HaveWasher", 1 )  endif  }
   "Use user-defined HaveDryer to set DryerOption (then blast it) if 2019+"      DwellUnitType:Action =
      {  if (IfValidAnd( ResProj:EnergyCodeYearNum	>= 2019 )==0 .OR. LocalStatus( HaveDryer ) < 7) then  UNCHANGED
         else  EvalRulelist( "ForceReset_DwellUnitType_HaveDryer", 1 )  endif  }

	"Default DwellUnitType:HaveWasher"			DwellUnitType:HaveWasher		=     ; SAC 10/2/19 - MFamProto - was:  {	1  }  ; if (EZType != 3) then  1  else  0  endif  }
      {  if (IfValidAnd( ResProj:EnergyCodeYearNum	>= 2019 ) .AND. WasherOption < 1) then  0
         else  1  endif  }
	"Default DwellUnitType:HaveDryer"			DwellUnitType:HaveDryer			=     ; SAC 10/2/19 - MFamProto - was:  {	1  }  ; if (EZType != 3) then  1  else  0  endif  }
      {  if (IfValidAnd( ResProj:EnergyCodeYearNum	>= 2019 ) .AND. DryerOption < 1) then  0
         else  1  endif  }

	"Default DwellUnitType:DryerFuel"			DwellUnitType:DryerFuel			= {	if (ResProj:Fuel_HaveNatGas == 0) then  1  else  2  endif  }	; SAC 11/9/15
   "Set DwellUnitType:HaveDryer_Elec"        DwellUnitType:HaveDryer_Elec  = {   if (HaveDryer .AND. DryerFuel = 1) then  1  else  0  endif  }  ; SAC 4/2/17
	"Default DwellUnitType:HaveCook"				DwellUnitType:HaveCook			= {	1  }  ; if (EZType != 3) then  1  else  0  endif  }
	"Default DwellUnitType:CookFuel"				DwellUnitType:CookFuel			= {	if (ResProj:Fuel_HaveNatGas == 0) then  1  else  2  endif  }

   "Set DwellUnitType:Description"				DwellUnitType:Description		= {	if (NumBedrooms > 1)
																											then	Format( "%.0f Bdrms / %s ft2",  NumBedrooms, FltToStr( CondFlrArea ) )
																											else	Format( "%.0f Bdrm / %s ft2",   NumBedrooms, FltToStr( CondFlrArea ) )  endif  }

   "Set DwellUnitType:Description-2 HVAC"		DwellUnitType:Description		=              ; SAC 6/27/20   ; added DF (dual fuel) abbrev - SAC 12/08/20
      {  if (HVACSysType == 2 .AND. LocalStatus( HVACHtPumpRef[1]:TypeAbbrevStr ) > 0)
         then  if (IfValidAnd( HPModelDualFuel > 0 ))
               then  Description + Format( " / DF %s", HVACHtPumpRef[1]:TypeAbbrevStr )
               else  Description + Format( " / %s",    HVACHtPumpRef[1]:TypeAbbrevStr )
               endif
         else if (HVACSysType = 1 .AND. LocalStatus( HVACHeatRef[1]:TypeAbbrevStr ) > 0 .AND. LocalStatus( HVACCoolRef[1]:TypeAbbrevStr ) > 0)
         then  Description + Format( " / %s-%s", HVACHeatRef[1]:TypeAbbrevStr, HVACCoolRef[1]:TypeAbbrevStr )
         else if (HVACSysType = 1 .AND. LocalStatus( HVACHeatRef[1]:TypeAbbrevStr ) > 0)
         then  Description + Format( " / %s-NoCool", HVACHeatRef[1]:TypeAbbrevStr )
         else if (HVACSysType = 4 .AND. LocalStatus( HVACCentralRef:TypeAbbrevStr ) > 0)
         then  Description + Format( " / %s", HVACCentralRef:TypeAbbrevStr )
         else  UNCHANGED  endif endif endif endif }
   "Set DwellUnitType:Description-3 DHW"     DwellUnitType:Description		=              ; SAC 6/27/20
      {  if (LocalStatus( DHWSysRef[1]:TypeAbbrevStr ) > 0)
         then  Description + Format( " / %s", DHWSysRef[1]:TypeAbbrevStr )
         else  UNCHANGED  endif  }
   "Set DwellUnitType:TreeDescrip"     DwellUnitType:TreeDescrip = {  Description  }      ; SAC 12/14/21

	; SAC 7/29/15 - added properties to disable all IAQ ventilation
	"Default DwellUnitType:DisableIAQ flag"	DwellUnitType:DisableIAQ		= {	0  }		; option to toggle OFF all IAQ ventilation
	"Set DwellUnitType:IAQDisabled"				DwellUnitType:IAQDisabled		= {	if (ResProj:BypassRuleLimits > 0 .AND. DisableIAQ > 0) then  1  else  0  endif  }		; Flag indicating that IAQ vent has been toggled OFF

   ; "Default DwellUnitType:IAQOption"			DwellUnitType:IAQOption			= {				-- defaulted via BEMEnums
; SAC 9/23/15 - TO DO - need to address EAA w/ < 1000 SF not requiring IAQ vent...
	"Set DwellUnitType:MinIAQCFM"					DwellUnitType:MinIAQCFM			= {	(0.03 * ValidOr( CondFlrArea, 0 )) + (7.5 * (Max( NumBedrooms, 1 ) + 1))  }
   ; "Default DwellUnitType:IAQFanRef[1-4]			- no default
   "Set DwellUnitType:IAQNumFanRefs"			DwellUnitType:IAQNumFanRefs	= {	if (IAQDisabled > 0 .OR. MinIAQCFM <= 0 .OR. IAQOption != 2) then  0
   																										else if (LocalCompAssigned( IAQFanRef[4]  )) then  4		else if (LocalCompAssigned( IAQFanRef[3]  )) then  3
   																										else if (LocalCompAssigned( IAQFanRef[2]  )) then  2		else if (LocalCompAssigned( IAQFanRef[1]  )) then  1
   																										else  0  endif endif endif endif endif  }

   "Default DwellUnitType:IAQFanCnt[1]"		DwellUnitType:IAQFanCnt[1]		= {	1  }
   "Default DwellUnitType:IAQFanCnt[2]"		DwellUnitType:IAQFanCnt[2]		= {	1  }
   "Default DwellUnitType:IAQFanCnt[3]"		DwellUnitType:IAQFanCnt[3]		= {	1  }
   "Default DwellUnitType:IAQFanCnt[4]"		DwellUnitType:IAQFanCnt[4]		= {	1  }

   "Set DwellUnitType:IAQCFM[1]"					DwellUnitType:IAQCFM[1]			= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. LocalCompAssigned( IAQFanRef[1] ) < 0.5) then  0  else  IAQFanRef[1]:IAQCFM * IAQFanCnt[1]   endif  }
   "Set DwellUnitType:IAQCFM[2]"					DwellUnitType:IAQCFM[2]			= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. LocalCompAssigned( IAQFanRef[2] ) < 0.5) then  0  else  IAQFanRef[2]:IAQCFM * IAQFanCnt[2]   endif  }
   "Set DwellUnitType:IAQCFM[3]"					DwellUnitType:IAQCFM[3]			= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. LocalCompAssigned( IAQFanRef[3] ) < 0.5) then  0  else  IAQFanRef[3]:IAQCFM * IAQFanCnt[3]   endif  }
   "Set DwellUnitType:IAQCFM[4]"					DwellUnitType:IAQCFM[4]			= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. LocalCompAssigned( IAQFanRef[4] ) < 0.5) then  0  else  IAQFanRef[4]:IAQCFM * IAQFanCnt[4]   endif  }

   "Set DwellUnitType:IAQWpCFM[1]"				DwellUnitType:IAQWpCFM[1]		= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. LocalCompAssigned( IAQFanRef[1] ) < 0.5) then  UNDEFINED  else  IAQFanRef[1]:WperCFMIAQ   endif  }      ; reporting - SAC 10/16/22
   "Set DwellUnitType:IAQWpCFM[2]"				DwellUnitType:IAQWpCFM[2]		= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. LocalCompAssigned( IAQFanRef[2] ) < 0.5) then  UNDEFINED  else  IAQFanRef[2]:WperCFMIAQ   endif  }
   "Set DwellUnitType:IAQWpCFM[3]"				DwellUnitType:IAQWpCFM[3]		= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. LocalCompAssigned( IAQFanRef[3] ) < 0.5) then  UNDEFINED  else  IAQFanRef[3]:WperCFMIAQ   endif  }
   "Set DwellUnitType:IAQWpCFM[4]"				DwellUnitType:IAQWpCFM[4]		= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. LocalCompAssigned( IAQFanRef[4] ) < 0.5) then  UNDEFINED  else  IAQFanRef[4]:WperCFMIAQ   endif  }

   "Set DwellUnitType:IAQSRE[1]"					DwellUnitType:IAQSRE[1]			= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. IfValidAnd( IAQFanRef[1]:IAQFanType = 3 )==0 .OR. IfValidAnd( IAQFanRef[1]:IncludesRecov > 0 )==0) then  UNDEFINED  else  IAQFanRef[1]:SensRecovEff   endif  }   ; reporting - SAC 10/16/22
   "Set DwellUnitType:IAQSRE[2]"					DwellUnitType:IAQSRE[2]			= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. IfValidAnd( IAQFanRef[2]:IAQFanType = 3 )==0 .OR. IfValidAnd( IAQFanRef[2]:IncludesRecov > 0 )==0) then  UNDEFINED  else  IAQFanRef[2]:SensRecovEff   endif  }
   "Set DwellUnitType:IAQSRE[3]"					DwellUnitType:IAQSRE[3]			= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. IfValidAnd( IAQFanRef[3]:IAQFanType = 3 )==0 .OR. IfValidAnd( IAQFanRef[3]:IncludesRecov > 0 )==0) then  UNDEFINED  else  IAQFanRef[3]:SensRecovEff   endif  }
   "Set DwellUnitType:IAQSRE[4]"					DwellUnitType:IAQSRE[4]			= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. IfValidAnd( IAQFanRef[4]:IAQFanType = 3 )==0 .OR. IfValidAnd( IAQFanRef[4]:IncludesRecov > 0 )==0) then  UNDEFINED  else  IAQFanRef[4]:SensRecovEff   endif  }

   "Set DwellUnitType:IAQASRE[1]"				DwellUnitType:IAQASRE[1]		= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. IfValidAnd( IAQFanRef[1]:IAQFanType = 3 )==0 .OR. IfValidAnd( IAQFanRef[1]:IncludesRecov > 0 )==0) then  UNDEFINED  else  IAQFanRef[1]:AdjSensRecovEff   endif  }   ; reporting - SAC 10/16/22
   "Set DwellUnitType:IAQASRE[2]"				DwellUnitType:IAQASRE[2]		= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. IfValidAnd( IAQFanRef[2]:IAQFanType = 3 )==0 .OR. IfValidAnd( IAQFanRef[2]:IncludesRecov > 0 )==0) then  UNDEFINED  else  IAQFanRef[2]:AdjSensRecovEff   endif  }
   "Set DwellUnitType:IAQASRE[3]"				DwellUnitType:IAQASRE[3]		= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. IfValidAnd( IAQFanRef[3]:IAQFanType = 3 )==0 .OR. IfValidAnd( IAQFanRef[3]:IncludesRecov > 0 )==0) then  UNDEFINED  else  IAQFanRef[3]:AdjSensRecovEff   endif  }
   "Set DwellUnitType:IAQASRE[4]"				DwellUnitType:IAQASRE[4]		= {	if (IAQDisabled > 0 .OR. IAQOption != 2 .OR. IfValidAnd( IAQFanRef[4]:IAQFanType = 3 )==0 .OR. IfValidAnd( IAQFanRef[4]:IncludesRecov > 0 )==0) then  UNDEFINED  else  IAQFanRef[4]:AdjSensRecovEff   endif  }

; re-ordered DwellUnitType:IAQ rules - first all CFMs, then reset ResProj:DefaultIAQFanPwr and then calc Powers (which can depend on CFMs) - SAC 08/27/20
   ; SAC 11/11/17 - added IAQCFM_Exhaust to ensure mixture of IAQ fans simulated (tic #915)
	"Set DwellUnitType:IAQCFM_Exhaust - 1"		DwellUnitType:IAQCFM_Exhaust	= {	if (IAQDisabled > 0) then  0
																											else if (IAQOption == 5) then  MinIAQCFM
																											else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
																											then	if (IAQFanRef[1]:IAQFanType == 1)
																											      then  IAQCFM[1]  else  0  endif
																											else	0  endif endif endif  }
	"Set DwellUnitType:IAQCFM_Exhaust - 2"		DwellUnitType:IAQCFM_Exhaust	= {	if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
																											then	if (IAQFanRef[2]:IAQFanType == 1) 
																											      then  IAQCFM_Exhaust + IAQCFM[2]  else  UNCHANGED  endif
																											else	UNCHANGED  endif  }
	"Set DwellUnitType:IAQCFM_Exhaust - 3"		DwellUnitType:IAQCFM_Exhaust	= {	if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
																											then	if (IAQFanRef[3]:IAQFanType == 1) 
																											      then  IAQCFM_Exhaust + IAQCFM[3]  else  UNCHANGED  endif
																											else	UNCHANGED  endif  }
	"Set DwellUnitType:IAQCFM_Exhaust - 4"		DwellUnitType:IAQCFM_Exhaust	= {	if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
																											then	if (IAQFanRef[4]:IAQFanType == 1) 
																											      then  IAQCFM_Exhaust + IAQCFM[4]  else  UNCHANGED  endif
																											else	UNCHANGED  endif  }

	"Set DwellUnitType:IAQCFM_Supply - 1"		DwellUnitType:IAQCFM_Supply	= {	if (IAQDisabled > 0) then  0
																											else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
																											then	if (IAQFanRef[1]:IAQFanType == 2) then                  IAQCFM[1]  else      0      endif    else      0      endif endif  }
	"Set DwellUnitType:IAQCFM_Supply - 2"		DwellUnitType:IAQCFM_Supply	= {	if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
																											then	if (IAQFanRef[2]:IAQFanType == 2) then  IAQCFM_Supply + IAQCFM[2]  else  UNCHANGED  endif    else  UNCHANGED  endif  }
	"Set DwellUnitType:IAQCFM_Supply - 3"		DwellUnitType:IAQCFM_Supply	= {	if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
																											then	if (IAQFanRef[3]:IAQFanType == 2) then  IAQCFM_Supply + IAQCFM[3]  else  UNCHANGED  endif    else  UNCHANGED  endif  }
	"Set DwellUnitType:IAQCFM_Supply - 4"		DwellUnitType:IAQCFM_Supply	= {	if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
																											then	if (IAQFanRef[4]:IAQFanType == 2) then  IAQCFM_Supply + IAQCFM[4]  else  UNCHANGED  endif    else  UNCHANGED  endif  }

   ; SAC 11/11/17 - added IAQHRV* to enable Balanced fans to be simulated as HRV IAQ (tic #915)
   ; SAC 12/16/19 - added new IAQOption == 4 (default balanced) logic
   "Set DwellUnitType:IAQHRVCFM - 1"      DwellUnitType:IAQHRVCFM	= {
         if (IAQDisabled > 0) then  0
         else if (IAQOption == 4) then  MinIAQCFM
         else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
         then	if (IAQFanRef[1]:IAQFanType == 3)
               then  IAQCFM[1]  else  0  endif
         else	0  endif endif endif  }
   "Set DwellUnitType:IAQHRVCFM - 2"      DwellUnitType:IAQHRVCFM	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
         then	if (IAQFanRef[2]:IAQFanType == 3) 
               then  IAQHRVCFM + IAQCFM[2]  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQHRVCFM - 3"      DwellUnitType:IAQHRVCFM	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
         then	if (IAQFanRef[3]:IAQFanType == 3) 
               then  IAQHRVCFM + IAQCFM[3]  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQHRVCFM - 4"      DwellUnitType:IAQHRVCFM	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
         then	if (IAQFanRef[4]:IAQFanType == 3) 
               then  IAQHRVCFM + IAQCFM[4]  else  UNCHANGED  endif
         else	UNCHANGED  endif  }

   ; SAC 7/25/20 (tic #1174)
   "Set DwellUnitType:IAQBalCFM - 1"      DwellUnitType:IAQBalCFM	= {
         if (IAQDisabled > 0) then  0
         else if (IAQOption == 4) then  MinIAQCFM
         else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
         then	if (IAQFanRef[1]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[1]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[1]:IncludesRecov  = 0 )) ))
               then  IAQCFM[1]  else  0  endif
         else	0  endif endif endif  }
   "Set DwellUnitType:IAQBalCFM - 2"      DwellUnitType:IAQBalCFM	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
         then	if (IAQFanRef[2]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[2]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[2]:IncludesRecov  = 0 )) )) 
               then  IAQBalCFM + IAQCFM[2]  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQBalCFM - 3"      DwellUnitType:IAQBalCFM	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
         then	if (IAQFanRef[3]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[3]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[3]:IncludesRecov  = 0 )) )) 
               then  IAQBalCFM + IAQCFM[3]  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQBalCFM - 4"      DwellUnitType:IAQBalCFM	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
         then	if (IAQFanRef[4]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[4]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[4]:IncludesRecov  = 0 )) )) 
               then  IAQBalCFM + IAQCFM[4]  else  UNCHANGED  endif
         else	UNCHANGED  endif  }

  ; JP 2/4/22 - move TotalIAQCFM down and revise how it is calculated
	"Set DwellUnitType:TotalIAQCFM"				DwellUnitType:TotalIAQCFM		= {	if( IAQOption >= 4 .AND. IAQOption <= 5 .AND. IAQDisabled < 1 ) 
	                                                                      then  MinIAQCFM  
	                                                                      else if( IAQOption >= 11 .AND. IAQOption <= 15 .AND. IAQDisabled < 1 ) 
	                                                                      then Max( ValidOr( CentralSupplyCFM, 0 ), ValidOr( CentralExhaustCFM, 0 ) )
	                                                                      else Max( IAQHRVCFM + IAQCFM_Supply , IAQHRVCFM + IAQCFM_Exhaust )
	                                                                      endif endif }

   ; SAC 12/16/19 - IAQOption revisions to labels, CFMs & Powers updated to reflect new settings (default balanced, min exhaust)
   ; prevent -NOT MET- message for DUTs serving only Existing HVAC zones - SAC 06/29/23 (tic #3479)
   "Set DwellUnitType:MinIAQCFMLbl"				DwellUnitType:MinIAQCFMLbl		= {	if (IAQDisabled > 0) then  Format( "IAQ Ventilation disabled (%s required but not met)", FltToStr( MinIAQCFM, 1 ) )
																											else if (MinIAQCFM < 0.05) then  " " 
																											else if (TotalIAQCFM < (MinIAQCFM - 0.05) .AND. IfValidAnd( DUNewOrAltHVACFlrAreaServed > 0.5 ))
                                                                                 then	Format( "Min IAQ Vent -NOT MET-:  %s CFM required, %s entered", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																											else  switch (IAQOption)
																											         case  2:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																											         case  3:  Format( "Minimum IAQ Ventilation:  %s CFM", FltToStr( MinIAQCFM, 1 ) )
																											         case  4:  Format( "Minimum IAQ Ventilation:  %s CFM  (balanced)",   FltToStr( MinIAQCFM, 1 ) )
																											         case  5:  Format( "Minimum IAQ Ventilation:  %s CFM  (exhaust)",    FltToStr( MinIAQCFM, 1 ) )
																											         case 11:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																											         case 12:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																											         case 13:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																											         case 14:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s supply entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																											         case 15:  Format( "Minimum IAQ Ventilation:  %s CFM  (%s exhaust entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																											         default:  " "
																											      endswitch  endif endif endif  }

   ; SAC 12/16/19 - add flag and label indicating whether DwellUnitType IAQ is balanced
   ; SAC 5/13/20 - updated logic (copied from DwellUnit) to take into account IAQHRVCFM
   ; revised logic to ensure that Balanced fans (where IAQCFM_Supply & IAQCFM_Exhaust = 0 but IAQHRVCFM > 0) are labeled as such - SAC 7/20/20 (tic #1174)
   "Set DwellUnitType:IAQCFMIsBalanced - flag indicating whether or not IAQ CFM is balanced (supply & exhaust within 20%)"   ; SAC 12/16/19 
      DwellUnitType:IAQCFMIsBalanced  =
      {  if (IAQDisabled > 0) then  0
         else if (IAQOption == 4) then  1
         else if (IAQOption == 5) then  0
         else if (IAQOption == 2 .AND. ((IAQCFM_Supply > 0 .AND. IAQCFM_Exhaust > 0) .OR. IAQHRVCFM > 0))
         then  if ((IAQCFM_Exhaust + IAQHRVCFM) > (IAQCFM_Supply + IAQHRVCFM))
               then  if ( (IAQCFM_Exhaust + IAQHRVCFM) >= (0.8 * (IAQCFM_Supply  + IAQHRVCFM)) .AND.
                          (IAQCFM_Exhaust + IAQHRVCFM) <= (1.2 * (IAQCFM_Supply  + IAQHRVCFM)) )
                     then  1  else  0  endif
               else  if ( (IAQCFM_Supply  + IAQHRVCFM) >= (0.8 * (IAQCFM_Exhaust + IAQHRVCFM)) .AND.
                          (IAQCFM_Supply  + IAQHRVCFM) <= (1.2 * (IAQCFM_Exhaust + IAQHRVCFM)) )
                     then  1  else  0  endif
               endif
         else if (IAQOption >= 11 .AND. IAQOption <= 13 .AND. IfValidAnd( CentralSupplyCFM > 0 ) .AND. IfValidAnd( CentralExhaustCFM > 0 ) )
         then if ( CentralSupplyCFM > CentralExhaustCFM )
              then if ( CentralSupplyCFM <= 1.2 * CentralExhaustCFM .AND. 0.8 * CentralSupplyCFM < CentralExhaustCFM )
                   then 1 else 0 endif
              else if ( CentralExhaustCFM <= 1.2 * CentralSupplyCFM .AND. 0.8 * CentralExhaustCFM < CentralSupplyCFM )
                   then 1 else 0 endif
              endif
         else 0 endif endif endif endif endif  }
   ; to report inconsistent IAQ type in MFam models - SAC 7/26/20 (tic #1174)
   "Set DwellUnitType:MostIAQ_Exhaust - flag indicating whether whether most IAQ CFM is exhaust"   DwellUnitType:MostIAQ_Exhaust =     ; mods to prevent undef data error on Central*CFM - SAC 03/08/22
      {  if (IAQDisabled > 0 .OR. IAQCFMIsBalanced > 0) then  UNDEFINED
         else if (IAQOption == 5 .OR. IAQOption == 15) then  1
         else if (IAQOption == 2)
         then  if (IAQCFM_Exhaust > IAQCFM_Supply)
               then  1
               else  0  endif
         else if (IAQOption >= 11 .AND. IAQOption <= 13 .AND. IfValidAnd( CentralExhaustCFM > CentralSupplyCFM )) then 1
         else  0  endif endif endif endif }
;"dbg" DwellUnitType:Action = { PostMessageToLog( "   DUT '%s':  IAQDisabled %g  |  IAQCFMIsBalanced %g  |  CentralSupplyCFM %g", Name, IAQDisabled, IAQCFMIsBalanced, CentralSupplyCFM ) }
   "Set DwellUnitType:MostIAQ_Supply - flag indicating whether whether most IAQ CFM is supply"     DwellUnitType:MostIAQ_Supply  =     ; mods to prevent undef data error on Central*CFM - SAC 03/08/22
      {  if (IAQDisabled > 0 .OR. IAQCFMIsBalanced > 0) then  UNDEFINED
         else if (IAQOption == 14) then 1
         else if (IAQOption == 2)
         then  if (IAQCFM_Exhaust < IAQCFM_Supply)
               then  1
               else  0  endif
         else if (IAQOption >= 11 .AND. IAQOption <= 13 .AND. IfValidAnd( CentralSupplyCFM > CentralExhaustCFM )) then 1
         else  0  endif endif endif endif }

; now re-default ResProj:DefaultIAQFanPwr (based on CFMs) - SAC 08/27/20
   ; SAC 2/25/20 - revised default IAQ fan power from 0.25 to 0.3 for SFam and 0.6 for MFam in 2019.2.0+ (tic #1174)
   ; revised logic to default MFam to 0.3 for IAQ other than Balanced - SAC 7/21/20 (tic #1174)
   ; revised DefaultIAQFanPwr unbal 0.3->0.35 & bal 0.6->0.7 - SAC 01/19/21 (tic #1243)   ; StdDesignIAQFanPwr[1] - SAC 04/03/21
   "Set ResProj:DefaultIAQFanPwr"   ResProj:DefaultIAQFanPwr  =               ; updated w/ data from 2022.1.0 Multifamily IAQ Summary writeup from OB360/DR - SAC 06/07/22
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0) then  0.25
         else if (Proj:IsComRuleset .AND. IfValidAnd( Proj:AnalysisVersion >= 220100 ))
         then  if (IfValidAnd( MostDUIAQ_Exhaust > 0 ) .OR. IfValidAnd( MostDUIAQ_Supply > 0 ))
               then  0.35
               else if (IfValidAnd( Proj:CliZnNum <= 2 ) .OR. (IfValidAnd( Proj:CliZnNum >= 11 ) .AND. IfValidAnd( Proj:CliZnNum <= 16 )))
               then  0.6   ; bal w/ HtRecov
               else if (IfValidAnd( ResProj:NumStories < 4 ) .AND. (IfValidAnd( Proj:CliZnNum >= 4 ) .AND. IfValidAnd( Proj:CliZnNum <= 10 )))
               then  0.4
               else  0.7
               endif endif endif
         else if (IfValidAnd( StdDesignIAQType[1] > 0 ) .AND.
                  IfValidAnd( StdDesignIAQFanPwr[1] > 0 ))
         then  StdDesignIAQFanPwr[1]
         else if (IsMultiFamily)
         then  if (SumAll( DwellUnitType:IAQCFMIsBalanced ) < (ComponentCount( DwellUnitType )/2))
               then  0.35  else  0.7  endif
         else  0.35  endif endif endif endif  }

; Moving IAQ System FID & Accessiblity adjustments from ResProj to DwellUnitType JP 11/23/22 (tic #3425)
  "Set DwellUnitType:HasIndvIAQSup" DwellUnitType:HasIndvIAQSup = { if( IAQCFM_Supply + IAQHRVCFM + IAQBalCFM > 0 .OR. IAQOption = 13 ) then 1 else 0 endif }
  "Default DwellUnitType:IAQSupInletsAccessible" DwellUnitType:IAQSupInletsAccessible = {  0  }
  "Set DwellUnitType:IAQSupInletsAccessMsg" DwellUnitType:IAQSupInletsAccessMsg = {
      if( HasIndvIAQSup > 0 .AND. IAQSupInletsAccessible < 0 )
      then  "Supply air filters, inlets and H/ERV cores must be accessible to receive IAQ compliance credit"
      else  UNDEFINED  endif  }
  "Default DwellUnitType:IAQHasFID" DwellUnitType:IAQHasFID = {  0  }
  "Set DwellUnitType:FanPowerAdjFactor" DwellUnitType:FanPowerAdjFactor = {
      if( HasIndvIAQSup > 0 .AND. IAQHasFID = 0 ) then 0.1 else 0 endif }
  "Set DwellUnitType:FanHeatRecovMultFactor" DwellUnitType:FanHeatRecovMultFactor = {
      if( HasIndvIAQSup > 0 .AND. IAQHasFID = 0 ) then -0.1 else 0 endif }


; then proceed w/ IAQ power defaulting - SAC 08/27/20
   ; SAC 11/18/16 - modified rules to set IAQPwr_Exhaust for Balanced fans (as well as Exhaust) (tic #765)
   ; SAC 11/11/17 - revised IAQPwr_Exhaust rules to exclude Balanced fans - now to be simulated as HRV IAQ (tic #915)
	"Set DwellUnitType:IAQPwr_Exhaust - 1"		DwellUnitType:IAQPwr_Exhaust	= {	if (IAQDisabled > 0) then  0
																											else if (IAQOption == 5) then  MinIAQCFM * ResProj:DefaultIAQFanPwr
																											else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
																											then	if (IAQFanRef[1]:IAQFanType == 1)
																											      then  IAQCFM[1] * ValidOr( IAQFanRef[1]:WperCFMIAQ, 0 ) * IAQFanRef[1]:FanPowerMult  else  0  endif
																											else	0  endif endif endif  }
	"Set DwellUnitType:IAQPwr_Exhaust - 2"		DwellUnitType:IAQPwr_Exhaust	= {	if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
																											then	if (IAQFanRef[2]:IAQFanType == 1) 
																											      then  IAQPwr_Exhaust + (IAQCFM[2] * ValidOr( IAQFanRef[2]:WperCFMIAQ, 0 ) * IAQFanRef[2]:FanPowerMult)  else  UNCHANGED  endif
																											else	UNCHANGED  endif  }
	"Set DwellUnitType:IAQPwr_Exhaust - 3"		DwellUnitType:IAQPwr_Exhaust	= {	if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
																											then	if (IAQFanRef[3]:IAQFanType == 1) 
																											      then  IAQPwr_Exhaust + (IAQCFM[3] * ValidOr( IAQFanRef[3]:WperCFMIAQ, 0 ) * IAQFanRef[3]:FanPowerMult)  else  UNCHANGED  endif
																											else	UNCHANGED  endif  }
	"Set DwellUnitType:IAQPwr_Exhaust - 4"		DwellUnitType:IAQPwr_Exhaust	= {	if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
																											then	if (IAQFanRef[4]:IAQFanType == 1) 
																											      then  IAQPwr_Exhaust + (IAQCFM[4] * ValidOr( IAQFanRef[4]:WperCFMIAQ, 0 ) * IAQFanRef[4]:FanPowerMult)  else  UNCHANGED  endif
																											else	UNCHANGED  endif  }

      ; SAC 4/17/20 - fixed bug where Fans 2-4 were summing that fan's CFM*Pwr to the current IAQCFM_Supply (CFM) instead of IAQPwr_Supply (Pwr)
	"Set DwellUnitType:IAQPwr_Supply - 1"		DwellUnitType:IAQPwr_Supply	= {	if (IAQDisabled > 0) then  0
																											else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
																											then	if (IAQFanRef[1]:IAQFanType == 2) then                   IAQCFM[1] * ValidOr( IAQFanRef[1]:WperCFMIAQ, 0 ) * ( IAQFanRef[1]:FanPowerMult + FanPowerAdjFactor )   else      0      endif    else      0      endif endif  }
	"Set DwellUnitType:IAQPwr_Supply - 2"		DwellUnitType:IAQPwr_Supply	= {	if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
																											then	if (IAQFanRef[2]:IAQFanType == 2) then  IAQPwr_Supply + (IAQCFM[2] * ValidOr( IAQFanRef[2]:WperCFMIAQ, 0 ) * ( IAQFanRef[2]:FanPowerMult + FanPowerAdjFactor ))  else  UNCHANGED  endif    else  UNCHANGED  endif  }
	"Set DwellUnitType:IAQPwr_Supply - 3"		DwellUnitType:IAQPwr_Supply	= {	if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
																											then	if (IAQFanRef[3]:IAQFanType == 2) then  IAQPwr_Supply + (IAQCFM[3] * ValidOr( IAQFanRef[3]:WperCFMIAQ, 0 ) * ( IAQFanRef[3]:FanPowerMult + FanPowerAdjFactor ))  else  UNCHANGED  endif    else  UNCHANGED  endif  }
	"Set DwellUnitType:IAQPwr_Supply - 4"		DwellUnitType:IAQPwr_Supply	= {	if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
																											then	if (IAQFanRef[4]:IAQFanType == 2) then  IAQPwr_Supply + (IAQCFM[4] * ValidOr( IAQFanRef[4]:WperCFMIAQ, 0 ) * ( IAQFanRef[4]:FanPowerMult + FanPowerAdjFactor ))  else  UNCHANGED  endif    else  UNCHANGED  endif  }

   "Set DwellUnitType:IAQHRVPwr - 1"      DwellUnitType:IAQHRVPwr	= {
         if (IAQDisabled > 0) then  0
         else if (IAQOption == 4) then  MinIAQCFM * ResProj:DefaultIAQFanPwr
         else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
         then	if (IAQFanRef[1]:IAQFanType == 3)
               then  IAQCFM[1] * ValidOr( IAQFanRef[1]:WperCFMIAQ, 0 ) * ( IAQFanRef[1]:FanPowerMult + FanPowerAdjFactor )  else  0  endif
         else	0  endif endif endif  }
   "Set DwellUnitType:IAQHRVPwr - 2"      DwellUnitType:IAQHRVPwr	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
         then	if (IAQFanRef[2]:IAQFanType == 3) 
               then  IAQHRVPwr + (IAQCFM[2] * ValidOr( IAQFanRef[2]:WperCFMIAQ, 0 ) * ( IAQFanRef[2]:FanPowerMult + FanPowerAdjFactor ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQHRVPwr - 3"      DwellUnitType:IAQHRVPwr	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
         then	if (IAQFanRef[3]:IAQFanType == 3) 
               then  IAQHRVPwr + (IAQCFM[3] * ValidOr( IAQFanRef[3]:WperCFMIAQ, 0 ) * ( IAQFanRef[3]:FanPowerMult + FanPowerAdjFactor ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQHRVPwr - 4"      DwellUnitType:IAQHRVPwr	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
         then	if (IAQFanRef[4]:IAQFanType == 3) 
               then  IAQHRVPwr + (IAQCFM[4] * ValidOr( IAQFanRef[4]:WperCFMIAQ, 0 ) * ( IAQFanRef[4]:FanPowerMult + FanPowerAdjFactor ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }

   "Set DwellUnitType:IAQBalPwr - 1"      DwellUnitType:IAQBalPwr	= {
         if (IAQDisabled > 0) then  0
         else if (IAQOption == 4) then  MinIAQCFM * ResProj:DefaultIAQFanPwr
         else if (IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
         then	if (IAQFanRef[1]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[1]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[1]:IncludesRecov  = 0 )) ))
               then  IAQCFM[1] * ValidOr( IAQFanRef[1]:WperCFMIAQ, 0 ) * ( IAQFanRef[1]:FanPowerMult + FanPowerAdjFactor )  else  0  endif
         else	0  endif endif endif  }
   "Set DwellUnitType:IAQBalPwr - 2"      DwellUnitType:IAQBalPwr	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
         then	if (IAQFanRef[2]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[2]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[2]:IncludesRecov  = 0 )) )) 
               then  IAQBalPwr + (IAQCFM[2] * ValidOr( IAQFanRef[2]:WperCFMIAQ, 0 ) * ( IAQFanRef[2]:FanPowerMult + FanPowerAdjFactor ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQBalPwr - 3"      DwellUnitType:IAQBalPwr	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
         then	if (IAQFanRef[3]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[3]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[3]:IncludesRecov  = 0 )) )) 
               then  IAQBalPwr + (IAQCFM[3] * ValidOr( IAQFanRef[3]:WperCFMIAQ, 0 ) * ( IAQFanRef[3]:FanPowerMult + FanPowerAdjFactor ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQBalPwr - 4"      DwellUnitType:IAQBalPwr	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
         then	if (IAQFanRef[4]:IAQFanType == 3 .AND.
                     ( (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .AND. IfValidAnd( IAQFanRef[4]:IAQRecovEffect = 0 )) .OR.
                       (IfValidAnd( Proj:AnalysisVersion >= 190200 )    .AND. IfValidAnd( IAQFanRef[4]:IncludesRecov  = 0 )) )) 
               then  IAQBalPwr + (IAQCFM[4] * ValidOr( IAQFanRef[4]:WperCFMIAQ, 0 ) * ( IAQFanRef[4]:FanPowerMult + FanPowerAdjFactor ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }

   ; SAC 12/16/19 - note: default balanced effectiveness = 0
   "Set DwellUnitType:IAQHRVCFMxRcvEff - 1"      DwellUnitType:IAQHRVCFMxRcvEff	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
         then	if (IAQFanRef[1]:IAQFanType == 3)
               then  IAQCFM[1] * ValidOr( IAQFanRef[1]:IAQRecovEffect, 0 )  else  0  endif
         else	0  endif  }
   "Set DwellUnitType:IAQHRVCFMxRcvEff - 2"      DwellUnitType:IAQHRVCFMxRcvEff	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
         then	if (IAQFanRef[2]:IAQFanType == 3) 
               then  IAQHRVCFMxRcvEff + (IAQCFM[2] * ValidOr( IAQFanRef[2]:IAQRecovEffect, 0 ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQHRVCFMxRcvEff - 3"      DwellUnitType:IAQHRVCFMxRcvEff	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
         then	if (IAQFanRef[3]:IAQFanType == 3) 
               then  IAQHRVCFMxRcvEff + (IAQCFM[3] * ValidOr( IAQFanRef[3]:IAQRecovEffect, 0 ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQHRVCFMxRcvEff - 4"      DwellUnitType:IAQHRVCFMxRcvEff	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
         then	if (IAQFanRef[4]:IAQFanType == 3) 
               then  IAQHRVCFMxRcvEff + (IAQCFM[4] * ValidOr( IAQFanRef[4]:IAQRecovEffect, 0 ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }

   ; SAC 10/21/19
   ; added reference to new IAQFanRef[*]:FanHeatRecovMult & FanPowerMult - SAC 7/20/20 (tic #1174)
   ; add check to ensure each IAQFan's HtRecov is toggled ON before summing into IAQHRVCFMxSRE & IAQHRVCFMxASRE - SAC 06/08/22
   "Set DwellUnitType:IAQHRVCFMxSRE - 1"      DwellUnitType:IAQHRVCFMxSRE	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
         then	if (IAQFanRef[1]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[1]:IncludesRecov > 0 ) .AND. IfValidAnd( IAQFanRef[1]:SensRecovEff > 0 ))
               then  IAQCFM[1] * ValidOr( IAQFanRef[1]:SensRecovEff, 0 ) * ( IAQFanRef[1]:FanHeatRecovMult + FanHeatRecovMultFactor )  else  0  endif
         else	0  endif  }
   "Set DwellUnitType:IAQHRVCFMxSRE - 2"      DwellUnitType:IAQHRVCFMxSRE	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
         then	if (IAQFanRef[2]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[2]:IncludesRecov > 0 ) .AND. IfValidAnd( IAQFanRef[2]:SensRecovEff > 0 )) 
               then  IAQHRVCFMxSRE + (IAQCFM[2] * ValidOr( IAQFanRef[2]:SensRecovEff, 0 ) * ( IAQFanRef[2]:FanHeatRecovMult + FanHeatRecovMultFactor ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQHRVCFMxSRE - 3"      DwellUnitType:IAQHRVCFMxSRE	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
         then	if (IAQFanRef[3]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[3]:IncludesRecov > 0 ) .AND. IfValidAnd( IAQFanRef[3]:SensRecovEff > 0 )) 
               then  IAQHRVCFMxSRE + (IAQCFM[3] * ValidOr( IAQFanRef[3]:SensRecovEff, 0 ) * ( IAQFanRef[3]:FanHeatRecovMult + FanHeatRecovMultFactor ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQHRVCFMxSRE - 4"      DwellUnitType:IAQHRVCFMxSRE	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
         then	if (IAQFanRef[4]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[4]:IncludesRecov > 0 ) .AND. IfValidAnd( IAQFanRef[4]:SensRecovEff > 0 )) 
               then  IAQHRVCFMxSRE + (IAQCFM[4] * ValidOr( IAQFanRef[4]:SensRecovEff, 0 ) * ( IAQFanRef[4]:FanHeatRecovMult + FanHeatRecovMultFactor ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }

   "Set DwellUnitType:IAQHRVCFMxASRE - 1"      DwellUnitType:IAQHRVCFMxASRE	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[1] ) > 0.5)
         then	if (IAQFanRef[1]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[1]:IncludesRecov > 0 ) .AND. IfValidAnd( IAQFanRef[1]:AdjSensRecovEff > 0 ))
               then  IAQCFM[1] * ValidOr( IAQFanRef[1]:AdjSensRecovEff, 0 ) * ( IAQFanRef[1]:FanHeatRecovMult + FanHeatRecovMultFactor )  else  0  endif
         else	0  endif  }
   "Set DwellUnitType:IAQHRVCFMxASRE - 2"      DwellUnitType:IAQHRVCFMxASRE	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[2] ) > 0.5)
         then	if (IAQFanRef[2]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[2]:IncludesRecov > 0 ) .AND. IfValidAnd( IAQFanRef[2]:AdjSensRecovEff > 0 )) 
               then  IAQHRVCFMxASRE + (IAQCFM[2] * ValidOr( IAQFanRef[2]:AdjSensRecovEff, 0 ) * ( IAQFanRef[2]:FanHeatRecovMult + FanHeatRecovMultFactor ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQHRVCFMxASRE - 3"      DwellUnitType:IAQHRVCFMxASRE	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[3] ) > 0.5)
         then	if (IAQFanRef[3]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[3]:IncludesRecov > 0 ) .AND. IfValidAnd( IAQFanRef[3]:AdjSensRecovEff > 0 )) 
               then  IAQHRVCFMxASRE + (IAQCFM[3] * ValidOr( IAQFanRef[3]:AdjSensRecovEff, 0 ) * ( IAQFanRef[3]:FanHeatRecovMult + FanHeatRecovMultFactor ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }
   "Set DwellUnitType:IAQHRVCFMxASRE - 4"      DwellUnitType:IAQHRVCFMxASRE	= {
         if (IAQDisabled < 1 .AND. IAQOption == 2 .AND. LocalCompAssigned( IAQFanRef[4] ) > 0.5)
         then	if (IAQFanRef[4]:IAQFanType == 3 .AND. IfValidAnd( IAQFanRef[4]:IncludesRecov > 0 ) .AND. IfValidAnd( IAQFanRef[4]:AdjSensRecovEff > 0 )) 
               then  IAQHRVCFMxASRE + (IAQCFM[4] * ValidOr( IAQFanRef[4]:AdjSensRecovEff, 0 ) * ( IAQFanRef[4]:FanHeatRecovMult + FanHeatRecovMultFactor ))  else  UNCHANGED  endif
         else	UNCHANGED  endif  }

   "Set DwellUnitType:IAQSysType" DwellUnitType:IAQSysType = ; JP 2/4/22
      {  if (IAQDisabled < 1 .AND. MinIAQCFM > 0.05 .AND. TotalIAQCFM > 0)
         then if( IfValidAnd(IAQCFMIsBalanced > 0) )
              then "Balanced"
              else if( IfValidAnd( MostIAQ_Exhaust > 0) )
              then "Exhaust"
              else "Supply"
              endif endif 
         else  UNDEFINED  endif  } 

   ; added logic/message reporting when IAQ HRV fan power too large - SAC 10/10/22 (tic #3422)
   "Set DwellUnitType:UnbalancedIAQLbl"      DwellUnitType:UnbalancedIAQLbl =    ; SAC 12/16/19
      {  if (IAQDisabled < 1 .AND. MinIAQCFM > 0.05 .AND. IAQCFMIsBalanced == 0)
         then  "Requires enclosure leakage testing for each dwelling unit"
         else if (Proj:IsComRuleset .AND. IAQOption == 2 .AND. IAQCFMIsBalanced > 0 .AND.
                  IAQHRVCFM > 0 .AND. IfValidAnd( IAQHRVPwr > IAQHRVCFM ))
         then  Format( "IAQ HRV fan efficacy (%.2f W/CFM) exceeds limit of 1.0 W/CFM", (IAQHRVPwr/IAQHRVCFM) )   ; (per Std section 160.2(b)2.A.iv.b.1)
         else  UNDEFINED  endif endif  }

   "blast StdDesignIAQ properties if user defined and no BypassRuleLimits"    DwellUnitType:Action =     ; SAC 12/15/19
      {  if (IfValidAnd( ResProj:BypassRuleLimits > 0 )) then  UNCHANGED
         else if (LocalStatus( StdDesignIAQCFM           ) > 4 .OR.
                  LocalStatus( MaxStdDesignIAQWperCFM    ) > 4)
         then  EvalRulelist( "ForceReset_DwellUnitType_StdDesignIAQLimits", 1 )
         else  UNCHANGED  endif endif  }
                ;  LocalStatus( ApplyStdIAQCFMLimitToDRtg ) > 4 .OR.
                ;  LocalStatus( ApplyStdIAQMaxPwrToDRtg   ) > 4)
   ; SAC 5/13/20 - applied ResProj:StdIAQCFMScaleFactor[1]     ; added logic to apply 110% min CFM cap on std design CFM - SAC 7/20/20 (tic #1174)
   ; revised to apply ResProj:StdIAQCFMScaleFactor only to MinIAQCFM (not max of that & TotalIAQCFM) - SAC 08/29/20
   ; revised limit of standard design IAQ CFm from 110% to 125% of req'd - SAC 08/19/21 (tic #1243)
   "default DwellUnitType:StdDesignIAQCFM"   DwellUnitType:StdDesignIAQCFM  =       
      {  if (IAQDisabled > 0) then  UNDEFINED
         else if (IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( ResProj:StdIAQCFMScaleFactor[1] != 1 ))
         then  MinIAQCFM * ResProj:StdIAQCFMScaleFactor[1]
         else if (IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. (TotalIAQCFM / MinIAQCFM) > 1.25)
         then  MinIAQCFM * 1.25
         else  max( MinIAQCFM, TotalIAQCFM )  endif endif endif  }
   "Set DwellUnitType:IAQCFMScaleFactor if appropriate"     DwellUnitType:IAQCFMScaleFactor  =
      {  if (IfValidAnd( StdDesignIAQCFM >= 0 )==0) then  UNDEFINED
         else if (IfValidAnd( IAQDisabled > 0 )) then  UNDEFINED
         else if (MinIAQCFM < 0.1 .OR. IAQOption == 3) then  UNDEFINED
         else if (IfValidAnd( TotalIAQCFM > 0 )) then  StdDesignIAQCFM / TotalIAQCFM
         else  UNDEFINED  endif endif endif endif  }
   "Set DwellUnitType:IAQFanCFMMult - multiplier on IAQ CFM for cases where individual IAQFans assigned to DUT"   DwellUnitType:IAQFanCFMMult =    ; SAC 08/29/20 
   ;   {  if (ResProj:RunAbbrev != "dr" .AND. ((ResProj:RunAbbrev != "s" .AND. ResProj:RunAbbrev != "zb" .AND. ResProj:RunAbbrev != "smf") .OR. ResProj:IAQSupInletsAccessible < 1)) then  UNDEFINED     ; restored original logic (below) to retain Std design CFM cap when NOT ResProj:IAQSupInletsAccessible - SAC 01/28/21 (tic #1243)
      {  if (ResProj:RunAbbrev != "dr" .AND. ResProj:RunAbbrev != "s" .AND. ResProj:RunAbbrev != "zb" .AND. ResProj:RunAbbrev != "smf") then  UNDEFINED
         else if (IAQOption == 2 .AND. IfValidAnd( TotalIAQCFM > 0 ) .AND.
                  IfValidAnd( StdDesignIAQCFM != TotalIAQCFM ))
         then  StdDesignIAQCFM / TotalIAQCFM
         else  UNDEFINED  endif endif  }
   ; SAC 2/6/20 (tic #1174)   ; revised to only apply max HRV CFM for std and drtg models - SAC 7/21/20 (tic #1174)
   ; moved down here from above to set following other std design CFM scaling stuff and replaced TotalIAQCFM w/ StdDesignIAQCFM - SAC 08/29/20
   ; revised logic to set ratio to 1 for 's' & 'smf' runs when NOT ResProj:IAQSupInletsAccessible - SAC 01/26/21 (tic #1243)
   ; revised to DEACTIVATE this limit entirely (for 2019.2.0+ releases) - SAC 08/19/21 (tic #1243)
	"Set DwellUnitType:IAQCFMFracHRVCompat - frac of design IAQ CFM at/below % allowed HRV cutoff"     DwellUnitType:IAQCFMFracHRVCompat  =     
      {  UNDEFINED  }
	   ;{  if (IfValidAnd( Proj:AnalysisVersion >= 190200 )==0 .OR. IAQDisabled > 0 .OR. IfValidAnd( StdDesignIAQCFM > 0.5 )==0) then  UNDEFINED
      ;   else if (ResProj:RunAbbrev != "dr" .AND. ((ResProj:RunAbbrev != "s" .AND. ResProj:RunAbbrev != "zb" .AND. ResProj:RunAbbrev != "smf") .OR. ResProj:IAQSupInletsAccessible < 1)) then  1
	   ;   else if (StdDesignIAQCFM <= (MinIAQCFM * 1.1)) then  1
      ;   else  (MinIAQCFM * 1.1) / StdDesignIAQCFM    endif endif endif  } 

;   "Set DwellUnitType:ApplyStdIAQCFMLimitToDRtg - flag indicating whether or not to apply the std design IAQ CFM limits to EDR reference run"  ; SAC 12/15/19
;      DwellUnitType:ApplyStdIAQCFMLimitToDRtg   = {  1  }      ; default of 1 here causes difference in EDR ref run IAQ CFM when scaling occurs to the Std design
   "Set DwellUnitType:MaxStdDesignIAQWperCFM - Max limit on standard design IAQ power" 
      DwellUnitType:MaxStdDesignIAQWperCFM         = {  1.2  }
   "Set DwellUnitType:MaxStdDesignIAQPower - Max IAQ power (MaxStdDesignIAQWperCFM * StdDesignIAQCFM)"   ; SAC 12/15/19
      DwellUnitType:MaxStdDesignIAQPower           = {  MaxStdDesignIAQWperCFM * ValidOr( StdDesignIAQCFM, 0 )  }
;   "Set DwellUnitType:ApplyStdIAQMaxPwrToDRtg - flag indicating whether or not to apply the std design IAQ maximum power EDR reference run" 
;      DwellUnitType:ApplyStdIAQMaxPwrToDRtg     = {  1  }

   ; added logic to prevent std design setup of IAQ for DwellUnitTypes serving only Existing zones - SAC 06/29/23 (tic #3479)
   "Set baseline IAQ properties" DwellUnitType:Action = { 
      if( ResProj:IsMultiFamily > 0.5 .AND. ( ResProj:RunAbbrev = "s" .OR. ResProj:RunAbbrev = "zb" .OR. ResProj:RunAbbrev = "smf" ) .AND.
          (Proj:ResCompOpt < 2 .OR. IfValidAnd( DUNewOrAltHVACFlrAreaServed > 0.5 )) ) 
      then EvalRulelist( "BudgetConversion_IAQ_DwellUnitType", 1 ) else UNCHANGED endif }

	"Default DwellUnitType:NumDHWSysTypes"		DwellUnitType:NumDHWSysTypes	= {	1  }
	; SAC 10/6/15 - separate out rules to force reset of DHWSys assignments and set NumDHWSysAssigns, DHWSysAssignFrac & DHWSysFlrArea (to facilitate DHW BudgetConversion)
	"Set DwellUnitType DHWSys references and related properties"	DwellUnitType:Action		= {	EvalRulelist( "Default_DwellUnitType_DHWSysRefs", 1 )  }

	; HW consumption based on Res ACM, App E, Sec E3.1
	; SAC 10/26/15 - added '* DHWSysAssignFrac'
	"Set DwellUnitType:DHWDailyConsPerSys"			DwellUnitType:DHWDailyConsPerSys	=     ; revised for DHWCombo (where DHWSysAssignFrac can = 0) - SAC 10/15/24 (tic #3629)
      {	if (IfValidAnd( HtEqpUsedAsDHWHtr > 0 ))
         then   21.4 + (0.00679 * min( CondFlrArea, 2500 ))
         else  (21.4 + (0.00679 * min( CondFlrArea, 2500 ))) * ValidOr( DHWSysAssignFrac, 1 )  endif  }

	"Set DwellUnitType:ServedByDHWSys"		; boolean (0/1) whether or not this DUT is served by one or more valid DHWSys objects"    
			DwellUnitType:ServedByDHWSys	= {	if (IfValidAnd( NumDHWSysAssigns > 0 )) then  1  else  0  endif  }
;	"Set DwellUnitType:ServedByDHWSys - 1"		; boolean (0/1) whether or not this DUT is served by one or more valid DHWSys objects"    
;			DwellUnitType:ServedByDHWSys	= {	if (NumDHWSysTypes > 0 .AND. LocalCompAssigned( DHWSysRef[1] ))
;															then	if (DHWSysRef[1]:NumDHWHeaters > 0.5) then  1  else  0  endif		else	0  endif  }
;	"Set DwellUnitType:ServedByDHWSys - 2"		DwellUnitType:ServedByDHWSys	= {	if (ServedByDHWSys < 0.5 .AND. NumDHWSysTypes > 1 .AND. LocalCompAssigned( DHWSysRef[2] ))
;																											then	if (DHWSysRef[2]:NumDHWHeaters > 0.5) then  1  else  UNCHANGED  endif	else	UNCHANGED  endif  }
;	"Set DwellUnitType:ServedByDHWSys - 3"		DwellUnitType:ServedByDHWSys	= {	if (ServedByDHWSys < 0.5 .AND. NumDHWSysTypes > 2 .AND. LocalCompAssigned( DHWSysRef[3] ))
;																											then	if (DHWSysRef[3]:NumDHWHeaters > 0.5) then  1  else  UNCHANGED  endif	else	UNCHANGED  endif  }
;	"Set DwellUnitType:ServedByDHWSys - 4"		DwellUnitType:ServedByDHWSys	= {	if (ServedByDHWSys < 0.5 .AND. NumDHWSysTypes > 3 .AND. LocalCompAssigned( DHWSysRef[4] ))
;																											then	if (DHWSysRef[4]:NumDHWHeaters > 0.5) then  1  else  UNCHANGED  endif	else	UNCHANGED  endif  }
;	"Set DwellUnitType:ServedByDHWSys - 5"		DwellUnitType:ServedByDHWSys	= {	if (ServedByDHWSys < 0.5 .AND. NumDHWSysTypes > 4 .AND. LocalCompAssigned( DHWSysRef[5] ))
;																											then	if (DHWSysRef[5]:NumDHWHeaters > 0.5) then  1  else  UNCHANGED  endif	else	UNCHANGED  endif  }

   ;--------------------------------------------------------------------
   ; ProposedInput: DwellUnit Rules
   ;--------------------------------------------------------------------
	; "Default DwellUnit:DwellUnitTypeRef"		DwellUnit:DwellUnitTypeRef	= {				-- not defaulted
	"Default DwellUnit:Count"					DwellUnit:Count				= {	1  }
	"Default DwellUnit:CondFlrArea"			DwellUnit:CondFlrArea		= {	ValidOr( DwellUnitTypeRef:CondFlrArea, 0 )  }
	"Set DwellUnit:TotalCondFlrArea"			DwellUnit:TotalCondFlrArea	= {	if (ParentComponentType() == "ResZn") then  CondFlrArea * Count  else  0  endif  }
   "Set DwellUnit:TotalCondFlrAreaWithMult" DwellUnit:TotalCondFlrAreaWithMult = {  TotalCondFlrArea * Parent( Mult )  }      ; SAC 04/27/23 (tic #3392)
   "Set DwellUnit:NewOrAltHVACFlrAreaWithMult"  DwellUnit:NewOrAltHVACFlrAreaWithMult =      ; SAC 06/29/23 (tic #3479)
      {  if (Proj:ResCompOpt < 2 .OR. TotalCondFlrAreaWithMult < 0.5) then  TotalCondFlrAreaWithMult
         else if (ResZn:HVACSysStatus < 2) then  0
         else  TotalCondFlrAreaWithMult  endif endif  }

	"Set DwellUnit:NumBedroomsPerUnit"		DwellUnit:NumBedroomsPerUnit = {	if (ParentComponentType() == "ResZn") then  ValidOr( DwellUnitTypeRef:NumBedrooms, 0 )  else  0  endif  }      ; SAC 08/05/22 (CUAC)
	"Set DwellUnit:TotalNumBedrooms"			DwellUnit:TotalNumBedrooms	= {	NumBedroomsPerUnit * Count  }
	"Set DwellUnit:TotalNumBedroomsWithMult" DwellUnit:TotalNumBedroomsWithMult = {  TotalNumBedrooms * Parent( Mult )  }   ; SAC 04/27/23 (tic #3392)
	"Set DwellUnit:TotalLtgFlrArea"			DwellUnit:TotalLtgFlrArea	= {	if (ParentComponentType() == "ResZn") then  min( CondFlrArea, 4150 ) * Count  else  0  endif  }		; SAC 4/13/16

	"Set DwellUnit:HaveWasher"					DwellUnit:HaveWasher			= {	ValidOr( DwellUnitTypeRef:HaveWasher, 0 )  }
	"Set DwellUnit:HaveDryer"					DwellUnit:HaveDryer			= {	ValidOr( DwellUnitTypeRef:HaveDryer,  0 )  }

	"Set DwellUnit:MinIAQCFM"					DwellUnit:MinIAQCFM			= {	if (LocalCompAssigned( DwellUnitTypeRef ) == 0 .OR. IfValidAnd( TotalCondFlrArea > 0.1 )==0) then  0
																									else	( (0.03 * ValidOr( CondFlrArea, 0 )) + (7.5 * (Max( DwellUnitTypeRef:NumBedrooms, 1 ) + 1)) ) * Count  endif  }

   ; SAC 12/16/19 - IAQOption revisions to labels, CFMs & Powers updated to reflect new settings (default balanced (4), min exhaust (5))
	"Set DwellUnit:TotalIAQCFM"				DwellUnit:TotalIAQCFM		= {	if (MinIAQCFM <= 0 .OR. IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )) then  0
																									else if (DwellUnitTypeRef:IAQOption == 4 .OR. DwellUnitTypeRef:IAQOption == 5) then  MinIAQCFM
																									else  ValidOr( DwellUnitTypeRef:TotalIAQCFM, 0 ) * Count  endif endif  }

   ; prevent -NOT MET- message for DUs of Existing HVAC zones - SAC 06/29/23 (tic #3479)
	"Set DwellUnit:MinIAQCFMLbl"				DwellUnit:MinIAQCFMLbl		= {	if (LocalCompAssigned( DwellUnitTypeRef ) == 0) then  " "
																									else if (IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )) then  Format( "IAQ Ventilation disabled (%s required but not met)", FltToStr( MinIAQCFM, 1 ) )
																									else if (MinIAQCFM < 0.05) then  " "  else if (DwellUnitTypeRef:IAQOption == 3) then  "CFI (Central Fan Integrated) IAQ  - NOT YET IMPLEMENTED -"
																									else if (TotalIAQCFM < (MinIAQCFM - 0.05) .AND. IfValidAnd( NewOrAltHVACFlrAreaWithMult > 0.5 ))
                                                                           then	Format( "Min IAQ Vent -NOT MET-:  %s CFM required, %s entered", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																									else if (DwellUnitTypeRef:IAQOption == 2) then  Format( "Minimum IAQ Ventilation:  %s CFM (%s entered)", FltToStr( MinIAQCFM, 1 ), FltToStr( TotalIAQCFM, 1 ) )
																									else  Format( "Minimum IAQ Ventilation:  %s CFM", FltToStr( MinIAQCFM, 1 ) )  endif endif endif endif endif endif  }

   ; added logic to set DwellUnit Std design IAQ CFM, Power & HRV properties based on Proj level inputs when BypassRuleLimits activated - SAC 08/27/20 
   "Set DwellUnit:IAQCFM_Exhaust - 1"      DwellUnit:IAQCFM_Exhaust   =
      {  if (LocalCompAssigned( DwellUnitTypeRef ) == 0 .OR. IfValidAnd( TotalCondFlrArea > 0.1 )==0 .OR. IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )) then  0
         else if (DwellUnitTypeRef:IAQOption >= 3 .AND. (IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )) .AND.
                  IfValidAnd( ResProj:StdDesignIAQType[1] > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf"))
         then  if (IfValidAnd( ResProj:StdDesignIAQType[1] = 1 ))
               then  ValidOr( ResProj:StdIAQCFMScaleFactor[1], 1 ) * TotalIAQCFM
               else  0  endif
         else if (DwellUnitTypeRef:IAQOption == 5) then  TotalIAQCFM
         else if (DwellUnitTypeRef:IAQOption == 2) then  DwellUnitTypeRef:IAQCFM_Exhaust * Count
         else   0  endif endif endif endif  }
   "Set DwellUnit:IAQCFM_Supply - 1"      DwellUnit:IAQCFM_Supply      =
      {  if (LocalCompAssigned( DwellUnitTypeRef ) == 0 .OR. IfValidAnd( TotalCondFlrArea > 0.1 )==0 .OR. IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )) then  0
         else if (DwellUnitTypeRef:IAQOption >= 3 .AND. (IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )) .AND.
                  IfValidAnd( ResProj:StdDesignIAQType[1] > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf"))
         then  if (IfValidAnd( ResProj:StdDesignIAQType[1] = 2 ))
               then  ValidOr( ResProj:StdIAQCFMScaleFactor[1], 1 ) * TotalIAQCFM
               else  0  endif
         else   DwellUnitTypeRef:IAQCFM_Supply * Count   endif endif  }
   ; SAC 11/11/17 - added IAQHRV* to enable Balanced fans to be simulated as HRV IAQ (tic #915)
   "Set DwellUnit:IAQHRVCFM"           DwellUnit:IAQHRVCFM    = {
         if (LocalCompAssigned( DwellUnitTypeRef ) > 0 .AND. IfValidAnd( TotalCondFlrArea > 0.1 ) .AND.
             IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )==0)
         then  if (DwellUnitTypeRef:IAQOption >= 3 .AND. (IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )) .AND.
                   IfValidAnd( ResProj:StdDesignIAQType[1] > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf"))
               then  if (IfValidAnd( ResProj:StdDesignIAQType[1] >= 3 ))
                     then  ValidOr( ResProj:StdIAQCFMScaleFactor[1], 1 ) * TotalIAQCFM
                     else  0  endif
               else  DwellUnitTypeRef:IAQHRVCFM * Count  endif
         else  0  endif  }
   ; SAC 7/25/20 (tic #1174)
   "Set DwellUnit:IAQBalCFM"           DwellUnit:IAQBalCFM    = {
         if (LocalCompAssigned( DwellUnitTypeRef ) > 0 .AND. IfValidAnd( TotalCondFlrArea > 0.1 ) .AND.
             IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )==0)
         then  if (DwellUnitTypeRef:IAQOption >= 3 .AND. (IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )) .AND.
                   IfValidAnd( ResProj:StdDesignIAQType[1] > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf"))
               then  if (IfValidAnd( ResProj:StdDesignIAQType[1] >= 3 ))
                     then  ValidOr( ResProj:StdIAQCFMScaleFactor[1], 1 ) * TotalIAQCFM
                     else  0  endif
               else  DwellUnitTypeRef:IAQBalCFM * Count  endif
         else  0  endif  }

   ; re-ordered rules to set all CFMs (above) followed by IsBalanced and MostDUIAQ_* properties, followed by a re-default of IAQ Pwr - SAC 08/27/20
   "Set DwellUnit:IAQCFMIsBalanced - flag indicating exhaust & supply IAQ CFMs are within 20% of each other"    ; SAC 7/25/19 - tic #1104
      DwellUnit:IAQCFMIsBalanced  = 
//         if (TotalCondFlrArea < 1 .OR. LocalCompAssigned( DwellUnitTypeRef ) == 0) then  0
//         else  if ((IAQCFM_Exhaust + IAQHRVCFM) > (IAQCFM_Supply + IAQHRVCFM))
//               then  if ( (IAQCFM_Exhaust + IAQHRVCFM) >= (0.8 * (IAQCFM_Supply  + IAQHRVCFM)) .AND.
//                          (IAQCFM_Exhaust + IAQHRVCFM) <= (1.2 * (IAQCFM_Supply  + IAQHRVCFM)) )
//                     then  1  else  0  endif
//               else  if ( (IAQCFM_Supply  + IAQHRVCFM) >= (0.8 * (IAQCFM_Exhaust + IAQHRVCFM)) .AND.
//                          (IAQCFM_Supply  + IAQHRVCFM) <= (1.2 * (IAQCFM_Exhaust + IAQHRVCFM)) )
//                     then  1  else  0  endif  endif  endif  }
      {  if (TotalCondFlrArea < 1 .OR. LocalCompAssigned( DwellUnitTypeRef ) == 0) then  0
         else DwellUnitTypeRef:IAQCFMIsBalanced endif  }
   "Set DwellUnit:IAQCFM_Balanced"     DwellUnit:IAQCFM_Balanced  =                 ; SAC 2/25/20
      {  if (IAQCFMIsBalanced) then  IAQHRVCFM + IAQCFM_Exhaust + IAQCFM_Supply + ValidOr( CentralSupplyCFMWithMult, 0 ) + ValidOr( CentralExhaustCFMWithMult, 0 )
         else  0  endif  }
   "Set ResProj:MostDUIAQ_Balanced"    ResProj:MostDUIAQ_Balanced  =    ; SAC 2/24/20   ; leave UNCHANGED for SFam models - SAC 03/18/21 (tic #1243)
      {  if (ResProj:IsMultiFamily < 0.5) then  UNCHANGED
         else if (SumAll( DwellUnit:IAQCFM_Balanced ) > (SumAll( DwellUnit:IAQCFM_Exhaust ) + SumAll( DwellUnit:CentralExhaustCFMWithMult)) .AND. 
                  SumAll( DwellUnit:IAQCFM_Balanced ) > (SumAll( DwellUnit:IAQCFM_Supply  ) + SumAll( DwellUnit:CentralSupplyCFMWithMult))) then  1  else  0  endif endif  } 
   "Set ResProj:MostDUIAQ_Exhaust"     ResProj:MostDUIAQ_Exhaust   =
      {  if (ResProj:IsMultiFamily < 0.5) then  UNCHANGED
         else if (MostDUIAQ_Balanced > 0) then  0
         else if ((SumAll( DwellUnit:IAQCFM_Exhaust ) + SumAll( DwellUnit:CentralExhaustCFMWithMult)) > (SumAll( DwellUnit:IAQCFM_Supply  ) + SumAll( DwellUnit:CentralSupplyCFMWithMult))) then  1  else  0  endif endif endif  } 
   "Set ResProj:MostDUIAQ_Supply"      ResProj:MostDUIAQ_Supply    =
      {  if (ResProj:IsMultiFamily < 0.5) then  UNCHANGED
         else if (MostDUIAQ_Balanced > 0 .OR. MostDUIAQ_Exhaust > 0) then  0  else  1  endif endif  } 
   "Set ResProj:MostDUIAQ_Type"        ResProj:MostDUIAQ_Type      =
      {  if (ResProj:IsMultiFamily < 0.5) then  UNCHANGED
         else if (MostDUIAQ_Balanced > 0) then  "Balanced"
         else if (MostDUIAQ_Exhaust  > 0) then  "Exhaust"
         else if (MostDUIAQ_Supply   > 0) then  "Supply"       else  UNDEFINED  endif endif endif endif  }
   "Set ResProj:MostUserDUIAQ_Exhaust (User model only)"    ResProj:MostUserDUIAQ_Exhaust =        ; SAC 04/03/21
      {  if (ResProj:IsMultiFamily < 0.5 .OR. IfValidAnd( RunAbbrev = "u" )==0) then  UNCHANGED
         else  MostDUIAQ_Exhaust  endif  }

   "Set ResProj:DefaultIAQFanPwr via rulelist"  ResProj:Action = {  EvalRulelist( "Set_ResProj_DefaultIAQFanPwr" )  }

   "Set DwellUnit:ForceStdIAQFanPwr"   DwellUnit:ForceStdIAQFanPwr =          ; SAC 09/01/20    ; added logic to reference ResProj:StdDesignIAQFanPwr[1] - SAC 04/02/21
      {  if (ResProj:StdDesignFuel >= 11 .AND.
             IfValidAnd( ResProj:StdDesignIAQFanPwr[1] > 0 ) .AND.
             (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf"))
         then  ResProj:StdDesignIAQFanPwr[1]
         else if (IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 ) .AND. 
                  (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf"))
         then  if (IfValidAnd( DwellUnitTypeRef:MaxStdDesignIAQWperCFM > 0 ) .AND. LocalStatus( DwellUnitTypeRef:MaxStdDesignIAQWperCFM ) > 5)
               then  DwellUnitTypeRef:MaxStdDesignIAQWperCFM
               else if (IfValidAnd( ResProj:StdDesignIAQWperCFM > 0 ) .AND. GlobalStatus( ResProj:StdDesignIAQWperCFM ) > 5)
               then  ResProj:StdDesignIAQWperCFM
               else  UNDEFINED  endif endif
         else  UNDEFINED  endif endif  }

   "Set DwellUnit:IAQPwr_Exhaust - 1"      DwellUnit:IAQPwr_Exhaust   =
      {  if (LocalCompAssigned( DwellUnitTypeRef ) == 0 .OR. IfValidAnd( TotalCondFlrArea > 0.1 )==0 .OR. IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )) then  0
         else if (DwellUnitTypeRef:IAQOption >= 3 .AND. (IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )) .AND.
                  IfValidAnd( ResProj:StdDesignIAQType[1] > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf"))
         then  if (IfValidAnd( ResProj:StdDesignIAQType[1] = 1 ))
               then  IAQCFM_Exhaust * ValidOr( ForceStdIAQFanPwr, min( ResProj:DefaultIAQFanPwr, ValidOr( ResProj:StdDesignIAQWperCFM, 9999 ) ) )
               else  0  endif
         else if (DwellUnitTypeRef:IAQOption == 5) then  TotalIAQCFM * ValidOr( ForceStdIAQFanPwr, ResProj:DefaultIAQFanPwr )
         else if (DwellUnitTypeRef:IAQOption == 2) then  DwellUnitTypeRef:IAQPwr_Exhaust * Count
         else   0  endif endif endif endif  }
   "Set DwellUnit:IAQPwr_Supply - 1"      DwellUnit:IAQPwr_Supply      =
      {  if (LocalCompAssigned( DwellUnitTypeRef ) == 0 .OR. IfValidAnd( TotalCondFlrArea > 0.1 )==0 .OR. IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )) then  0
         else if (DwellUnitTypeRef:IAQOption >= 3 .AND. (IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )) .AND.
                  IfValidAnd( ResProj:StdDesignIAQType[1] > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zs" .OR. ResProj:RunAbbrev == "smf"))
         then  if (IfValidAnd( ResProj:StdDesignIAQType[1] = 2 ))
               then  IAQCFM_Supply * ValidOr( ForceStdIAQFanPwr, min( ResProj:DefaultIAQFanPwr, ValidOr( ResProj:StdDesignIAQWperCFM, 9999 ) ) )
               else  0  endif
         else   DwellUnitTypeRef:IAQPwr_Supply * Count   endif endif  }
   "Set DwellUnit:IAQHRVPwr"           DwellUnit:IAQHRVPwr    = {
         if (LocalCompAssigned( DwellUnitTypeRef ) > 0 .AND. IfValidAnd( TotalCondFlrArea > 0.1 ) .AND.
             IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )==0)
         then  if (DwellUnitTypeRef:IAQOption >= 3 .AND. (IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )) .AND.
                   IfValidAnd( ResProj:StdDesignIAQType[1] > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf"))
               then  if (IfValidAnd( ResProj:StdDesignIAQType[1] >= 3 ))
                     then  IAQHRVCFM * ValidOr( ForceStdIAQFanPwr, min( ResProj:DefaultIAQFanPwr, ValidOr( ResProj:StdDesignIAQWperCFM, 9999 ) ) )
                     else  0  endif
               else  DwellUnitTypeRef:IAQHRVPwr * Count  endif
         else  0  endif  }
   "Set DwellUnit:IAQBalPwr"           DwellUnit:IAQBalPwr    = {
         if (LocalCompAssigned( DwellUnitTypeRef ) > 0 .AND. IfValidAnd( TotalCondFlrArea > 0.1 ) .AND.
             IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )==0)
         then  if (DwellUnitTypeRef:IAQOption >= 3 .AND. (IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )) .AND.
                   IfValidAnd( ResProj:StdDesignIAQType[1] > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf"))
               then  if (IfValidAnd( ResProj:StdDesignIAQType[1] >= 3 ))
                     then  IAQBalCFM * ValidOr( ForceStdIAQFanPwr, min( ResProj:DefaultIAQFanPwr, ValidOr( ResProj:StdDesignIAQWperCFM, 9999 ) ) )
                     else  0  endif
               else  DwellUnitTypeRef:IAQBalPwr * Count  endif
         else  0  endif  }

   "Set DwellUnit:IAQHRVCFMxRcvEff"    DwellUnit:IAQHRVCFMxRcvEff    = {
         if (LocalCompAssigned( DwellUnitTypeRef ) > 0 .AND. IfValidAnd( TotalCondFlrArea > 0.1 ) .AND.
             IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )==0)
         Then  ValidOr( DwellUnitTypeRef:IAQHRVCFMxRcvEff, 0 ) * Count
         else  0  endif  }
   "Set DwellUnit:IAQHRVCFMxSRE"    DwellUnit:IAQHRVCFMxSRE    = {
         if (LocalCompAssigned( DwellUnitTypeRef ) > 0 .AND. IfValidAnd( TotalCondFlrArea > 0.1 ) .AND.
             IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )==0)
         then  if (DwellUnitTypeRef:IAQOption >= 3 .AND. (IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )) .AND.
                   IfValidAnd( ResProj:StdDesignIAQType[1] > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf"))
               then  if (IfValidAnd( ResProj:StdDesignIAQType[1] = 4 ) .AND. IfValidAnd( ResProj:StdIAQHtRec_SRE[1] > 0 ) .AND. IfValidAnd( ResProj:StdIAQHtRec_ASRE[1] > 0 ))
                     then  IAQBalCFM * ResProj:StdIAQHtRec_SRE[1]
                     else  0  endif
               else  ValidOr( DwellUnitTypeRef:IAQHRVCFMxSRE, 0 ) * Count  endif
         else  0  endif  }
   "Set DwellUnit:IAQHRVCFMxASRE"    DwellUnit:IAQHRVCFMxASRE    = {
         if (LocalCompAssigned( DwellUnitTypeRef ) > 0 .AND. IfValidAnd( TotalCondFlrArea > 0.1 ) .AND.
             IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )==0)
         then  if (DwellUnitTypeRef:IAQOption >= 3 .AND. (IfValidAnd( ResProj:BypassRuleLimits > 0 ) .AND. IfValidAnd( Proj:AnalysisVersion >= 190200 )) .AND.
                   IfValidAnd( ResProj:StdDesignIAQType[1] > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "smf"))
               then  if (IfValidAnd( ResProj:StdDesignIAQType[1] = 4 ) .AND. IfValidAnd( ResProj:StdIAQHtRec_SRE[1] > 0 ) .AND. IfValidAnd( ResProj:StdIAQHtRec_ASRE[1] > 0 ))
                     then  IAQBalCFM * ResProj:StdIAQHtRec_ASRE[1]
                     else  0  endif
               else  ValidOr( DwellUnitTypeRef:IAQHRVCFMxASRE, 0 ) * Count  endif
         else  0  endif  }

   ; adjust IAQ fan powers for StdDesignIAQWperCFM if specified - SAC 5/13/20
   "Call subordinate rulelist to adjust DwellUnit IAQPwr properties in Std/DRtg runs"     DwellUnit:Action =      ; SAC 6/12/20 - split out to allow eval in earlier stages of std design setup
      {  if (IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0 ) .OR. IfValidAnd( ResProj:BypassRuleLimits > 0 )==0 .OR.
             (GlobalStatus( ResProj:StdDesignIAQWperCFM ) < 4 .AND. LocalStatus( DwellUnitTypeRef:MaxStdDesignIAQWperCFM ) < 4) .OR.
             (ResProj:RunAbbrev != "s" .AND. ResProj:RunAbbrev != "zb" .AND. ResProj:RunAbbrev != "smf" .AND. (ResProj:RunAbbrev != "dr" .OR. IfValidAnd( ResProj:ApplyStdIAQMaxPwrToDRtg > 0 )==0))) then  UNCHANGED
         else  EvalRulelist( "StandardDefaulting_DwellUnit_IAQPower", 1 )  endif  }

   "Set DwellUnit:StdDesignIAQCFM"     DwellUnit:StdDesignIAQCFM  =     ; SAC 12/15/19
      {  if (MinIAQCFM <= 0 .OR. IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )) then  0
         else  ValidOr( DwellUnitTypeRef:StdDesignIAQCFM, 0 ) * Count  endif  }
   "Set DwellUnit:MaxStdDesignIAQPower"   DwellUnit:MaxStdDesignIAQPower  =
      {  if (MinIAQCFM <= 0 .OR. IfValidAnd( DwellUnitTypeRef:IAQDisabled > 0.5 )) then  0
         else  ValidOr( DwellUnitTypeRef:MaxStdDesignIAQPower, 0 ) * Count  endif  }

   "Set DwellUnit:HVACSysStatus"       DwellUnit:HVACSysStatus =           ; SAC 10/08/22
      {  if (ParentComponentType() == "ResZn") then  Parent( HVACSysStatus )
         else  3  endif  }
   "Set DwellUnit:HVACSysVerified"     DwellUnit:HVACSysVerified =    
      {  if (ParentComponentType() == "ResZn") then  Parent( HVACSysVerified )
         else  UNDEFINED  endif  }

   "Set DwellUnitType:HVACSysStatus"      DwellUnitType:HVACSysStatus =       ; SAC 10/08/22
      {  if (SumRevRef( DwellUnit:DwellUnitTypeRef, DwellUnit:HVACSysStatus ) > 0)
         then  MaxRevRef( DwellUnit:DwellUnitTypeRef, DwellUnit:HVACSysStatus )
         else  3  endif  }
   "Set DwellUnitType:HVACSysVerified"    DwellUnitType:HVACSysVerified =    
      {  if (HVACSysStatus == 1 .AND. MaxRevRef( DwellUnit:DwellUnitTypeRef, DwellUnit:HVACSysVerified ) > 0)
         then  1
         else  UNDEFINED  endif  }

   ; revised for DwellUnitTypeRef:HtEqpUsedAsDHWHtr (DHWCombo) - SAC 10/15/24 (tic #3629)
	"Set DwellUnit:TotalDHWFlrArea"			DwellUnit:TotalDHWFlrArea	= {	if (LocalCompAssigned( DwellUnitTypeRef ) == 0) then  0
                                                                           else if (ParentComponentType() == "ResZn" .AND. IfValidAnd( DwellUnitTypeRef:HtEqpUsedAsDHWHtr > 0 ))
                                                                           then  Count * ValidOr( CondFlrArea, 0 )
																									else if (ParentComponentType() == "ResZn" .AND. IfValidAnd( DwellUnitTypeRef:DHWSysAssignFrac > 0 ))
																									then  Count * DwellUnitTypeRef:DHWFlrAreaPerSys / DwellUnitTypeRef:DHWSysAssignFrac
																									else  0  endif endif endif  }
																					;				else if (IfValidAnd( DwellUnitTypeRef:ServedByDHWSys > 0.5 )) then  TotalCondFlrArea  else  0  endif endif  }

   "Set DwellUnit:Description"				DwellUnit:Description		= {	if (LocalCompAssigned( DwellUnitTypeRef ) == 0) then  "No DwellUnitType assigned"
                                                                           else if (IfValidAnd( Count > 1 ))
																									then  if (IfValidAnd( DwellUnitTypeRef:NumBedrooms > 1 ))
																									      then	Format( "%.0f units, %.0f Bdrms & %s ft2 per unit",  Count, ValidOr( DwellUnitTypeRef:NumBedrooms, 0 ), FltToStr( CondFlrArea ) )
																									      else	Format( "%.0f units, %.0f Bdrm & %s ft2 per unit",   Count, ValidOr( DwellUnitTypeRef:NumBedrooms, 0 ), FltToStr( CondFlrArea ) )  endif
                                                                           else  if (IfValidAnd( DwellUnitTypeRef:NumBedrooms > 1 ))
																									      then	Format( "1 unit, %.0f Bdrms & %s ft2 per unit",  ValidOr( DwellUnitTypeRef:NumBedrooms, 0 ), FltToStr( CondFlrArea ) )
																									      else	Format( "1 unit, %.0f Bdrm & %s ft2 per unit",   ValidOr( DwellUnitTypeRef:NumBedrooms, 0 ), FltToStr( CondFlrArea ) )  endif
                                                                           endif endif  }
   "Set DwellUnit:TreeDescrip"				DwellUnit:TreeDescrip		= {	Description  }    ; SAC 12/14/21 

	"Set DwellUnitType:AssignedDUFlrArea"	DwellUnitType:AssignedDUFlrArea	= {	SumRevRef( DwellUnit:DwellUnitTypeRef, DwellUnit:TotalCondFlrAreaWithMult )  }      ; TotalCondFlrAreaWithMult - SAC 04/27/23 (tic #3392)

	"Set DwellUnitType:NumAssigningDUs"		DwellUnitType:NumAssigningDUs		= {	SumRevRef( DwellUnit:DwellUnitTypeRef, DwellUnit:CountWithMult )  }     ; CountWithMult - SAC 04/26/23 (tic #3392)

   "Set DwellUnitType:NumCWashers"        DwellUnitType:NumCWashers =      ; SAC 03/02/22
      {  if (IfValidAnd( HaveWasher > 0 )==0) then  0
         else  NumAssigningDUs  endif  }
   "Set DwellUnitType:NumDWashers"        DwellUnitType:NumDWashers =      ; SAC 03/02/22
      {  if (IfValidAnd( HaveDish   > 0 )==0) then  0
         else  NumAssigningDUs  endif  }

; SAC 3/19/15 - added to enable Instantaneous standard design DHW for 2016 non-central DHW multifamily models
	"Set DwellUnitType:NumDUsCntrlDHW"		DwellUnitType:NumDUsCntrlDHW		= {	if (AssignedDUFlrArea < 1 .OR. ServedByDHWSys < 0.5) then  0
																											else if (IfValidAnd( DHWSysRef[1]:NumDHWHeaters > 0.5 ) .AND. IfValidAnd( DHWSysRef[1]:CentralDHW > 0.5 )) then  NumAssigningDUs
																											else if (IfValidAnd( DHWSysRef[2]:NumDHWHeaters > 0.5 ) .AND. IfValidAnd( DHWSysRef[2]:CentralDHW > 0.5 )) then  NumAssigningDUs
																											else if (IfValidAnd( DHWSysRef[3]:NumDHWHeaters > 0.5 ) .AND. IfValidAnd( DHWSysRef[3]:CentralDHW > 0.5 )) then  NumAssigningDUs
																											else if (IfValidAnd( DHWSysRef[4]:NumDHWHeaters > 0.5 ) .AND. IfValidAnd( DHWSysRef[4]:CentralDHW > 0.5 )) then  NumAssigningDUs
																											else if (IfValidAnd( DHWSysRef[5]:NumDHWHeaters > 0.5 ) .AND. IfValidAnd( DHWSysRef[5]:CentralDHW > 0.5 )) then  NumAssigningDUs
																											else  0  endif endif endif endif endif endif  }
	"Set DwellUnitType:NumDUsNonCntrlDHW"	DwellUnitType:NumDUsNonCntrlDHW	= {	if (AssignedDUFlrArea < 1 .OR. ServedByDHWSys < 0.5) then  0
																											else if (IfValidAnd( DHWSysRef[1]:NumDHWHeaters > 0.5 ) .AND. IfValidAnd( DHWSysRef[1]:CentralDHW < 0.5 )) then  NumAssigningDUs
																											else if (IfValidAnd( DHWSysRef[2]:NumDHWHeaters > 0.5 ) .AND. IfValidAnd( DHWSysRef[2]:CentralDHW < 0.5 )) then  NumAssigningDUs
																											else if (IfValidAnd( DHWSysRef[3]:NumDHWHeaters > 0.5 ) .AND. IfValidAnd( DHWSysRef[3]:CentralDHW < 0.5 )) then  NumAssigningDUs
																											else if (IfValidAnd( DHWSysRef[4]:NumDHWHeaters > 0.5 ) .AND. IfValidAnd( DHWSysRef[4]:CentralDHW < 0.5 )) then  NumAssigningDUs
																											else if (IfValidAnd( DHWSysRef[5]:NumDHWHeaters > 0.5 ) .AND. IfValidAnd( DHWSysRef[5]:CentralDHW < 0.5 )) then  NumAssigningDUs
																											else  0  endif endif endif endif endif endif  }

   "Set DwellUnitType:NumAssigningHtClDUs[1]"   DwellUnitType:NumAssigningHtClDUs[1]  =      ; SAC 6/27/20   ; more explicit check for non-HP/Central type - SAC 02/25/22
      {  if (HVACSysType == 1 .OR. HVACSysType == 3) then  NumAssigningDUs  else  0  endif  }
   "Set DwellUnitType:NumAssigningHtClDUs[2]"   DwellUnitType:NumAssigningHtClDUs[2]  = {  NumAssigningHtClDUs[1]  }
   "Set DwellUnitType:NumAssigningHtClDUs[3]"   DwellUnitType:NumAssigningHtClDUs[3]  = {  NumAssigningHtClDUs[1]  }
   "Set DwellUnitType:NumAssigningHtClDUs[4]"   DwellUnitType:NumAssigningHtClDUs[4]  = {  NumAssigningHtClDUs[1]  }
   "Set DwellUnitType:NumAssigningHtClDUs[5]"   DwellUnitType:NumAssigningHtClDUs[5]  = {  NumAssigningHtClDUs[1]  }

   "Set DwellUnitType:NumAssigningHPDUs[1]"     DwellUnitType:NumAssigningHPDUs[1]    =      ; SAC 6/27/20
      {  if (HVACSysType == 2) then  NumAssigningDUs  else  0  endif  }
   "Set DwellUnitType:NumAssigningHPDUs[2]"     DwellUnitType:NumAssigningHPDUs[2]    = {  NumAssigningHPDUs[1]  }
   "Set DwellUnitType:NumAssigningHPDUs[3]"     DwellUnitType:NumAssigningHPDUs[3]    = {  NumAssigningHPDUs[1]  }
   "Set DwellUnitType:NumAssigningHPDUs[4]"     DwellUnitType:NumAssigningHPDUs[4]    = {  NumAssigningHPDUs[1]  }
   "Set DwellUnitType:NumAssigningHPDUs[5]"     DwellUnitType:NumAssigningHPDUs[5]    = {  NumAssigningHPDUs[1]  }

   "Set DwellUnitType:NumAssigningCntrlDUs[1]"   DwellUnitType:NumAssigningCntrlDUs[1]  =    ; SAC 02/25/22
      {  if (HVACSysType == 4) then  NumAssigningDUs  else  0  endif  }
   "Set DwellUnitType:NumAssigningCntrlDUs[2]"   DwellUnitType:NumAssigningCntrlDUs[2]  = {  NumAssigningCntrlDUs[1]  }
   "Set DwellUnitType:NumAssigningCntrlDUs[3]"   DwellUnitType:NumAssigningCntrlDUs[3]  = {  NumAssigningCntrlDUs[1]  }
   "Set DwellUnitType:NumAssigningCntrlDUs[4]"   DwellUnitType:NumAssigningCntrlDUs[4]  = {  NumAssigningCntrlDUs[1]  }
   "Set DwellUnitType:NumAssigningCntrlDUs[5]"   DwellUnitType:NumAssigningCntrlDUs[5]  = {  NumAssigningCntrlDUs[1]  }


   ;--------------------------------------------------------------------
   ; ProposedInput: Zone Rules
   ;--------------------------------------------------------------------
	"Force re-default of Zone:Type (iff necessary)"		Zone:Action	= {
			if ( LocalStatus( Type ) > 5 .AND. ( (ResProj:ZonalControl == 0 .AND. (Type == 2 .OR. Type == 3)) .OR.
															 (ResProj:ZonalControl != 0 .AND.  Type == 1 ) ) )
			then	EvalRulelist( "ForceDefault_Zone_Type", 1 )		else  UNCHANGED  endif  }
	"Default Zone:Type"		Zone:Type	= {	switch (ResProj:ZonalControl)
																case  0 :  1		; Conditioned
																default :  2		; Living
															endswitch  }

  ; SAC 6/25/14 - sum child dwelling unit area into DwellingUnitArea_Cond
	"Set Zone:DwellingUnitArea_Cond-1"		Zone:DwellingUnitArea_Cond		= {	SumChildren( DwellUnit:TotalCondFlrArea )  }

; SAC 12/30/19 - moved UP in evaluation order
;	"Set Zone:NumDwellingUnits"		Zone:NumDwellingUnits	= {	if (ResProj:IsMultiFamily < 0.5) then  0  else  SumChildren( DwellUnit:Count )  endif  }
;	"Set ResProj:NumDwellingUnits"		ResProj:NumDwellingUnits	= {	if (ResProj:IsMultiFamily < 0.5) then  1  else  SumAll( Zone:NumDwellingUnits )  endif  }

  ; SAC 6/25/14 - allow for defaulting of FloorArea for multifamily projects
	"Default Zone:FloorArea"	Zone:FloorArea	= {	if (ResProj:IsMultiFamily > 0.5 .AND. LocalStatus( FloorArea ) < 5)	then   DwellingUnitArea_Cond   else  UNCHANGED  endif  }
   "Set Zone:Area - added for consistency w/ Garage & OtherZone"     Zone:Area = {  FloorArea  }   ; SAC 11/24/20 (tic #1253)

	; Zone:CeilingHeight,         Required,   0,    1,   1,    1,  1,  1 - no default

	"Default Zone:Volume"			Zone:Volume			= {	if (LocalStatus( CeilingHeight ) < 1 .OR. LocalStatus( FloorArea ) < 1) then  UNDEFINED
																			else  CeilingHeight * FloorArea  endif  }
;	"Default OtherZone:Volume"		OtherZone:Volume	= {	if (LocalStatus( CeilingHeight ) < 1 .OR. LocalStatus( Area ) < 1) then  UNDEFINED
;																			else  CeilingHeight * Area  endif  }
																			
;	"Default OtherZone:Perim"			OtherZone:Perim	= {	if (Area > 0) then  sqrt( Area ) * 4 else  0  endif  }

; SAC 9/12/12 - migrated old (bogus) WinHHTop default to WinHeadHeight
;	"Zone:WinHHTop"					Zone:WinHHTop		= {	if (LocalStatus( CeilingHeight ) < 1) then  7.67
;																			else  max( 1, Local( CeilingHeight ) - 0.33 )  endif  }
	"Default Zone:WinHeadHeight"	Zone:WinHeadHeight	= {	if (LocalStatus( CeilingHeight ) < 1) then  7.67
																				else  max( 1, Local( CeilingHeight ) - 1.33 )  endif  }
;	"Default OtherZone:WinHeadHeight"	OtherZone:WinHeadHeight	= {	if (LocalStatus( CeilingHeight ) < 1) then  7.67
;																				else  max( 1, Local( CeilingHeight ) - 1.33 )  endif  }
; SAC 6/17/14 - switched to array of 3 for nat vent testing
;	"Set Zone:WinVentHtDiff"		Zone:WinVentHtDiff 	= {	2.0  }
	"Set Zone:WinVentHtDiff[1]"		Zone:WinVentHtDiff[1] 	= {	-999.0  }
	"Set Zone:WinVentHtDiff[2]"		Zone:WinVentHtDiff[2] 	= {	-999.0  }
	"Set Zone:WinVentHtDiff[3]"		Zone:WinVentHtDiff[3] 	= {	-999.0  }
;	"Set OtherZone:WinVentHtDiff[1]"		OtherZone:WinVentHtDiff[1] 	= {	-999.0  }
;	"Set OtherZone:WinVentHtDiff[2]"		OtherZone:WinVentHtDiff[2] 	= {	-999.0  }
;	"Set OtherZone:WinVentHtDiff[3]"		OtherZone:WinVentHtDiff[3] 	= {	-999.0  }

	"Zone:FloorHeight default"		      Zone:FloorHeight	      = {	max( ValidOr( CeilingHeight, 5 )+1, 9 )  }
;	"OtherZone:FloorHeight default"		OtherZone:FloorHeight	= {	max( ValidOr( CeilingHeight, 5 )+1, 9 )  }   ; mod to prevent undefined data error - SAC 05/28/21

	; SAC 3/28/13 - expanded default logic
	"Zone:Bottom default"			Zone:Bottom			= {	if (ChildCount( SlabFloor ) > 0) then  0.67
																			else if (ChildCount( FloorOverCrawl ) > 0) then  max( 0, (Global( CrawlSpace:AvgWallHeight ) - 0.67) )
																			else if (ChildCount( ResExtFlr  ) > 0) then  max( 0, MinChild( ResExtFlr:FloorZ ) )
																			else if (ChildCount( ResIntFlr  ) > 0) then  max( 0, MinChild( ResIntFlr:FloorZ ) )
																			else  0  endif endif endif endif  }
   ; restored following rule to prevent rule eval error due to undefined data - SAC 06/26/24
	"OtherZone:Bottom default"			OtherZone:Bottom			= {	if (ChildCount( SlabFloor ) > 0) then  0.67
																			else if (ChildCount( FloorOverCrawl ) > 0) then  max( 0, (Global( CrawlSpace:AvgWallHeight ) - 0.67) )
																			else if (ChildCount( ResExtFlr  ) > 0) then  max( 0, MinChild( ResExtFlr:FloorZ ) )
																			else if (ChildCount( ResIntFlr  ) > 0) then  max( 0, MinChild( ResIntFlr:FloorZ ) )
																			else  0  endif endif endif endif  }

	"Zone:NumStories default"		Zone:NumStories	= {	1  }
;	"OtherZone:NumStories default"		OtherZone:NumStories	= {	1  }

	"Set Zone:GrndFlrClgHeight"	Zone:GrndFlrClgHeight	= {	if (Bottom > -4 .AND. Bottom < 4)
																					then  CeilingHeight  else  UNDEFINED  endif  }	; SAC 2/4/13 - help to specify Garage EaveZ
;	"Set OtherZone:GrndFlrClgHeight"	OtherZone:GrndFlrClgHeight	= {	if (Bottom > -4 .AND. Bottom < 4)
;																					then  CeilingHeight  else  UNDEFINED  endif  }	; SAC 2/4/13 - help to specify Garage EaveZ

	"Set Zone:TreeDescrip"			Zone:TreeDescrip	= {	if (IfValidAnd( FloorArea > 0.1 ))
																			then  Format( "%s ft2, %s dwellings", FltToStr( FloorArea ), FltToStr( ValidOr( NumDwellingUnits, 0 ) ) )
																			else  "no floor area specified"  endif  }
;	"Set OtherZone:TreeDescrip"	OtherZone:TreeDescrip	= {	if (IfValidAnd( Area > 0.1 ))
;																			then if( Type = 1 )
;																			     then Format( "%s, %s %s, %s ft2", EnumString( SpcFunc ), EnumString( CondType ), EnumString( Type ), FltToStr( Area ) )
;																			     else Format( "%s, %s, %s ft2", EnumString( SpcFunc ), EnumString( Type ), FltToStr( Area ) ) endif
;																			else if( Type = 1 )
;																			     then Format( "%s, %s %s, no floor area specified", EnumString( SpcFunc ), EnumString( CondType ), EnumString( Type ) )
;																			     else Format( "%s, %s, no floor area specified", EnumString( SpcFunc ), EnumString( Type ) )  endif  
;																			endif }

	"Set Zone:ZnModel"			Zone:ZnModel	= {	switch( Local( Type ) )
																		case  1 :	3	; "Conditioned"   -> "CZM"
																		case  2 :	3	; "Living"        -> "CZM"
																		case  3 :	3	; "Sleeping"      -> "CZM"
																		case 10 :	4	; "Unconditioned" -> "UZM"
																		default :   3
																	endswitch  }	; 1-"CNE", 2-"CSE", 3-"CZM", 4-"UZM", 5-"UZX"
	"Default Zone:InfAC"       Zone:InfAC  	= {	0  }	; 0s defaults of old infiltration models
	"Default Zone:InfELA"      Zone:InfELA 	= {	0  }
	"Default Zone:InfShld"     Zone:InfShld	= {	4  }	; 0s defaults of old infiltration models
	
;	"Set OtherZone:ZnModel"			OtherZone:ZnModel	= {	switch( Local( Type ) )
;																		case  1 :	3	; "Conditioned"   -> "CZM"
;																		case 10 :	4	; "Unconditioned" -> "UZM"
;																		default :   3
;																	endswitch  }	; 1-"CNE", 2-"CSE", 3-"CZM", 4-"UZM", 5-"UZX"
;	"Default OtherZone:InfAC"       OtherZone:InfAC  	= {	0  }	; 0s defaults of old infiltration models
;	"Default OtherZone:InfELA"      OtherZone:InfELA 	= {	0  }
;	"Default OtherZone:InfShld"     OtherZone:InfShld	= {	4  }	; 0s defaults of old infiltration models

	"Default Zone:ZnHIRatio"		Zone:ZnHIRatio		= {  10  }     ; SAC 02/11/22

	"Set Zone:CondFloorArea"		Zone:CondFloorArea		= {	if (Local( Type ) <  10) then  Local( FloorArea )  else  0  endif  }
	"Set Zone:CondFloorAreaWithMult" Zone:CondFloorAreaWithMult = {	CondFloorArea * ValidOr( Mult, 1 )  }    ; SAC 04/27/23 (3392)
	"Set Zone:UncondFloorArea"		Zone:UncondFloorArea		= {	if (Local( Type ) == 10) then  Local( FloorArea )  else  0  endif  }
   "Set Zone:LvgCondFloorArea"	Zone:LvgCondFloorArea   = {   if (Local( Type ) ==  2) then  Local( FloorArea )  else  0  endif  }
   "Set Zone:SlpCondFloorArea"	Zone:SlpCondFloorArea   = {   if (Local( Type ) ==  3) then  Local( FloorArea )  else  0  endif  }
   ; restored removed OtherZone rules to prevent incorrect setting of ResProj properties - SAC 10/09/24 (tic #3630)
   "Set OtherZone:CondFloorArea"    OtherZone:CondFloorArea  = {  if (Type < 10) then  Area  else  0  endif  }       ; SAC 9/10/19 (MFamProto)
	"Set OtherZone:CondFloorAreaWithMult" OtherZone:CondFloorAreaWithMult = {	CondFloorArea * ValidOr( Mult, 1 )  }    ; SAC 04/27/23 (3392)
   "Set OtherZone:NewOrAltHVACFloorArea" OtherZone:NewOrAltHVACFloorArea = {  if (IfValidAnd( HVACSysStatus = 1 )==0) then  CondFloorArea  else  0  endif  }      ; SAC 06/28/23 (tic #3479)
; SAC 4/8/15 - moved up again to set prior to ResProj:PVDwellUnitSize
;	mjb	4/14/14	moved CondFloorArea rule up - needed for CoolVent rules
	"Set ResProj:CondFloorArea"		ResProj:CondFloorArea		= {	SumAll( Zone:CondFloorArea ) + SumAll( OtherZone:CondFloorArea )  }
	"Set ResProj:CondFloorAreaWithMult" ResProj:CondFloorAreaWithMult = {	SumAll( Zone:CondFloorAreaWithMult ) + SumAll( OtherZone:CondFloorAreaWithMult )  }    ; SAC 04/27/23 (tic #3392)
   "Set ResProj:UncondFloorArea - sum of attic, garage, uncond zone areas"    ResProj:UncondFloorArea =     ; SAC 12/01/20
      {  SumAll( Attic:FloorArea ) + SumAll( Garage:Area ) + SumAll( Zone:FloorArea ) + SumAll( OtherZone:Area ) - CondFloorArea  }

; mjb	4/28/14	added Conditioned Volume at Zone level to be summed for ResProject - needed to convert ACH50 to CFM50, to be in correct reporting units
; add logic to use Flr-to-Ceiling height for Top Floors only, and Flr-to-Flr height for all other zones - SAC 7/19/20 (MFamProto)
	"Default Zone:CondVolume"        Zone:CondVolume      = {  ValidOr( CondFloorArea, 0 ) * ValidOr( CeilingHeight, 0 ) * ValidOr( Mult, 1 )  }      ; incl. Mult - SAC 04/28/23 (tic #3392)
   ; rolled BACK Flr-to-Flr CondVolume change - SAC 7/20/20 (MFamProto)
   ;   {  if ((ValidOr( FloorArea, 0 )/2) > (SumChildren( CeilingBelowAttic:Area ) + SumChildren( CathedralCeiling:Area )))
   ;      then  CondFloorArea * FloorHeight
   ;      else  CondFloorArea * CeilingHeight  endif  }
;	"Default OtherZone:CondVolume"   OtherZone:CondVolume = {  ValidOr( CondFloorArea, 0 ) * ValidOr( CeilingHeight, 9 ) * ValidOr( Mult, 1 )  }      ; mod to prevent undefined data error - SAC 05/28/21  ; incl. Mult - SAC 04/28/23 (tic #3392)
   ;   {  if ((ValidOr( Area, 0 )/2) > (SumChildren( CeilingBelowAttic:Area ) + SumChildren( CathedralCeiling:Area )))
   ;      then  CondFloorArea * FloorHeight
   ;      else  CondFloorArea * CeilingHeight  endif  }
	"Default ResProj:CondVolume"        ResProj:CondVolume      = {  SumAll( Zone:CondVolume ) + SumAll( OtherZone:CondVolume )	}

; SAC 12/28/15 - replacement inputs for AdditionCFAFrac
	"Force swap of old AdditionCFAFrac -> w/ new AddAloneExistArea & AddAloneAddedArea"		ResProj:Action	= {	if (RunScope == 1 .AND. IsAddAlone == 1 .AND. LocalStatus( AdditionCFAFrac ) > 6)
																																				then	EvalRulelist( "Replace_AdditionCFAFrac_with_AddAloneAreas" )
																																				else if ((RunScope != 1 .OR. IsAddAlone != 1) .AND.
																																							(LocalStatus( AddAloneAddedArea ) > 6 .OR. LocalStatus( AddAloneExistArea ) > 6))
																																				then	EvalRulelist( "ForceReset_AddAloneAreas" )
																																				else	UNCHANGED  endif endif  }
	"Default ResProj:AddAloneAddedArea"		ResProj:AddAloneAddedArea	= {	if (RunScope == 1 .AND. IsAddAlone == 1) then	SumAll( Zone:FloorArea ) + SumAll( OtherZone:Area )  else  UNDEFINED  endif  }
	"Default ResProj:AddAloneAddedAreaWithMult"		ResProj:AddAloneAddedAreaWithMult	= {	if (RunScope == 1 .AND. IsAddAlone == 1) then	SumAll( Zone:CondFloorAreaWithMult ) + SumAll( OtherZone:CondFloorAreaWithMult )  else  UNDEFINED  endif  }
	"Default ResProj:AddAloneExistArea"		ResProj:AddAloneExistArea	= {	if (RunScope == 1 .AND. IsAddAlone == 1) then	0                         else  UNDEFINED  endif  }
	"Default ResProj:AddAloneTotalArea"		ResProj:AddAloneTotalArea	= {	if (RunScope == 1 .AND. IsAddAlone == 1) then	AddAloneAddedArea + AddAloneExistArea  else  UNDEFINED  endif  }
	"Default ResProj:AdditionCFAFrac"		ResProj:AdditionCFAFrac		= {	if (RunScope == 1 .AND. IsAddAlone == 1)
																							then	if (IfValidAnd( AddAloneTotalArea > 0 )) then  ValidOr( AddAloneAddedArea, 0 ) / AddAloneTotalArea
																									else  1  endif
																							else  1  endif  }

;	E+A+A	mjb	2/13/14
; mjb 4/24/14	- Additions Alone added
	"Set Zone:AdditionCFA"			Zone:AdditionCFA			= {	if (( ResProj:RunScope == 2 .AND. Status = 3) .OR. (ResProj:RunScope == 1 .AND. ResProj:IsAddAlone > 0.5) ) then  CondFloorArea  
																						else  0  endif  }
	"Set ResProj:AdditionCFA"			ResProj:AdditionCFA			= {	SumAll( ResZn:AdditionCFA )  }   ; was:  SumChildren( Zone:AdditionCFA )  }  - SAC 02/28/24

	; SAC 2/20/15 - for EAA addition window areas
	"Set Zone:IsEAAAdditionZone"	Zone:IsEAAAdditionZone	= {	if (ResProj:RunScope == 2 .AND. Status = 3) then  1  else  0  endif  }
;	"Set OtherZone:IsEAAAdditionZone"	OtherZone:IsEAAAdditionZone	= {	0  }        ; SAC 9/19/19 (MFamProto)

;EM 2/19/15
	; SAC 9/16/15 - NOTE: (from DeeAnne @ CEC) - RunScope = New & AdditionAlone checked does NOT get accumulated into *AdditionSize - those models are treated like New Cons, not E+A+A
	"Set ResProj:AdditionSize"			ResProj:AdditionSize			= {	if (RunScope == 2) then  SumAcrossIf( Zone:FloorArea,     Zone:Status = 3 )  else  -1  endif  }
	"Set ResProj:AdditionSizeWithMult"	ResProj:AdditionSizeWithMult	= {	if (RunScope == 2) then  SumAcrossIf( Zone:CondFloorAreaWithMult,     Zone:Status = 3 )  else  -1  endif  }
	"Set ResProj:CondAdditionSize"	ResProj:CondAdditionSize	= {	if (RunScope == 2) then  SumAcrossIf( Zone:CondFloorArea, Zone:Status = 3 )  else   0  endif  }
	"Set ResProj:CondAdditionSizeWithMult"	ResProj:CondAdditionSizeWithMult	= {	if (RunScope == 2) then  SumAcrossIf( Zone:CondFloorAreaWithMult, Zone:Status = 3 )  else   0  endif  }  ; SAC 04/27/23 (tic #3392)

  ; SAC 12/5/13 - added to facilitate HVACSys:FloorAreaServed defaulting
  ; JP 6/26/23 - included multiplier
	"Set Zone:HVACNewCondFloorAreaWithMult"		Zone:HVACNewCondFloorAreaWithMult	= {	if (ResProj:RunScope == 2)
																								then	if (HVACSysStatus == 3) then  CondFloorAreaWithMult  else  0  endif
																								else  CondFloorAreaWithMult  endif  }
	"Set Zone:HVACAltCondFloorAreaWithMult"		Zone:HVACAltCondFloorAreaWithMult	= {	if (ResProj:RunScope == 2 .AND. HVACSysStatus == 2) then  CondFloorAreaWithMult  else  0  endif  }
	"Set Zone:HVACExCondFloorAreaWithMult"		Zone:HVACExCondFloorAreaWithMult	= {	if (ResProj:RunScope == 2 .AND. HVACSysStatus == 1) then  CondFloorAreaWithMult  else  0  endif  }
	"Set Zone:HVACExVCondFloorAreaWithMult"		Zone:HVACExVCondFloorAreaWithMult	= {	if (ResProj:RunScope == 2 .AND. HVACSysStatus == 2 .AND. HVACSysVerified) then  CondFloorAreaWithMult  else  0  endif  }
;	"Set OtherZone:HVACNewCondFloorAreaWithMult"	OtherZone:HVACNewCondFloorAreaWithMult	= {	if(CondType = 1) then CondFloorAreaWithMult else 0 endif }
	                                                               ;      if (ResProj:RunScope == 2)
																						;		then	if (HVACSysStatus == 3) then  CondFloorArea  else  0  endif
																						;		else	CondFloorArea  endif  }
;	"Set OtherZone:HVACAltCondFloorAreaWithMult"	OtherZone:HVACAltCondFloorAreaWithMult	= {	0  }   ; if (ResProj:RunScope == 2 .AND. HVACSysStatus == 2) then  CondFloorArea  else  0  endif  }
;	"Set OtherZone:HVACExCondFloorAreaWithMult"		OtherZone:HVACExCondFloorAreaWithMult		= {	0  }   ; if (ResProj:RunScope == 2 .AND. HVACSysStatus == 1) then  CondFloorArea  else  0  endif  }
;	"Set OtherZone:HVACExVCondFloorAreaWithMult"	OtherZone:HVACExVCondFloorAreaWithMult	= {	0  }   ; if (ResProj:RunScope == 2 .AND. HVACSysStatus == 2 .AND. HVACSysVerified) then  CondFloorArea  else  0  endif  }
  ; SAC 12/19/13 - added new property to help facilitate checks to determine if there is a valid (new/alt/ex-specific) HVAC system assigned
;	"Set Zone:ActiveHVACSystem"			Zone:ActiveHVACSystem		= {	if (ResProj:RunScope != 2 .OR. HVACSysStatus == 3) then  HVACSystem
;																								else if (ResProj:RunScope == 2 .AND. HVACSysStatus == 2) then  AltHVACSystem
;																								else if (ResProj:RunScope == 2 .AND. HVACSysStatus == 1) then  exHVACSystem
;																								else  UNDEFINED  endif endif endif  }
;	mjb	10/7/14	- modified to work with IsAddAlone and Existing HVAC
	"Set Zone:ActiveHVACSystem"			Zone:ActiveHVACSystem		= {	if ((ResProj:RunScope != 2 .AND. ResProj:IsAddAlone < 0.5) .OR. HVACSysStatus == 3) then  HVACSystem
																								else if (ResProj:RunScope == 2 .AND. HVACSysStatus == 2) then  AltHVACSystem
																								else if ((ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0.5) .AND. HVACSysStatus == 1) then  exHVACSystem
																								else  UNDEFINED  endif endif endif  }
   ; restored copy of ResOtherZn:ActiveHVACSystem rule here to ensure it is valid prior to following rules related to DHW - SAC 10/14/24 (tic #3629)
	"Set ResOtherZn:ActiveHVACSystem"   ResOtherZn:ActiveHVACSystem  =            ; {  ozHVACSystem  } - restored logic defaulting of ActiveHVACSystem - SAC 06/25/23 (tic #3479)
	   {  if      (Type < 10 .AND. CondType = 1 .AND. Proj:ResCompOpt > 1 .AND. HVACSysStatus == 2) then  AltHVACSystem
			else if (Type < 10 .AND. CondType = 1 .AND. Proj:ResCompOpt > 1 .AND. HVACSysStatus == 1) then  exHVACSystem
         else if (Type < 10 .AND. CondType = 1) then  ozHVACSystem
         else  UNDEFINED  endif endif endif  }
	                                                               ;      if ((ResProj:RunScope != 2 .AND. ResProj:IsAddAlone < 0.5) .OR. HVACSysStatus == 3) then  HVACSystem
																						;		else if (ResProj:RunScope == 2 .AND. HVACSysStatus == 2) then  UNDEFINED  ; AltHVACSystem
																						;		else if ((ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0.5) .AND. HVACSysStatus == 1) then  UNDEFINED  ; exHVACSystem
																						;		else  UNDEFINED  endif endif endif  }

;	"Set OtherZone:ServedByAirSys"		OtherZone:ServedByAirSys	=     ; SAC 05/17/22
;      {  if (LocalCompAssigned( ActiveHVACSystem ) == ComponentType( "AirSys" )) then  1  else  0  endif  }

;	mjb	4/18/14	- added to keep track of existing floor area based on Zone Status
	"Set Zone:exCondFloorArea"			Zone:exCondFloorArea		= {	if (Status == 1) then CondFloorArea else 0 endif	}

  ; SAC 4/13/16 - set Zone:LtgCondFloorArea used in setting T24-2016 lighting gains
	"Set ResProj:LtgCondFloorArea"		ResProj:LtgCondFloorArea	= {	if (ResProj:IsMultiFamily > 0.5) then  SumChildren( DwellUnit:TotalLtgFlrArea )
																						else if (ResProj:RunScope == 1 .AND. ResProj:IsAddAlone > 0.5)
																						then	min( 4150, (ValidOr( AddAloneExistArea, 0 ) + ValidOr( AddAloneAddedArea, 0 )) )
																						else	min( 4150, CondFloorArea )
																						endif endif  }

	"Init Zone:GainNumBedrooms - Number of bedrooms used to scale internal gians for this Zone"	Zone:GainNumBedrooms	= {
					if (ResProj:IsMultiFamily < 0.5)
					then	if (ResProj:RunScope == 1 .AND. ResProj:IsAddAlone > 0.5)	; SINGLE FAMILY
							then	ResProj:NumAddBedrooms		; New Cons, Addition Alone
							else	ResProj:NumBedrooms			; EAA or New Cons NOT Addition Alone
							endif
					else	SumChildren( DwellUnit:TotalLtgFlrArea )
					endif  }
	"Scale Zone:GainNumBedrooms for SFam Zone area"	Zone:GainNumBedrooms	= {
					if (ResProj:IsMultiFamily > 0.5) then  UNCHANGED
					else if (IfValidAnd( ResProj:CondFloorArea > 0 ))
					then	GainNumBedrooms * CondFloorArea / ResProj:CondFloorArea
					else	GainNumBedrooms / ComponentCount( Zone )		; ERROR - ResProj:CondFloorArea bogus
					endif endif  }

; SAC 9/6/12 - moved up from below - also added logic to ensure it gets set only for Conditioned zones
		; (#3a in Internal Mass write-up) create & assign SURFACE objects (to Conditioned zones only)...
	"Set Zone:znCAir"				Zone:znCAir = {	if (Type < 10) then  ValidOr( CondFloorArea, 0 ) * 2.
																else  UNDEFINED  endif	}
;	"Set OtherZone:znCAir"		OtherZone:znCAir = {	if (Type < 10) then  ValidOr( CondFloorArea, 0 ) * 2.
;																else  UNDEFINED  endif	}

	"Set Zone:ClgBlwAtticArea"			Zone:ClgBlwAtticArea		= {	SumChildren( CeilingBelowAttic:Area )  }
	"Set Zone:CondClgBlwAtticArea"	Zone:CondClgBlwAtticArea ={	if (Type < 10) then  ClgBlwAtticArea  else  0  endif  }
	"Set Zone:HasCondClgBlwAttic"		Zone:HasCondClgBlwAttic	= {	if (CondClgBlwAtticArea > 0.1) then  1  else  0  endif  }
;	"Set OtherZone:ClgBlwAtticArea"		OtherZone:ClgBlwAtticArea		= {	SumChildren( CeilingBelowAttic:Area )  }
;	"Set OtherZone:CondClgBlwAtticArea"	OtherZone:CondClgBlwAtticArea ={	if (Type < 10) then  ClgBlwAtticArea  else  0  endif  }
;	"Set OtherZone:HasCondClgBlwAttic"	OtherZone:HasCondClgBlwAttic	= {	if (CondClgBlwAtticArea > 0.1) then  1  else  0  endif  }

; SAC 12/1/13 - moved setting of Zone:HVACSysAssigned up HERE into ProposedInput rulelist to use in UI
;	mjb	4/18/14 - changed HVACSystem to ActiveHVACSystem in next rule, to work with E+A+A too
	"Set Zone:HVACSysAssigned"			Zone:HVACSysAssigned		= {	if (Type < 10 .AND. LocalCompAssigned( ActiveHVACSystem ) > 0) then  1  else  0  endif  }
;	"Set OtherZone:HVACSysAssigned"	OtherZone:HVACSysAssigned	= {	if (Type < 10 .AND. LocalCompAssigned( ActiveHVACSystem ) > 0) then  1  else  0  endif  }

; object enabling heat transfer through openings between zones - SAC 07/30/20 (MFamProto)
;     Opening:Outside - The name of the zone that this opening joins       	    Required,   0,    1,   1,    1,  1,  1
;     Opening:Width   - Width of opening       	  Compulsory,   1,    1,   1,    1,  1,  1
   "Default Opening:BottomHt"    Opening:BottomHt = {  0  }
   "Default Opening:Height"      Opening:Height =
      {  if (IfValidAnd( CeilingHeight > BottomHt ))
         then  CeilingHeight - BottomHt
         else  7  endif  }
   "Set Opening:Area"            Opening:Area  = {  ValidOr( Width, 0 ) * Height  }
   "Set Opening:TreeDescrip"     Opening:TreeDescrip  =
      {  if (LocalCompAssigned( Outside ) < 1) then  "missing Outside zone assignment"
         else if (LocalStatus( Width ) < 1) then  "missing opening Width"
         else  Format( "%s ft2 joining '%s' <> '%s'", FltToStr( Area, 0 ), Parent( Name ), Outside:Name )
         endif endif  }

END
;*************************************************************************


; SAC 10/24/16 - new rulelist to default Garage properties
;*************************************************************************
RULELIST "ProposedInput_Garage" 0 0 0 0
;*************************************************************************
   ;--------------------------------------------------------------------
   ; ProposedInput: Garage Rules
   ;--------------------------------------------------------------------
   "Create Garage if one not already present"		ResProj:Action		= {	if (Local( HasGarage ) < 0.1 .OR. ComponentCount( Garage ) > 0.5) then  UNCHANGED
																								else  EvalRulelist( "Create_Garage" )  endif  }

	"Set Garage:Area"					Garage:Area				= {	if (Global( ResProj:HasGarage ) > 0.1)	then  400		; based on wiki.answers.com
																				else  0  endif  }
	"Set Garage:Volume"				Garage:Volume			= {	if (Global( ResProj:HasGarage ) > 0.1)	then  Local( Area ) * 10
																				else  0  endif  }
	; SAC 3/28/13 - expanded default logic
	"Default Garage:Bottom"			Garage:Bottom		= {	if (ChildCount( SlabFloor ) > 0) then  0.67
																			else if (ChildCount( FloorOverCrawl ) > 0) then  max( 0, (Global( CrawlSpace:AvgWallHeight ) - 0.67) )
																			else if (ChildCount( ResExtFlr  ) > 0) then  max( 0, MinChild( ResExtFlr:FloorZ ) )
																			else  0  endif endif endif  }

	; SAC 2/20/15 - for EAA addition window areas
	"Set Garage:IsEAAAdditionZone"	Garage:IsEAAAdditionZone	= {	0  }

	"Set Garage:TreeDescrip"		Garage:TreeDescrip	= {	if (Global( ResProj:HasGarage ) > 0.1)
																				then  Format( "%s SqFt", FltToStr( Local( Area ) ) )
																				else  "activate on ResProject dialog, Building tab"  endif  }
END
;*************************************************************************
RULELIST "ProposedInput_Garage_Com" 0 0 0 0
;************************************************************************* SAC 12/21/22
   "delete ResGarage from CBECC models when no data specified by user"     ResGarage:Action = 
      {  if (LocalStatus( Area ) < 4 .AND. LocalStatus( Volume ) < 4 .AND. LocalStatus( Bottom ) < 4 .AND.
             IfValidAnd( ExtWallAreaByWallType[1] > 0 )==0 .AND. IfValidAnd( ExtWallAreaByWallType[2] > 0 )==0 .AND.
             IfValidAnd( ExtWallAreaByWallType[3] > 0 )==0 .AND. IfValidAnd( ExtWallAreaByWallType[4] > 0 )==0 .AND.
             IfValidAnd( ExtWallDoorAreaByWallType[1] > 0 )==0 .AND. IfValidAnd( ExtWallDoorAreaByWallType[2] > 0 )==0 .AND.
             IfValidAnd( ExtWallDoorAreaByWallType[3] > 0 )==0 .AND. IfValidAnd( ExtWallDoorAreaByWallType[4] > 0 )==0 )
         then  DeleteComp()  else  UNCHANGED  endif  }
END
;*************************************************************************


; SAC 10/24/16 - new rulelist to default shell surfaces & inter-zone area properties
;*************************************************************************
RULELIST "ProposedInput_SurfacesAndInterZoneAreas" 0 0 0 0
;*************************************************************************
   ;--------------------------------------------------------------------
   ; ProposedInput: ResExtWall Rules
   ;--------------------------------------------------------------------
			;  ResExtWall:Orientation,       BEMP_Sym,  - defaulted vis Symbol definitions
	"Default ResExtWall:OrientationValue"
		ResExtWall:OrientationValue 	= {	switch (Local( Orientation ))
														case  2 :   90  ; "Left"
														case  3 :  270  ; "Right"
														case  4 :  180  ; "Back"
														default :    0  ; Front or -specify-
													endswitch  }

			;  ResExtWall:Area,              BEMP_Flt,  1, "ft2",  - no default

;	"Default ResExtWall:CavityRValue from CTZ-based code requirements"
;		ResExtWall:CavityRValue			= {	if (Global( Proj:CliZnNum ) < 0.5) then  UNDEFINED
;													else  ClimateZoneTable( Global( Proj:CliZnNum ), 3 )  endif  }

			;  ResExtWall:SheathingVRValue,  BEMP_Sym,  - symbol defaulted
			;  ResExtWall:FrameType,         BEMP_Sym,  - symbol defaulted
			;  ResExtWall:FrameSpacing,      BEMP_Sym,  - symbol defaulted

	"Default ResExtWall:Tilt (60 < wall < 180, 90-vertical, 180-floor, 0-ceiling)"
		ResExtWall:Tilt 					= {	90  }

	"Default ResExtWall:Absorptivity"		ResExtWall:Absorptivity	= {	0.5  }	; SAC 1/15/13 - added default of 0.5 per GC issue #19

	"Set ResExtWall:ParentType"				ResExtWall:ParentType	=        ; aded ResOtherZn logic - SAC 02/06/22 (MFam)
	{	if (ParentComponentType() == "ResZn")
		then	if (Parent( Type ) < 10) then  1  else  0  endif
		else if (ParentComponentType() == "ResGarage") then  2
		else if (ParentComponentType() == "ResOtherZn")
      then  if (IfValidAnd( ResOtherZn:SpcFunc = 355 ) .OR.
                IfValidAnd( ResOtherZn:SpcFunc = 356 ) )   ; SAC 02/08/22 - was: = "Parking Garage Area (Parking Zone and Ramps)" ))
            then  2
            else if (Parent( Type ) < 10)
            then  1  else  0  
            endif endif
		else  0  endif endif endif  }

   "Set ResExtWall:ParentIsCond (needed for any parent of ResWin or ResSkylt)"   ResExtWall:ParentIsCond  =       ; SAC 5/19/20 (tic #1221)
      {  if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  0
         else if (Parent( Type ) < 10) then  1  else  0  endif endif  }

	"Default IsStdCondZoneWall" 	ResExtWall:IsStdCondZoneWall	= {	0  }		; SAC 2/11/14

	; SAC 2/20/15 - for EAA addition window areas
	"Set ResExtWall:IsEAAAddZoneChild"	ResExtWall:IsEAAAddZoneChild	= {	Parent( IsEAAAdditionZone )  }	; parent could be Zone or Garage


   ;--------------------------------------------------------------------
   ; ProposedInput: ResIntWall Rules
   ;--------------------------------------------------------------------
			;  ResIntWall:Area,              BEMP_Flt,  1, "ft2",  - no default

;	"Default ResIntWall:Construction"
;		ResIntWall:Construction 	= {	RuleLibrary( Cons, "Interior Wall Cons (BT95)" )  }

	; SAC 10/1/13 - address backward compatibility for OutsideDiffUnit property - take its value and set corresponding properties for its replacement, then flag this property as undefined
	"Backward compat for ResIntWall:OutsideDiffUnit"	ResIntWall:Action	= {
		if (LocalStatus( OutsideDiffUnit ) < 5) then  UNCHANGED		; do nothing if user did NOT define this property
		else	EvalRulelist( "BackwardCompat_ResIntWall_OutsideDiffUnit", 1 )  endif  }
	; SAC 10/1/13 - default new properties related to what is on the other side of this surface
	"Default ResIntWall:IsPartySurface"			ResIntWall:IsPartySurface		= {	0  }
	"Default ResIntWall:OtherSideModeled"		ResIntWall:OtherSideModeled	= {
		if (ResProj:IsMultiFamily > 0.5) then  1  else  0  endif  }		; SAC 10/9/13 - prevent selection of OtherSideModeled for SFam models
	"Set ResIntWall:PartyEdgeArea"				ResIntWall:PartyEdgeArea		= {
		if (IsPartySurface > 0.5) then  Area  else  0  endif  }

   ; SAC 9/18/19 - handle OtherZone same as Zone (MFamProto)
	"Set ResIntWall:ParCndZnAdjUZnArea"		ResIntWall:ParCndZnAdjUZnArea	=        ; rev for OtherZone garages - SAC 11/29/20
	{	if (Area < 0.1) then  0
		else if (ParentComponentType() == "ResZn")
		then	if (Parent( Type ) == 1 .AND. LocalCompAssigned( Outside ) == ComponentType( "ResGarage" ))
				then  Area
            else if (Parent( Type ) == 1 .AND. (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
                                                LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" )))
            then  if (IfValidAnd( Outside:Type >= 10 ))
                  then  Area
                  else  0  endif
				else  0  endif endif
		else  0  endif endif  }
	"Set ResIntWall:ParCndOZnAdjUZnArea"		ResIntWall:ParCndOZnAdjUZnArea	=        ; for OtherZone garages - SAC 11/29/20
	{	if (Area < 0.1 .OR. ParCndZnAdjUZnArea > 0) then  0
		else if (ParentComponentType() == "ResOtherZn")
		then	if (Parent( Type ) == 1 .AND. LocalCompAssigned( Outside ) == ComponentType( "ResGarage" ))
				then  Area
            else if (Parent( Type ) == 1 .AND. (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
                                                LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" )))
            then  if (IfValidAnd( Outside:Type >= 10 ))
                  then  Area
                  else  0  endif
				else  0  endif endif
		else  0  endif endif  }

	"Set ResIntWall:ParUZnAdjCndZnArea"		ResIntWall:ParUZnAdjCndZnArea	=     ; rev for OtherZone garages - SAC 11/29/20
	{	if (Area < 0.1) then  0
		else if (ParentComponentType() == "ResGarage")
		then	if (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ))
				then	if (Outside:Type < 10)		; => Type = conditioned, sleeping or living (NOT unconditioned)
						then  Area
						else  0  endif
				else  0  endif
		else if (ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn")
		then	if (Parent( Type ) >= 10 .AND.
                LocalCompAssigned( Outside ) == ComponentType( "ResZn" ))
				then	if (Outside:Type < 10)		; => Type = conditioned, sleeping or living (NOT unconditioned)
						then  Area
						else  0  endif
				else  0  endif
		else  0  endif endif endif  }
	"Set ResIntWall:ParUZnAdjCndOZnArea"		ResIntWall:ParUZnAdjCndOZnArea	=     ; for OtherZone garages - SAC 11/30/20
	{	if (Area < 0.1 .OR. ParUZnAdjCndZnArea > 0) then  0
		else if (ParentComponentType() == "ResGarage")
		then	if (LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
				then	if (Outside:Type < 10)		; => Type = conditioned, sleeping or living (NOT unconditioned)
						then  Area
						else  0  endif
				else  0  endif
		else if (ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn")
		then	if (Parent( Type ) >= 10 .AND.
                LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
				then	if (Outside:Type < 10)		; => Type = conditioned, sleeping or living (NOT unconditioned)
						then  Area
						else  0  endif
				else  0  endif
		else  0  endif endif endif  }

; SAC 9/10/13 - added logic to ensure that walls between Cond Zones & Attic are properly designated as demising
	"Set ResIntWall:IsDemising"		ResIntWall:IsDemising	= {
		if (LocalCompAssigned( Outside ) == 0) then  0
		else if (ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn")
		then	if (	LocalCompAssigned( Outside ) == ComponentType( "ResGarage" ) .AND.
						Parent( Type ) < 10 ) then  1
				else if (LocalCompAssigned( Outside ) == ComponentType( "ResAttic" ))
				then	if (	(Parent( Type ) < 10 .AND. Outside:Type != 1 ) .OR.       ; conditioned zone / ventilated attic
								(Parent( Type ) > 9  .AND. Outside:Type == 1) ) then  1   ; unconditioned zone / conditioned attic
						else  0  endif
				else if (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
				         LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
				then	if (	(Parent( Type ) < 10 .AND. Outside:Type > 9 ) .OR.
								(Parent( Type ) > 9  .AND. Outside:Type < 10) ) then  1
						else  0  endif
				else  0  endif endif endif
		else if (ParentComponentType() == "ResGarage")
		then	if (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
		          LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
				then	if (Outside:Type < 10 ) then  1
						else  0  endif
				else  0  endif
		else if (ParentComponentType() == "ResAttic")
		then	if (	LocalCompAssigned( Outside ) == ComponentType( "ResGarage" ) .AND.  ; conditioned attic / garage
						Parent( Type ) == 1 ) then  1
				else if (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
		               LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
				then	if (	(Parent( Type ) != 1 .AND. Outside:Type < 10) .OR.         ; ventilated attic / conditioned zone
								(Parent( Type ) == 1 .AND. Outside:Type > 9 ) ) then  1    ; conditioned attic / unconditioned zone
						else  0  endif
				else if (LocalCompAssigned( Outside ) == ComponentType( "ResAttic" ))
				then	if (	(Parent( Type ) != 1 .AND. Outside:Type == 1) .OR.         ; ventilated attic / conditioned attic
								(Parent( Type ) == 1 .AND. Outside:Type != 1) ) then  1    ; conditioned attic / ventilated attic
						else  0  endif
				else  0  endif endif endif
		else  0  endif endif endif endif  }
	"Set ResIntWall:DemisingArea"		ResIntWall:DemisingArea	= {
		if (IsDemising < 0.5) then  0  else  Area  endif  }		; SAC 9/10/13


   ;--------------------------------------------------------------------
   ; ProposedInput: UndWall Rules
   ;--------------------------------------------------------------------
		;	UndWall:DepthBelowGrade    BEMP_Flt,  "Depth of bottom of wall below grade" 
		;  UndWall:Area               BEMP_Flt,  1, "ft2",  - no default
		;	UndWall:Orientation        BEMP_Sym,  - defaulted vis Symbol definitions
		;	UndWall:OrientationValue
		;	UndWall:Tilt


   ;--------------------------------------------------------------------
   ; ProposedInput: CathedralCeiling Rules
   ;--------------------------------------------------------------------
    ;       CathedralCeiling:Area,              BEMP_Flt,  1, "ft2",              0, "",         0, "",             6010, "Ceiling area" 
    ;       CathedralCeiling:Construction,      BEMP_Obj,  1, "",                 0, "Cons",     2, "CanAssignTo",  6012, "Construction assembly" 
	"Default CathedralCeiling:RoofRise"		CathedralCeiling:RoofRise	= {	5 }
	"Set CathedralCeiling:RoofPitch"		CathedralCeiling:RoofPitch	= {	RoofRise / 12  }
	"Set CathedralCeiling:RoofTilt"			CathedralCeiling:RoofTilt	= {	if (RoofPitch == 0) then  0
																			else  atan( RoofPitch ) * 180 / 3.14159265  endif  }
	"Set CathedralCeiling:SteepSlope"		CathedralCeiling:SteepSlope	=     ; fix logic to set Steep to 1 if RoofRise EQUAL 2:12 (previsouly only if it was > 2:12) - SAC 06/30/23 (tic #3479)
		{  if (RoofRise >= 2) then  1  else  0  endif  }

	; SAC 9/23/15 - properties used to setup 2016 standard design roof constructions based on roof pitch
	"Set CathedralCeiling:SteepRoofArea"	CathedralCeiling:SteepRoofArea	= {
		if (IfValidAnd( Area > 0.1 ) .AND. IfValidAnd( SteepSlope > 0.5 )) then  Area  else  0  endif  }
	"Set CathedralCeiling:FlatRoofArea"		CathedralCeiling:FlatRoofArea		= {
		if (IfValidAnd( Area > 0.1 ) .AND. IfValidAnd( SteepSlope < 0.5 )) then  Area  else  0  endif  }

			;  CathedralCeiling:Orientation,       BEMP_Sym,  - defaulted vis Symbol definitions
	"Default CathedralCeiling:OrientationValue"
		CathedralCeiling:OrientationValue 	= {	switch (Local( Orientation ))
														case  2 :   90  ; "Left"
														case  3 :  270  ; "Right"
														case  4 :  180  ; "Back"
														default :    0  ; Front or -specify-
													endswitch  }

  ; SAC 1/11/13 - revised RoofSolReflect defaulting
	"Default CathedralCeiling:RoofSolReflect"		CathedralCeiling:RoofSolReflect	= {	0.1  }
	"Default CathedralCeiling:RoofEmiss"			CathedralCeiling:RoofEmiss			= {	0.85  }

   "Set CathedralCeiling:ParentIsCond (needed for any parent of ResWin or ResSkylt)"   CathedralCeiling:ParentIsCond  =       ; SAC 5/19/20 (tic #1221)
      {  if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  0
         else if (Parent( Type ) < 10) then  1  else  0  endif endif  }

	; SAC 2/20/15 - for EAA addition window areas
	"Set CathedralCeiling:IsEAAAddZoneChild"	CathedralCeiling:IsEAAAddZoneChild	= {	Parent( IsEAAAdditionZone )  }	; parent could be Zone or Garage


   ;--------------------------------------------------------------------
   ; ProposedInput: InteriorCeiling Rules
   ;--------------------------------------------------------------------
    ;       InteriorCeiling:Area,                BEMP_Flt,  1, "ft2",              0, "",         0, "",             6010, "Ceiling area" 
    ;       InteriorCeiling:Construction,        BEMP_Obj,  1, "",                 0, "Cons",     6, "CanAssignTo",  6012, "Construction assembly" 

	; SAC 4/28/15 - address backward compatibility for OutsideDiffUnit property - take its value and set corresponding properties for its replacement, then flag this property as undefined
	"Backward compat for InteriorCeiling:OutsideDiffUnit"	InteriorCeiling:Action	= {
		if (LocalStatus( OutsideDiffUnit ) < 5) then  UNCHANGED		; do nothing if user did NOT define this property
		else	EvalRulelist( "BackwardCompat_InteriorCeiling_OutsideDiffUnit", 1 )  endif  }
   ;	EM 4/9/15 
    "Default InteriorCeiling:IsPartySurface"		InteriorCeiling:IsPartySurface	= {	0  }
	"Default InteriorCeiling:OtherSideModeled"	InteriorCeiling:OtherSideModeled	= {
		if (ResProj:IsMultiFamily > 0.5) then  1  else  0  endif  }		; prevent selection of OtherSideModeled for SFam models
	"Set InteriorCeiling:PartyEdgeArea"				InteriorCeiling:PartyEdgeArea		= {
		if (IsPartySurface > 0.5) then  Area  else  0  endif  }

	"Default InteriorCeiling:Outside"		   InteriorCeiling:Outside =     ; removed ResIntFlr:Outside default for multi-floor CBECC (MFam) models - SAC 10/13/22
      {	if (Proj:IsComRuleset .AND. IfValidAnd( Bldg:TotStoryCnt > 1 )) then  UNDEFINED
         else  Parent( Name )  endif  }

   ; SAC 9/18/19 - handle OtherZone same as Zone (MFamProto)
	"Set InteriorCeiling:ParUZnAdjCndZnArea"	InteriorCeiling:ParUZnAdjCndZnArea	=     ; rev for OtherZone garages - SAC 11/29/20
	{	if (Area < 0.1) then  0
		else if (ParentComponentType() == "ResGarage")
		then	if (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ))
				then	if (Outside:Type < 10)		; => Type = conditioned, sleeping or living (NOT unconditioned)
						then  Area
						else  0  endif
				else  0  endif
		else if (ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn")
		then	if (Parent( Type ) >= 10 .AND.
                LocalCompAssigned( Outside ) == ComponentType( "ResZn" ))
				then	if (Outside:Type < 10)		; => Type = conditioned, sleeping or living (NOT unconditioned)
						then  Area
						else  0  endif
				else  0  endif
		else  0  endif endif endif  }
	"Set InteriorCeiling:ParUZnAdjCndOZnArea"	InteriorCeiling:ParUZnAdjCndOZnArea	=     ; for OtherZone garages - SAC 11/30/20
	{	if (Area < 0.1 .OR. ParUZnAdjCndZnArea > 0) then  0
		else if (ParentComponentType() == "ResGarage")
		then	if (LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
				then	if (Outside:Type < 10)		; => Type = conditioned, sleeping or living (NOT unconditioned)
						then  Area
						else  0  endif
				else  0  endif
		else if (ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn")
		then	if (Parent( Type ) >= 10 .AND.
                LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
				then	if (Outside:Type < 10)		; => Type = conditioned, sleeping or living (NOT unconditioned)
						then  Area
						else  0  endif
				else  0  endif
		else  0  endif endif endif  }

; SAC 11/21/14 - added logic to ensure that ceilings between Cond Zones & Attic are properly designated as demising
	"Set InteriorCeiling:IsDemising"		InteriorCeiling:IsDemising	= {
								if (LocalCompAssigned( Outside ) == 0) then  0
								else if (ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn")
								then	if (	LocalCompAssigned( Outside ) == ComponentType( "ResGarage" ) .AND.
												Parent( Type ) < 10 ) then  1
										else if (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
										         LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
										then	if (	(Parent( Type ) < 10 .AND. Outside:Type > 9 ) .OR.
														(Parent( Type ) > 9  .AND. Outside:Type < 10) ) then  1
												else  0  endif
										else  0  endif endif
								else if (ParentComponentType() == "ResGarage")
								then	if (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
								          LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
										then	if (Outside:Type < 10 ) then  1
												else  0  endif
										else  0  endif
								else  0  endif endif endif  }
	"Set InteriorCeiling:DemisingArea"		InteriorCeiling:DemisingArea	= {
		if (IsDemising < 0.5) then  0  else  Area  endif  }


   ;--------------------------------------------------------------------
   ; ProposedInput: SlabFloor Rules
   ;--------------------------------------------------------------------
    ;       SlabFloor:Area                BEMP_Flt,  1, "ft2",              0, "",         0, "",             6010, "Floor area" 
    ;       SlabFloor:Perimeter           BEMP_Flt,  1, "ft",               0, "",         0, "",             6012, "Length of the slab perimeter measured at the outside of the plan edge" 

	"Default SlabFloor:Surface"				SlabFloor:Surface				=     ; revised to default to Exposed when parent is Uncond OtherZone - SAC 7/23/20 (MFamProto)
	{	if (ParentComponentType() == "ResGarage") then  2   ; Exposed
		else if (ParentComponentType() == "ResOtherZn")
		then  if (Parent( Type ) >= 10)
		      then  2     ; parent OtherZone Unconditioned => Exposed
		      else  0  endif
		else  0  endif endif  }		; "Default (80% carpeted/covered, 20% exposed)"

; SAC 10/23/14 - moved here from CSE sim prep rulelist to be accessible for Proposed reporting
   "Set SlabFloor:CarpetedFrac"			SlabFloor:CarpetedFrac	= {
   	switch ( Surface )
			case  1 :	1.0    ; "Carpeted"                                    
			case  2 :	0.0    ; "Exposed"                                     
			default :	0.8	 ; "Default (80% carpeted/covered, 20% exposed)" 
		endswitch  }

  ; SAC 6/6/13 - added HeatedSlab property (default to 0) and ALSO modified the EdgeInsulation default to be whatever HeatedSlab is set to
	"Default SlabFloor:HeatedSlab"			SlabFloor:HeatedSlab			= {	0  }
	"Default SlabFloor:EdgeInsulation"		SlabFloor:EdgeInsulation	= {	HeatedSlab  }	; was: 0  }
;	"Default SlabFloor:EdgeInsulRValue"		SlabFloor:EdgeInsulRValue  = {	0  }
;	"Default SlabFloor:EdgeInsulDepth"		SlabFloor:EdgeInsulDepth 	= {   0  }

	; SAC 1/8/13 - added defaulting of EdgeInsulOption based on user-defined EdgeInsulRValue and/or EdgeInsulDepth
	"Default SlabFloor:EdgeInsulOption"		SlabFloor:EdgeInsulOption	= {
		if (LocalStatus( EdgeInsulDepth ) < 7 .AND. LocalStatus( EdgeInsulRValue ) < 7)
		then	if (HeatedSlab > 0.5) then		5016     		; Std selection for heat slab is "R-5, 16 inches" - per GC issue #98
				else									5008  endif		; most generic default of "R-5, 8 inches"
		else if (LocalStatus( EdgeInsulDepth ) == 7 .AND. LocalStatus( EdgeInsulRValue ) == 7)
		then	if (EdgeInsulDepth >= 48)
				then	if (     EdgeInsulRValue >= 20) then  20048	; "R-20, 4 feet"
						else if (EdgeInsulRValue >= 15) then  15048	; "R-15, 4 feet"
						else if (EdgeInsulRValue >= 10) then  10048	; "R-10, 4 feet"
						else if (EdgeInsulRValue >=  7) then   7048	; "R-7, 4 feet" 
						else                                   5048	; "R-5, 4 feet" 
						endif endif endif endif 
				else if (EdgeInsulDepth >= 24)
				then	if (     EdgeInsulRValue >= 10) then  10024	; "R-10, 2 feet"
						else if (EdgeInsulRValue >=  7) then   7024	; "R-7, 2 feet" 
						else                                   5024	; "R-5, 2 feet" 
						endif endif 
				else if (EdgeInsulDepth >= 16)
				then	if (     EdgeInsulRValue >= 10) then  10016	; "R-10, 16 inches"
						else if (EdgeInsulRValue >=  7) then   7016	; "R-7, 16 inches" 
						else                                   5016	; "R-5, 16 inches" 
						endif endif 
				else	if (     EdgeInsulRValue >= 10) then  10008	; "R-10, 8 inches"
						else if (EdgeInsulRValue >=  7) then   7008	; "R-7, 8 inches" 
						else                                   5008	; "R-5, 8 inches" 
						endif endif
				endif endif endif
		else if (LocalStatus( EdgeInsulDepth ) == 7)
		then	if (     EdgeInsulDepth >= 48) then			 5048		; "R-5, 4 feet" 
				else if (EdgeInsulDepth >= 24) then			 5024		; "R-5, 2 feet" 
				else if (EdgeInsulDepth >= 16) then			 5016		; "R-5, 16 inches" 
				else													 5008		; "R-5, 8 inches" 
				endif endif endif
		else if (LocalStatus( EdgeInsulRValue ) == 7)
		then	if (     EdgeInsulRValue >= 20) then		20048		; "R-20, 4 feet"
				else if (EdgeInsulRValue >= 15) then		15048		; "R-15, 4 feet"
				else if (EdgeInsulRValue >= 10) then		10008 	; "R-10, 8 inches"
				else if (EdgeInsulRValue >=  7) then		 7008 	; "R-7, 8 inches" 
				else                                		 5008 	; "R-5, 8 inches" 
				endif endif endif endif
		else  5008      ; most generic default of "R-5, 8 inches"
		endif endif endif endif  }

	"Set SlabFloor:HasEdgeInsul"		SlabFloor:HasEdgeInsul	= {
		if (EdgeInsulation > 0.1 .AND. EdgeInsulOption > 0) then  1  else  0  endif  }	; SAC 6/2/16 - tic #678

  ; SAC 6/7/13 - default EdgeInsulRValue & EdgeInsulDepth based on EdgeInsulation & EdgeInsulOption selections to facilitate HeatedSlab checks
	"Default SlabFloor:EdgeInsulDepth"		SlabFloor:EdgeInsulDepth	= {
		if (EdgeInsulation < 0.5) then  0
		else if (EdgeInsulOption > 0) then  mod( Local( EdgeInsulOption ), 1000 )
		else  0   ; ???
		endif endif  }
	"Default SlabFloor:EdgeInsulRValue"		SlabFloor:EdgeInsulRValue	= {
		if (EdgeInsulation < 0.5 .OR. EdgeInsulDepth < 0.1) then  0
		else if (EdgeInsulOption > 0) then  (EdgeInsulOption - EdgeInsulDepth) / 1000
		else  0   ; ???
		endif endif  }

   ; SAC 12/19/18 - minor rev to avoid eval errors if Area undefined (temporarily, within UI)
   "Set SlabFloor:CarpetedArea"      SlabFloor:CarpetedArea   = {
      switch (Surface)
         case  0 :   ValidOr( Area, 0 ) * 0.8   ; "Default (80% carpeted/covered, 20% exposed)"
         case  1 :   ValidOr( Area, 0 )         ; "Carpeted"
         case  2 :   0                          ; "Exposed"
         default :   0
      endswitch  }
   "Set SlabFloor:ExposedArea"      SlabFloor:ExposedArea   = {
      switch (Surface)
         case  0 :   ValidOr( Area, 0 ) * 0.2   ; "Default (80% carpeted/covered, 20% exposed)"
         case  1 :   0                          ; "Carpeted"
         case  2 :   ValidOr( Area, 0 )         ; "Exposed"
         default :   0
      endswitch  }
	"Set SlabFloor:CondZnExposedArea"	SlabFloor:CondZnExposedArea	= {
		if (ParentComponentType() != "ResZn") then  0
		else if (Parent( Type ) < 10) then  ExposedArea
		else  0  endif endif  }
	"Set SlabFloor:CondZnArea"				SlabFloor:CondZnArea				= {
		if (ParentComponentType() != "ResZn") then  0
		else if (Parent( Type ) < 10) then  Area
		else  0  endif endif  }


   ;--------------------------------------------------------------------
   ; ProposedInput: ResExtFlr Rules
   ;--------------------------------------------------------------------
    ;       ResExtFlr:Type                BEMP_Sym,  1, "",                 0, "",         0, "",             6012, "Exterior floor type" 
    ;       ResExtFlr:Area                BEMP_Flt,  1, "ft2",              0, "",         0, "",             6010, "Floor area" 
    ;       ResExtFlr:FloorZ              BEMP_Flt,  1, "ft",               0,  0,                        6010, "Floor elevation (Z)"    ; SAC 1/26/13 - added reference to FloorZ
    ;       ResExtFlr:Construction        BEMP_Obj,  1, "",                 0, "Cons",     4, "CanAssignTo",  6012, "Construction assembly" 

	"Set ResExtFlr:MinFloorZ"					ResExtFlr:MinFloorZ	= {
		if (ParentComponentType() == "ResZn") then  Parent( Bottom )  else  0  endif  }

;	"Set ResExtFlr:AreaAboveExterior"		ResExtFlr:AreaAboveExterior	= {	if (LocalCompAssigned( Construction ) == 0) then  0
;																												else if (LocalRef( Construction:FlrExtConditions ) == 0) then  Local( Area )	; "Exterior"
;																												else  0   endif endif  }
;	"Set ResExtFlr:AreaAboveCrawl"			ResExtFlr:AreaAboveCrawl		= {	if (LocalCompAssigned( Construction ) == 0) then  0
;																												else if (LocalRef( Construction:FlrExtConditions ) == 1) then  Local( Area )	; "Conventional Crawl Space"
;																												else  0   endif endif  }


   ;--------------------------------------------------------------------
   ; ProposedInput: FloorOverCrawl Rules
   ;--------------------------------------------------------------------
    ;       FloorOverCrawl:Area                BEMP_Flt,  1, "ft2",              0, "",         0, "",             6010, "Floor area" 
    ;       FloorOverCrawl:FloorZ              BEMP_Flt,  1, "ft",               0,  0,                        6010, "Floor elevation (Z)"    ; SAC 1/26/13 - added reference to FloorZ
    ;       FloorOverCrawl:Construction        BEMP_Obj,  1, "",                 0, "Cons",     4, "CanAssignTo",  6012, "Construction assembly" 

	"Set FloorOverCrawl:MinFloorZ"					FloorOverCrawl:MinFloorZ	= {
		if (ParentComponentType() == "ResZn") then  Parent( Bottom )  else  0  endif  }


   ;--------------------------------------------------------------------
   ; ProposedInput: ResIntFlr Rules
   ;--------------------------------------------------------------------
    ;       ResIntFlr:Area                BEMP_Flt,  1, "ft2",              0, "",         0, "",             6010, "Floor area" 
    ;       ResIntFlr:FloorZ              BEMP_Flt,  1, "ft",               0,  0,                        6010, "Floor elevation (Z)"    ; SAC 1/26/13 - added reference to FloorZ
    ;       ResIntFlr:Construction        BEMP_Obj,  1, "",                 0, "Cons",     3, "CanAssignTo",  6012, "Construction assembly" 
    
	; SAC 4/28/15 - address backward compatibility for OutsideDiffUnit property - take its value and set corresponding properties for its replacement, then flag this property as undefined
	"Backward compat for ResIntFlr:OutsideDiffUnit"	ResIntFlr:Action	= {
		if (LocalStatus( OutsideDiffUnit ) < 5) then  UNCHANGED		; do nothing if user did NOT define this property
		else	EvalRulelist( "BackwardCompat_ResIntFlr_OutsideDiffUnit", 1 )  endif  }
     ;	EM 4/9/15 
    "Default ResIntFlr:IsPartySurface"		ResIntFlr:IsPartySurface		= {	0  }
	"Default ResIntFlr:OtherSideModeled"		ResIntFlr:OtherSideModeled	= {
		if (ResProj:IsMultiFamily > 0.5) then  1  else  0  endif  }		; prevent selection of OtherSideModeled for SFam models
	"Set ResIntFlr:PartyEdgeArea"				ResIntFlr:PartyEdgeArea		= {
		if (IsPartySurface > 0.5) then  Area  else  0  endif  }


	"Set ResIntFlr:MinFloorZ"			ResIntFlr:MinFloorZ	= {
		if (ParentComponentType() == "ResZn") then  Parent( Bottom )  else  0  endif  }

	"Default ResIntFlr:Outside"		ResIntFlr:Outside =        ; removed ResIntFlr:Outside default for multi-floor CBECC (MFam) models - SAC 10/13/22
      {	if (Proj:IsComRuleset .AND. IfValidAnd( Bldg:TotStoryCnt > 1 )) then  UNDEFINED
         else  Parent( Name )  endif  }

   ; SAC 9/18/19 - handle OtherZone same as Zone (MFamProto)
	"Set ResIntFlr:ParCndZnAdjUZnArea"		ResIntFlr:ParCndZnAdjUZnArea	=     ; rev for OtherZone garages - SAC 11/29/20
	{	if (Area < 0.1) then  0
		else if (ParentComponentType() == "ResZn")
		then	if (Parent( Type ) == 1 .AND. LocalCompAssigned( Outside ) == ComponentType( "ResGarage" ))
				then  Area
            else if (Parent( Type ) == 1 .AND. (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
                                                LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" )))
            then  if (IfValidAnd( Outside:Type >= 10 ))
                  then  Area
                  else  0  endif
				else  0  endif endif
		else  0  endif endif  }
	"Set ResIntFlr:ParCndOZnAdjUZnArea"		ResIntFlr:ParCndOZnAdjUZnArea	=     ; for OtherZone garages - SAC 11/29/20
	{	if (Area < 0.1 .OR. ParCndZnAdjUZnArea > 0) then  0
		else if (ParentComponentType() == "ResOtherZn")
		then	if (Parent( Type ) == 1 .AND. LocalCompAssigned( Outside ) == ComponentType( "ResGarage" ))
				then  Area
            else if (Parent( Type ) == 1 .AND. (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
                                                LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" )))
            then  if (IfValidAnd( Outside:Type >= 10 ))
                  then  Area
                  else  0  endif
				else  0  endif endif
		else  0  endif endif  }

	"Set ResIntFlr:ParUZnAdjCndZnArea"		ResIntFlr:ParUZnAdjCndZnArea	=     ; restored property + rev for OtherZone garages - SAC 11/29/20
      {	if (Area < 0.1) then  0
			else if (ParentComponentType() == "ResGarage")
			then	if (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ))
					then	if (Outside:Type < 10)		; => Type = conditioned, sleeping or living (NOT unconditioned)
							then  Area
							else  0  endif
					else  0  endif
   		else if (ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn")
   		then	if (Parent( Type ) >= 10 .AND.
                   LocalCompAssigned( Outside ) == ComponentType( "ResZn" ))
   				then	if (Outside:Type < 10)		; => Type = conditioned, sleeping or living (NOT unconditioned)
   						then  Area
   						else  0  endif
   				else  0  endif
			else  0  endif endif endif  }
	"Set ResIntFlr:ParUZnAdjCndOZnArea"		ResIntFlr:ParUZnAdjCndOZnArea	=     ; for OtherZone garages - SAC 11/30/20
      {	if (Area < 0.1 .OR. ParUZnAdjCndZnArea > 0) then  0
			else if (ParentComponentType() == "ResGarage")
			then	if (LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
					then	if (Outside:Type < 10)		; => Type = conditioned, sleeping or living (NOT unconditioned)
							then  Area
							else  0  endif
					else  0  endif
   		else if (ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn")
   		then	if (Parent( Type ) >= 10 .AND.
                   LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
   				then	if (Outside:Type < 10)		; => Type = conditioned, sleeping or living (NOT unconditioned)
   						then  Area
   						else  0  endif
   				else  0  endif
			else  0  endif endif endif  }

	"Set ResIntFlr:IsDemising"		ResIntFlr:IsDemising	= {
									if (LocalCompAssigned( Outside ) == 0) then  0
									else if (ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn")
									then	if (	LocalCompAssigned( Outside ) == ComponentType( "ResGarage" ) .AND.
													Parent( Type ) < 10 ) then  1
											else if (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
											         LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
											then	if (	(Parent( Type ) < 10 .AND. Outside:Type > 9 ) .OR.
															(Parent( Type ) > 9  .AND. Outside:Type < 10) ) then  1
													else  0  endif
											else  0  endif endif
									else if (ParentComponentType() == "ResGarage")
									then	if (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
									          LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" ))
											then	if (Outside:Type < 10 ) then  1
													else  0  endif
											else  0  endif
									else  0  endif endif endif  }
	"Set ResIntFlr:DemisingArea"		ResIntFlr:DemisingArea	= {	if (IsDemising < 0.5) then  0  else  Area  endif  }		; SAC 9/10/13


   ;--------------------------------------------------------------------
   ; ProposedInput: UndFloor Rules
   ;--------------------------------------------------------------------
			;  UndFloor:Area,              BEMP_Flt,  1, "ft2",  - no default

	"Default UndFloor:Surface"				UndFloor:Surface			=     ; revised to default to Exposed when parent is Uncond OtherZone - SAC 7/23/20 (MFamProto)
	{	if (ParentComponentType() == "ResGarage") then  2   ; Exposed
		else if (ParentComponentType() == "ResOtherZn")
		then  if (Parent( Type ) >= 10)
		      then  2     ; parent OtherZone Unconditioned => Exposed
		      else  0  endif
		else  0  endif endif  }		; "Default (80% carpeted/covered, 20% exposed)"

; SAC 10/23/14 - moved here from CSE sim prep rulelist to be accessible for Proposed reporting
   "Set UndFloor:CarpetedFrac"			UndFloor:CarpetedFrac	= {
   	switch ( Surface )
			case  1 :	1.0    ; "Carpeted"                                    
			case  2 :	0.0    ; "Exposed"                                     
			default :	0.8	 ; "Default (80% carpeted/covered, 20% exposed)" 
		endswitch  }

	"Set UndFloor:CarpetedArea"		UndFloor:CarpetedArea		= {
		ValidOr( Area, 0 ) *      ValidOr( CarpetedFrac, 0 )   }
	"Set UndFloor:ExposedArea"			UndFloor:ExposedArea			= {
		ValidOr( Area, 0 ) * (1 - ValidOr( CarpetedFrac, 1 ))  }
	"Set UndFloor:CondZnExposedArea"	UndFloor:CondZnExposedArea	= {
		if (ParentComponentType() != "ResZn") then  0
		else if (Parent( Type ) < 10) then  ExposedArea
		else  0  endif endif  }
	"Set UndFloor:CondZnArea"			UndFloor:CondZnArea			= {
		if (ParentComponentType() != "ResZn") then  0
		else if (Parent( Type ) < 10) then  Area
		else  0  endif endif  }


   ;--------------------------------------------------------------------
   ; ProposedInput: Zone (inter-zone surface area) Rules
   ;--------------------------------------------------------------------
      ; SAC 9/18/19 - handle OtherZone same as Zone (MFamProto)
	"Set ResIntWall:InterCondZnArea"				ResIntWall:InterCondZnArea				= {
		if ((ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn") .AND.
		    (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
		     LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" )))
		then	if (Parent( Type ) < 10 .AND.	Outside:Type < 10 .AND. Parent( Name ) != Outside:Name)
				then  Area  else  0  endif
		else  0  endif  }

	"Set InteriorCeiling:InterCondZnArea"	InteriorCeiling:InterCondZnArea	= {
		if ((ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn") .AND.
		    (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
		     LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" )))
		then	if (Parent( Type ) < 10 .AND. Outside:Type < 10 .AND. Parent( Name ) != Outside:Name)
				then  Area  else  0  endif
		else  0  endif  }

	"Set ResIntFlr:InterCondZnArea"		ResIntFlr:InterCondZnArea		= {
		if ((ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn") .AND.
		    (LocalCompAssigned( Outside ) == ComponentType( "ResZn" ) .OR.
		     LocalCompAssigned( Outside ) == ComponentType( "ResOtherZn" )))
		then	if (Parent( Type ) < 10 .AND. Outside:Type < 10 .AND. Parent( Name ) != Outside:Name)
				then  Area  else  0  endif
		else  0  endif  }

	"Set Zone:InterCondZnArea"		Zone:InterCondZnArea		= {
		if (Type > 9) then  0
		else	SumChildren(         ResIntWall:InterCondZnArea ) +
				SumChildren( InteriorCeiling:InterCondZnArea ) +
				SumChildren(   ResIntFlr:InterCondZnArea ) +
				SumRevRef(         ResIntWall:Outside,         ResIntWall:InterCondZnArea ) +
				SumRevRef( InteriorCeiling:Outside, InteriorCeiling:InterCondZnArea ) +
				SumRevRef(   ResIntFlr:Outside,   ResIntFlr:InterCondZnArea )    endif  }

	"Set Zone:PartyEdgeArea"		Zone:PartyEdgeArea		= {
		SumChildren( ResIntWall:PartyEdgeArea ) + SumChildren( ResIntFlr:PartyEdgeArea ) +
		SumChildren( InteriorCeiling:PartyEdgeArea )}

;   ; SAC 9/20/19 - OtherZone (MFamProto)
;	"Set OtherZone:InterCondZnArea"		OtherZone:InterCondZnArea		= {
;		if (Type > 9) then  0
;		else	SumChildren(         ResIntWall:InterCondZnArea ) +
;				SumChildren( InteriorCeiling:InterCondZnArea ) +
;				SumChildren(   ResIntFlr:InterCondZnArea ) +
;				SumRevRef(         ResIntWall:Outside,         ResIntWall:InterCondZnArea ) +
;				SumRevRef( InteriorCeiling:Outside, InteriorCeiling:InterCondZnArea ) +
;				SumRevRef(   ResIntFlr:Outside,   ResIntFlr:InterCondZnArea )    endif  }

;	"Set OtherZone:PartyEdgeArea"		OtherZone:PartyEdgeArea		= {
;		SumChildren( ResIntWall:PartyEdgeArea ) + SumChildren( ResIntFlr:PartyEdgeArea ) +
;		SumChildren( InteriorCeiling:PartyEdgeArea )}


   ;--------------------------------------------------------------------
   ; ProposedInput: WindowType Rules   - SAC 8/26/13
   ;--------------------------------------------------------------------
	; no default: WindowType:SpecMethod,        Default,   0,    1,   1,    1,  1,  1

	"Default WindowType:Area"		WindowType:Area		= {
		if (SpecMethod == 2) then  UNDEFINED		; no default if SpecMthd = "Overall Window Area"
		else if (LocalStatus( Height ) < 2 .OR. LocalStatus( Width ) < 2) then  UNDEFINED
		else if (Local( Height ) > 0 .AND. Local( Width ) > 0)
		then  Local( Height ) * Local( Width )  else  UNDEFINED  endif endif endif  }

	"Default WindowType:Height"	WindowType:Height	= {
		if (SpecMethod == 1 .OR. LocalStatus( Area ) < 2) then  UNDEFINED		; no default if SpecMthd = "Window Dimensions..."  (or is Area undefined)
		else if (Area > 0) then  sqrt( Area )
		else  UNDEFINED  endif endif  }
	"Default WindowType:Width"		WindowType:Width	= {
		if (LocalStatus( Height ) < 2 .OR. LocalStatus( Area ) < 2) then  UNDEFINED
		else if (Area > 0 .AND. Height > 0) then  Area / Height
		else  UNDEFINED  endif endif  }
; mjb 1/12/15 - mods to use new T24RClimateZoneCodeBase for code level lookups
	"Default WindowType:NFRCUfactor from CTZ-based code requirements"
		WindowType:NFRCUfactor	= {
			if (Global( Proj:CliZnNum ) < 0.5) then  UNDEFINED
			else switch( WinProdType )
			     case 1  : T24RClimateZoneCodeBase:CurtainWallStorefrontUfactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     case 2  : T24RClimateZoneCodeBase:NAFS2017ClassAWUfactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     default : T24RClimateZoneCodeBase:WindowUfactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     endswitch
			endif }
	"Default WindowType:NFRCSHGC from CTZ-based code requirements"
		WindowType:NFRCSHGC		= {
			if (Global( Proj:CliZnNum ) < 0.5) then  UNDEFINED
			else switch( WinProdType )
			     case 1  : T24RClimateZoneCodeBase:CurtainWallStorefrontSHGC( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     case 2  : T24RClimateZoneCodeBase:NAFS2017ClassAWSHGC( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     default : T24RClimateZoneCodeBase:WindowSHGC( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     endswitch
			endif  }
			
	"Default WindowType:NFRCVT from CTZ-based code requirements"
		WindowType:NFRCVT		= {
			if ( Global( Proj:CliZnNum ) < 0.5 ) then  UNDEFINED
			else switch( WinProdType )
			     case 1  : T24RClimateZoneCodeBase:CurtainWallStorefrontSHGC( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     case 2  : T24RClimateZoneCodeBase:NAFS2017ClassAWSHGC( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     default : UNDEFINED
			     endswitch
			endif  }

   "Default ExEDR WindowType properties"   WindowType:Action  = {
         if (IfValidAnd( ResProj:ExEDR_Defaults > 0 ) .AND.
             (LocalStatus( WinPanes ) < 6 .OR. LocalStatus( WinFrameType ) < 6 .OR.
              LocalStatus( NFRCSHGC ) < 6 .OR. LocalStatus( NFRCUfactor  ) < 6))
         then  EvalRulelist( "ExEDRDefault_WindowType_Properties", 1 )
         else  UNCHANGED  endif  }

	;  symbol default:   "ExteriorShade"

	"Default WindowType:ModelFinsOverhang"		WindowType:ModelFinsOverhang	= {
		if (SpecMethod == 1) then  1  else  0  endif  }

	"Set WindowType:FinOverhangMsg"		WindowType:FinOverhangMsg	= {
		if (SpecMethod != 1) then	"Window spec. method must be set to 'Window Dimensions...' to view fin/overhang data"
		else if (LocalStatus( Height ) < 2 .OR. LocalStatus( Width ) < 2) then  "Window Height and Width must be specified to model fins/overhang"
		else if (Height <= 0 .OR. Width <= 0) then  "Window Height and Width must be > 0 in order to model fins/overhang"
		else if (ModelFinsOverhang < 0.5) then  "Window fin/overhang modeling is toggled off on main Window Data tab"
		else  UNDEFINED  endif endif endif endif  }
	"Set WindowType:ShowFinsOverhang"		WindowType:ShowFinsOverhang	= {
		if (LocalStatus( FinOverhangMsg ) > 1) then  0  else  1  endif  }

	"Default WindowType:OverhangDepth"		WindowType:OverhangDepth 	= {	0  }
   "Default WindowType:OverhangDistUp"		WindowType:OverhangDistUp	= {   0  }
   "Default WindowType:OverhangExL"			WindowType:OverhangExL		= {   0  }
   "Default WindowType:OverhangExR"			WindowType:OverhangExR		= {   0  }
   "Default WindowType:OverhangFlap"		WindowType:OverhangFlap		= {   0  }
   "Default WindowType:LeftFinDepth"		WindowType:LeftFinDepth		= {   0  }
   "Default WindowType:LeftFinTopUp"		WindowType:LeftFinTopUp		= {   0  }
   "Default WindowType:LeftFinDistL"		WindowType:LeftFinDistL		= {   0  }
   "Default WindowType:LeftFinBotUp"		WindowType:LeftFinBotUp		= {   0  }
   "Default WindowType:RightFinDepth"		WindowType:RightFinDepth	= {   0  }
   "Default WindowType:RightFinTopUp"		WindowType:RightFinTopUp	= {   0  }
   "Default WindowType:RightFinDistR"		WindowType:RightFinDistR	= {   0  }
   "Default WindowType:RightFinBotUp"		WindowType:RightFinBotUp	= {   0  }


   ;--------------------------------------------------------------------
   ; ProposedInput: ResWin Rules   (Windows entered via UI)
   ;--------------------------------------------------------------------
	"Default ResWin:Multiplier"		ResWin:Multiplier			= {	1  }

	; ResWin:WinType,  - SAC 8/27/13 - added new assignment

	;	ResWin:SpecMethod,  1
	;	             1,    "Window Dimensions (required for fins/overhangs)"
	;	             2,    "Overall Window Area"
	"Default ResWin:SpecMethod"		ResWin:SpecMethod	= {
		if (LocalCompAssigned( WinType )) then  WinType:SpecMethod  else  UNCHANGED  endif  }

	"Set ResWin:DefaultViaWinType"			ResWin:DefaultViaWinType	= {
		if (LocalCompAssigned( WinType ))
		then	if (SpecMethod == WinType:SpecMethod) then  1  else  0  endif
		else  0  endif  }

	"Default ResWin:ModelFinsOverhang"		ResWin:ModelFinsOverhang	= {
		if (DefaultViaWinType) then  WinType:ModelFinsOverhang
		else if (SpecMethod == 1) then  1  else  0  endif endif  }

	"Set ResWin:FinOverhangMsg"		ResWin:FinOverhangMsg	= {
		if (SpecMethod != 1) then	"Window spec. method must be set to 'Window Dimensions...' to view fin/overhang data"
		else if (LocalStatus( Height ) < 2 .OR. LocalStatus( Width ) < 2) then  "Window Height and Width must be specified to model fins/overhang"
		else if (Height <= 0 .OR. Width <= 0) then  "Window Height and Width must be > 0 in order to model fins/overhang"
		else if (ModelFinsOverhang < 0.5) then  "Window fin/overhang modeling is toggled off on main Window Data tab"
		else  UNDEFINED  endif endif endif endif  }
	"Set ResWin:ShowFinsOverhang"		ResWin:ShowFinsOverhang	= {
		if (LocalStatus( FinOverhangMsg ) > 1) then  0  else  1  endif  }

; SAC 1/13/14 - revised ruleset to leave FORCE height/width to be UNDEFINED when ResWin:SpecMethod = "Overall Window Area"
  ; SAC 8/29/13 - first round - just default Height/Width from WinType for SpecMethod = dimensions...
	"Default ResWin:Width"		ResWin:Width	= {
		if (DefaultViaWinType)
		then	if (SpecMethod == 1 .AND. LocalStatus( WinType:Width ) > 0) then  WinType:Width
				else  UNCHANGED  endif
		else  UNCHANGED  endif  }
	"Default ResWin:Height"		ResWin:Height	= {
		if (DefaultViaWinType)
		then	if (SpecMethod == 1 .AND. LocalStatus( WinType:Height ) > 0) then  WinType:Height
				else  UNCHANGED  endif
		else  UNCHANGED  endif  }

	"Force ResWin Area to UNDEFFINED when SpecMethod = 'Window Dimensions (...'"		ResWin:Action = {			; SAC 1/13/14
		if (SpecMethod == 1 .AND. LocalStatus( Area ) > 4)
		then  EvalRulelist( "ForceResWinAreaToUndefined", 1 )  else  UNCHANGED  endif  }

	"Default ResWin:Area"		ResWin:Area		= {
		if (SpecMethod == 1)
		then	if (LocalStatus( Height ) < 2 .OR. LocalStatus( Width ) < 2) then  UNDEFINED
				else	Local( Height ) * Local( Width )  endif
		else if (DefaultViaWinType) then  WinType:Area
		else	UNDEFINED		; no default if SpecMthd = "Overall Window Area"
		endif endif  }

;	"Default ResWin:Width"		ResWin:Width	= {	if (SpecMethod == 2)
;															then	if (LocalStatus( Area ) < 2) then  UNDEFINED
;																	else  sqrt( (Area * Multiplier) )  endif
	"Default ResWin:Width"		ResWin:Width	= {
		if (SpecMethod == 2) then  UNDEFINED
		else if (DefaultViaWinType) then  UNCHANGED   ; covered above
		else  UNDEFINED				; no default if SpecMthd = "Window Dimensions..."  (or is Area undefined)
		endif endif  }
;	"Default ResWin:Height"		ResWin:Height	= {	if (SpecMethod == 2)
;															then	if (LocalStatus( Area ) > 1 .AND. LocalStatus( Width ) > 1)
;																	then  if (Area > 0 .AND. Width > 0) then  (Area * Multiplier) / Width
;																			else  UNDEFINED  endif
;																	else if (LocalStatus( Area ) > 1) then  sqrt( (Area * Multiplier) )
;																	else  UNDEFINED  endif endif
	"Default ResWin:Height"		ResWin:Height	= {
		if (SpecMethod == 2) then  UNDEFINED
		else if (DefaultViaWinType) then  UNCHANGED   ; covered above
		else  UNDEFINED				; no default if SpecMthd = "Window Dimensions..."  (or is Area undefined)
		endif endif  }
	"Overwrite ResWin Height/Width/Multiplier when SpecMethod = 'Overall Window Area'"		ResWin:Action = {			; SAC 1/13/14
				if ( SpecMethod == 2 .AND. 
           ( LocalStatus( Width ) > 0 .OR. 
             LocalStatus( Height ) > 0 .OR.
             LocalStatus( Multiplier ) > 0 ) ) 
        then  EvalRulelist( "OverwriteResWinWidthHeightMultiplier", 1 )  else  UNCHANGED  endif  }

  "Default ResWin:WinProdType" ResWin:WinProdType = {
    if( LocalCompAssigned( WinType ) ) then WinType:WinProdType
    else 3 endif }

; mjb 1/12/15 - mods to use new T24RClimateZoneCodeBase for code level lookups
	"Default ResWin:NFRCUfactor from CTZ-based code requirements"
		ResWin:NFRCUfactor	= {
			if (LocalCompAssigned( WinType )) then  WinType:NFRCUfactor
			else if (Global( Proj:CliZnNum ) < 0.5) then  UNDEFINED
			else switch( WinProdType )
			     case 1  : T24RClimateZoneCodeBase:CurtainWallStorefrontUfactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     case 2  : T24RClimateZoneCodeBase:NAFS2017ClassAWUfactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     default : T24RClimateZoneCodeBase:WindowUfactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     endswitch
			endif endif  }
	"Default ResWin:NFRCSHGC from CTZ-based code requirements"
		ResWin:NFRCSHGC		= {
			if (LocalCompAssigned( WinType )) then  WinType:NFRCSHGC
			else if (Global( Proj:CliZnNum ) < 0.5) then  UNDEFINED
			else switch( WinProdType )
			     case 1  : T24RClimateZoneCodeBase:CurtainWallStorefrontSHGC( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     case 2  : T24RClimateZoneCodeBase:NAFS2017ClassAWSHGC( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     default : T24RClimateZoneCodeBase:WindowSHGC( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     endswitch
			endif endif }
	"Default ResWin:NFRCVT from CTZ-based code requirements"
		ResWin:NFRCVT		= {
		  if (LocalCompAssigned( WinType )) then  WinType:NFRCVT
			else if ( Global( Proj:CliZnNum ) < 0.5 ) then  UNDEFINED
			else switch( WinProdType )
			     case 1  : T24RClimateZoneCodeBase:CurtainWallStorefrontSHGC( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     case 2  : T24RClimateZoneCodeBase:NAFS2017ClassAWSHGC( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
			     default : UNDEFINED
			     endswitch
			endif endif }

   "Default ExEDR ResWin:NFRC* properties"   ResWin:Action  = {
         if (IfValidAnd( ResProj:ExEDR_Defaults > 0 ) .AND. LocalCompAssigned( WinType ) < 1 .AND.
             (LocalStatus( NFRCUfactor ) < 6 .OR. LocalStatus( NFRCSHGC ) < 6))
         then  EvalRulelist( "ExEDRDefault_ResWin_NFRCProperties", 1 )
         else  UNCHANGED  endif  }

			;            "ExteriorShade",     BEMP_Sym,  - symbol defaulted

	; SAC 2/20/15 - for EAA addition window areas
	"Set ResWin:IsEAAAddZoneGChild"	ResWin:IsEAAAddZoneGChild	= {	Parent( ResExtWall:IsEAAAddZoneChild )  }

; SAC 12/3/13 - revise rules to handle scaling of all window areas
; SAC 2/20/15 - modified to REMOVE E+A+A Additions window/skylight area from New (item 2) and added separate Additions array element
	"Set ResWin:TotAreaInclMult[1] - total"					ResWin:TotAreaInclMult[1]	= {
		ValidOr( Area, 0 ) * Multiplier  }
	"Set ResWin:TotAreaInclMult[3] - existing"				ResWin:TotAreaInclMult[3]	= {
		if (ResProj:RunScope == 2 .AND. Status == 1) then  TotAreaInclMult[1]  else  0  endif  }
	"Set ResWin:TotAreaInclMult[2] - new/alt (not add)"	ResWin:TotAreaInclMult[2]	= {
		if (IsEAAAddZoneGChild == 0) then  TotAreaInclMult[1] - TotAreaInclMult[3]  else  0  endif  }
	"Set ResWin:TotAreaInclMult[4] - additions"				ResWin:TotAreaInclMult[4]	= {
		if (IsEAAAddZoneGChild) then  TotAreaInclMult[1]  else  0  endif  }

	; for AirNet...
	"Default ResWin:VentArea"			ResWin:VentArea			= {
		TotAreaInclMult[1] * 0.1  }   ; SAC 8/28/12 - was Area * ...

	; CSE window shade stuff
	"Default ResWin:OverhangDepth"	ResWin:OverhangDepth 	= {	                                      if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:OverhangDepth   else  0  endif  }
   "Default ResWin:OverhangDistUp"	ResWin:OverhangDistUp	= {   if (OverhangDepth <= 0) then  0  else if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:OverhangDistUp  else  0  endif endif  }
   "Default ResWin:OverhangExL"		ResWin:OverhangExL		= {   if (OverhangDepth <= 0) then  0  else if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:OverhangExL     else  0  endif endif  }
   "Default ResWin:OverhangExR"		ResWin:OverhangExR		= {   if (OverhangDepth <= 0) then  0  else if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:OverhangExR     else  0  endif endif  }
   "Default ResWin:OverhangFlap"		ResWin:OverhangFlap		= {   if (OverhangDepth <= 0) then  0  else if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:OverhangFlap    else  0  endif endif  }
   "Default ResWin:LeftFinDepth"		ResWin:LeftFinDepth		= {                                         if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:LeftFinDepth    else  0  endif  }
   "Default ResWin:LeftFinTopUp"		ResWin:LeftFinTopUp		= {   if (LeftFinDepth  <= 0) then  0  else if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:LeftFinTopUp    else  0  endif endif  }
   "Default ResWin:LeftFinDistL"		ResWin:LeftFinDistL		= {   if (LeftFinDepth  <= 0) then  0  else if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:LeftFinDistL    else  0  endif endif  }
   "Default ResWin:LeftFinBotUp"		ResWin:LeftFinBotUp		= {   if (LeftFinDepth  <= 0) then  0  else if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:LeftFinBotUp    else  0  endif endif  }
   "Default ResWin:RightFinDepth"	ResWin:RightFinDepth		= {                                         if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:RightFinDepth   else  0  endif  }
   "Default ResWin:RightFinTopUp"	ResWin:RightFinTopUp		= {   if (RightFinDepth <= 0) then  0  else if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:RightFinTopUp   else  0  endif endif  }
   "Default ResWin:RightFinDistR"	ResWin:RightFinDistR		= {   if (RightFinDepth <= 0) then  0  else if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:RightFinDistR   else  0  endif endif  }
   "Default ResWin:RightFinBotUp"	ResWin:RightFinBotUp		= {   if (RightFinDepth <= 0) then  0  else if (DefaultViaWinType .AND. WinType:ModelFinsOverhang == ModelFinsOverhang) then  WinType:RightFinBotUp   else  0  endif endif  }

;	mjb	default existing window properties	9/17/13
; LDH 7/20/2016  Update existing window property rules to update/reset when toggling between ResWin:SpecMthd = 0 or 1
	"Default existing Height"		ResWin:exHeight = {          ; LDH 7/20/2016 
    if ( SpecMethod == 1 .AND. LocalStatus( Height ) > 0 )
    then Height
    else UNDEFINED
    endif }
		  
	"Default existing Width"		ResWin:exWidth = {          ; LDH 7/20/2016 
    if ( SpecMethod == 1 .AND. LocalStatus( Width ) > 0 )
    then Width
    else UNDEFINED
    endif }

	"Force ResWin exArea to UNDEFINED when SpecMethod = 'Window Dimensions (...'"		ResWin:Action = {          ; LDH 7/20/2016  
		if (SpecMethod == 1 .AND. LocalStatus( exArea ) > 4) 
    then  EvalRulelist( "ForceResWinExAreaToUndefined", 1 ) 
    else UNCHANGED 
    endif  }

	"Default ResWin:exArea"   ResWin:exArea = {          ; LDH 7/20/2016 	
    if (SpecMethod == 1)
	  then if ( LocalStatus( exHeight ) >= 2 .OR. LocalStatus( exWidth ) >= 2 ) 
      then  exHeight * exWidth
		  else	if ( LocalStatus( Height ) >= 2 .OR. LocalStatus( Width ) >= 2 ) 
      then  Height * Width 
      else UNDEFINED
      endif endif
		else if ( LocalStatus( Area ) >= 2 )
    then Area
		else	UNDEFINED		; no default if SpecMthd = "Overall Window Area"
		endif endif  }

	"Overwrite ResWin exHeight/exWidth/exMultiplier when SpecMethod = 'Overall Window Area'"		ResWin:Action = {          ; LDH 7/20/2016 			
    if (SpecMethod == 2 .AND. 
       (LocalStatus( exWidth ) > 0 .OR. 
        LocalStatus( exHeight ) > 0 .OR.
        LocalStatus( exMultiplier ) > 0 ) ) 
    then  EvalRulelist( "OverwriteExistingResWinWidthHeightMultiplier", 1 )  
    else  UNCHANGED
    endif  }


   ; SAC 1/13/14 - revised rules to ensure height/width valid before referencing those values to define the ex* properties
	"Default existing Multiplier" 		ResWin:exMultiplier     = { ResWin:Multiplier }
	"Default existing NFRCUfactor"   	ResWin:exNFRCUfactor    = { ResWin:NFRCUfactor }
	"Default existing NFRCSHGC"		   ResWin:exNFRCSHGC       = { ResWin:NFRCSHGC }
	"Default existing ExteriorShade" 	ResWin:exExteriorShade  = { ResWin:ExteriorShade }
	"Default existing OverhangDepth"	   ResWin:exOverhangDepth  = { ResWin:OverhangDepth }
	"Default existing OverhangDistUp"	ResWin:exOverhangDistUp = { ResWin:OverhangDistUp }
	"Default existing OverhangExL"		ResWin:exOverhangExL    = { ResWin:OverhangExL }
	"Default existing OverhangExR"		ResWin:exOverhangExR    = { ResWin:OverhangExR }
	"Default existing OverhangFlap"  	ResWin:exOverhangFlap   = { ResWin:OverhangFlap }
	"Default existing LeftFinDepth"	   ResWin:exLeftFinDepth   = { ResWin:LeftFinDepth }
	"Default existing LeftFinTopUp"  	ResWin:exLeftFinTopUp   = { ResWin:LeftFinTopUp }
	"Default existing LeftFinDistL"	   ResWin:exLeftFinDistL   = { ResWin:LeftFinDistL }
	"Default existing LeftFinBotUp"  	ResWin:exLeftFinBotUp   = { ResWin:LeftFinBotUp }
	"Default existing RightFinDepth"	   ResWin:exRightFinDepth  = { ResWin:RightFinDepth }
	"Default existing RightFinTopUp" 	ResWin:exRightFinTopUp  = { ResWin:RightFinTopUp }
	"Default existing RightFinDistR"	   ResWin:exRightFinDistR  = { ResWin:RightFinDistR }
	"Default existing RightFinBotUp" 	ResWin:exRightFinBotUp  = { ResWin:RightFinBotUp }

	"Default IsStdCondZoneWin" 	      ResWin:IsStdCondZoneWin	= {	0  }		; SAC 2/11/14

   ; added window view factor setting to account for overhang - based on logic from BAW - SAC 6/22/17
   "Set ResWin:OvrhngViewFctrSky"      ResWin:OvrhngViewFctrSky  = {
         if (ShowFinsOverhang = 0 .OR. IfValidAnd( Height > 0 )==0 .OR.
             IfValidAnd( OverhangDepth > 0 )==0 .OR. LocalStatus( OverhangDistUp ) < 1) then  UNDEFINED
         else  ( sqrt( ( OverhangDistUp + Height ) * ( OverhangDistUp + Height ) + OverhangDepth * OverhangDepth ) -
                 sqrt( OverhangDistUp * OverhangDistUp + OverhangDepth * OverhangDepth ) ) / (2 * Height)
         endif  }
   "Set ResWin:exOvrhngViewFctrSky (existing)"      ResWin:exOvrhngViewFctrSky  = {
         if (IfValidAnd( Status = 2 )==0 .OR. IfValidAnd( IsVerified = 1 )==0 .OR.
             ShowFinsOverhang = 0 .OR. IfValidAnd( exHeight > 0 )==0 .OR.
             IfValidAnd( exOverhangDepth > 0 )==0 .OR. LocalStatus( exOverhangDistUp ) < 1) then  UNDEFINED
         else  ( sqrt( ( exOverhangDistUp + exHeight ) * ( exOverhangDistUp + exHeight ) + exOverhangDepth * exOverhangDepth ) -
                 sqrt( exOverhangDistUp * exOverhangDistUp + exOverhangDepth * exOverhangDepth ) ) / (2 * exHeight)
         endif  }

; TESTING
;	"Set ResWin:ParOrientation"        ResWin:ParOrientation      	= {	EnumString( Orientation       )  }		; ParentSymbolString(     Orientation       )  }
;	"Set ResWin:ParRefConsType"        ResWin:ParRefConsType      	= {	EnumString( Construction:Type )  }		; ParentRefSymbolString(  Construction:Type )  }
;	"Set ResWin:Par2ZoneType"          ResWin:Par2ZoneType        	= {	EnumString( Type              )  }		; Parent2SymbolString(    Type              )  }
;	"Set ResWin:Par2RefZoneHVACType"   ResWin:Par2RefZoneHVACType 	= {	EnumString( HVACSystem:Type   )  }		; Parent2RefSymbolString( HVACSystem:Type   )  }
;	"Set ResWin:Par3ProjClimZone"      ResWin:Par3ProjClimZone    	= {	EnumString( ClimateZone       )  }		; Parent3SymbolString(    ClimateZone       )  }

   "Set window areas by orientation"      ResProj:Action = {  EvalRulelist( "Set_ResExtWallAz_WinAreaByOrientation" )  }      ; SAC 7/12/20

; added to facilitate Clerestory lighting PAF - JP 9/14/22
  "Set IsClerestory"          ResWin:IsClerestory = { 0 }
  "Set ClerestoryPAFAllowed"  ResWin:ClerestoryPAFAllowed = {
          if( ParentComponentType() = "ResExtWall" )
          then if( IsClerestory = 1 .AND. ResExtWall:TrueOrientationIdx != 1 )
               then 1 else 0 endif
          else 0 endif }
;  "Set ClerestoryPAFAllowed"  ResOtherZn:ClerestoryPAFAllowed = {
;          if( SumChildren( ResWin:ClerestoryPAFAllowed ) >= 1 ) then 1 else 0 endif }

   ;--------------------------------------------------------------------
   ; ProposedInput: ResSkylt Rules   (Sklylights entered via UI)
   ;--------------------------------------------------------------------

;	"Default ResSkylt:Area"				ResSkylt:Area					= {	...   - compulsory input

	"Default ResSkylt:Multiplier"		ResSkylt:Multiplier			= {	1  }

;	"Default ResSkylt:NFRCUfactor"	ResSkylt:NFRCUfactor			= {	...   - compulsory input
;	"Default ResSkylt:NFRCSHGC"		ResSkylt:NFRCSHGC				= {	...   - compulsory input

	; SAC 2/20/15 - for EAA addition window areas
	"Set ResSkylt:IsEAAAddZoneGChild"	ResSkylt:IsEAAAddZoneGChild	= {	Parent( CathedralCeiling:IsEAAAddZoneChild )  }

; mjb	2/19/14	added array element designation (needed for reporting consistent with Window area reporting)
;	"Set ResSkylt:TotAreaInclMult"	ResSkylt:TotAreaInclMult[1]	= {	Area * Multiplier  }
; SAC 7/23/14 - added more complete setting of TotAreaInclMult[*] - consistent w/ rules elsewhere
; SAC 2/20/15 - modified to REMOVE E+A+A Additions window/skylight area from New (item 2) and added separate Additions array element
	"Calculate ResSkylt:TotAreaInclMult[1] - total"				ResSkylt:TotAreaInclMult[1]		= {
		Area * Multiplier  }
	"Calculate ResSkylt:TotAreaInclMult[3] - existing"			ResSkylt:TotAreaInclMult[3]		= {
		if (ResProj:RunScope == 2 .AND. Status == 1) then  TotAreaInclMult[1]  else  0  endif  }
	"Calculate ResSkylt:TotAreaInclMult[2] - new (not add)"	ResSkylt:TotAreaInclMult[2]		= {
		if (Status == 3 .AND. IsEAAAddZoneGChild == 0) then  TotAreaInclMult[1]  else  0  endif  }
	"Calculate ResSkylt:TotAreaInclMult[4] - additions"		ResSkylt:TotAreaInclMult[4]		= {
		if (IsEAAAddZoneGChild) then  TotAreaInclMult[1]  else  0  endif  }

;	; for AirNet...
;	"Default ResSkylt:VentArea"		ResSkylt:VentArea				= {	TotAreaInclMult[1] * 0.1  }

; LH - added rules to default existing window properties
  "Default Skylight Existing UfactorSHGCSource"  ResSkylt:exUfactorSHGCSource = {
    if( IfValidAnd( ResSkylt:UfactorSHGCSource > 0 ) .AND.
        IfValidAnd( ResSkylt:IsVerified > 0 ) )
    then ResSkylt:UfactorSHGCSource
    else UNCHANGED
    endif }

  "Default Skylight Existing Area"  ResSkylt:exArea = {
    if( IfValidAnd( ResSkylt:Area > 0 ) .AND.
        IfValidAnd( ResSkylt:IsVerified > 0 ) )
    then ResSkylt:Area
    else UNCHANGED
    endif }

  "Default Skylight Existing Ufactor"  ResSkylt:exNFRCUfactor = {
    if( IfValidAnd( ResSkylt:NFRCUfactor > 0 ) .AND.
        IfValidAnd( ResSkylt:IsVerified > 0 ) .AND.
        IfValidAnd( ResSkylt:exUfactorSHGCSource = 1 ) )
    then ResSkylt:NFRCUfactor
    else UNCHANGED
    endif }

  "Default Skylight Existing SHGC"  ResSkylt:exNFRCSHGC = {
    if( IfValidAnd( ResSkylt:NFRCSHGC > 0 ) .AND.
        IfValidAnd( ResSkylt:IsVerified > 0 ) .AND.
        IfValidAnd( ResSkylt:exUfactorSHGCSource = 1 ) )
    then ResSkylt:NFRCSHGC
    else UNCHANGED
    endif }

   ;--------------------------------------------------------------------
   ; ProposedInput: ResDr Rules
   ;--------------------------------------------------------------------
			;            "Area",              BEMP_Flt,  1, "ft2",           - no default

;	"Default ResDr:Ufactor"		ResDr:Ufactor	= {	if (ParentComponentType() == "ResGarage") then  1.0  else  0.5  endif  }   ; SAC 1/29/13 - added default (from BAW over phone)
	"Default ResDr:Ufactor"		ResDr:Ufactor	= {
		if (ParentComponentType() == "ResExtWall" .AND. Parent( ResExtWall:ParentType ) == 2)
		then  1.0
		else  T24RClimateZoneCodeBase:DoorUfactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )  endif  }   ; SAC 1/29/13 - added default (from BAW over phone)

	"Default existing Ufactor"		ResDr:exUfactor = { Ufactor }		; SAC 2/11/14

	"Default IsStdCondZoneDoor" 	ResDr:IsStdCondZoneDoor	= {	0  }		; SAC 2/11/14

END
;*************************************************************************


; SAC 10/24/16 - new rulelist to default attic & cool vent properties
;*************************************************************************
RULELIST "ProposedInput_Shell_AtticAndCoolVent" 0 0 0 0
;*************************************************************************
   ;--------------------------------------------------------------------
   ; ProposedInput: Attic Rules (second subset)
   ;--------------------------------------------------------------------
  ; SAC 1/11/13 - revised RoofSolReflect defaulting
	"Default Attic:RoofSolReflect"	Attic:RoofSolReflect	= {	0.1   }
	"Default Attic:RoofEmiss"			Attic:RoofEmiss		= {	0.85  }

	"Set Attic:TreeDescrip"		Attic:TreeDescrip = {
		if (Local( FloorArea ) > 0.1)
		then  Format( "%s ft2", FltToStr( Local( FloorArea ) ) )
		else  "activate by creating a 'Ceiling (below attic)'"  endif  }

;	1,           "VentAreaChoice",    BEMP_Sym,  1, "",                 0, "",         0, "",             3204, "Choice of vent area as attic area /300 or /150"    
; mjb 5/17/13 - remove vent area choice and default to 1/300 
;	"Set Attic:AVentFraction"			Attic:AVentFraction	= {	if (VentAreaChoice <= 0) then  0

	"Default Attic:AVentFraction"		Attic:AVentFraction	= {	1 / 300   }
	"Default Attic:FractionHigh"		Attic:FractionHigh	= {	0  }   ; SAC 9/9/12 - added default of 0.3 from AirNetAlgorithm8 // SAC 1/15/13 - switched default to 0 per GC issue #18

	"Set Attic:Height"         Attic:Height      = {
	   if (Local( FloorArea ) < 0.01) then  0
		else  (Local( RoofPitch ) * sqrt( Local( FloorArea ) )) / 2  endif  }
;	"Set Attic:Bottom"         Attic:Bottom      = {   ???  }
;	"Set Attic:VentArea"       Attic:VentArea    = {   ??? -   0.5 * 0.25 * (1 - FractionHigh) * Max(AtticVent * AtticFloorArea, Fanvent, .00001)   }
	
	"Set Attic:RoofFramingFactor => fraction of gross wall area that includes frame" 
		Attic:RoofFramingFactor	= {	LocalRef( Construction:FramingFactor )  }

  ; SAC 11/5/12 - added to support attic edge modeling
  ; SAC 12/4/12 - replaced new attic edge length algorithm with one closer to the original that does not rely on summing exterior wall lengths
	"Default Attic:EdgeLengthFactor"			Attic:EdgeLengthFactor		= {	0.7  }		; Factor to adjust total attic edge accounting for gable roof
;	"Default ResExtWall:AtcEdg_TopLength"		ResExtWall:AtcEdg_TopLength	= {	if (ParentComponentType() == "ResZn")
; 																									then	if (Parent( FloorHeight ) > 0 .AND. Parent( NumStories ) > 0)
;																											then	Area / (Parent( FloorHeight ) * Parent( NumStories ))
;																											else	0  endif
;																									else	0  endif  }
;	"Default Zone:AtcEdg_Length"				Zone:AtcEdg_Length			= {	if (ComponentCount(Attic) > 0)
;																									then	SumChildren( ResExtWall:AtcEdg_TopLength ) * Attic:EdgeLengthFactor
;																									else	0  endif  }
	"Set Attic:EdgeLength"						Attic:EdgeLength  			= {	sqrt( FloorArea ) * 4 * EdgeLengthFactor  }
	"Default Zone:AtcEdg_CeilBlwAtcArea"	Zone:AtcEdg_CeilBlwAtcArea	= {	SumChildren( CeilingBelowAttic:Area )  }
;	"Default OtherZone:AtcEdg_CeilBlwAtcArea"	OtherZone:AtcEdg_CeilBlwAtcArea	= {	SumChildren( CeilingBelowAttic:Area )  }  ; SAC 9/10/19 (MFamProto)
;	"Default CeilingBelowAttic:AtcEdg_Length"		CeilingBelowAttic:AtcEdg_Length	= {	if (ParentComponentType() == "ResZn")
;																													then	if (Parent( AtcEdg_CeilBlwAtcArea ) > 0)
;																															then	Parent( AtcEdg_Length ) * Area / Parent( AtcEdg_CeilBlwAtcArea )
	; SAC 1/17/13 - revise rule to prevent error when no Attic objects exist
	"Default CeilingBelowAttic:AtcEdg_Length"		CeilingBelowAttic:AtcEdg_Length	= {
		if ((ParentComponentType() == "ResZn" .OR. ParentComponentType() == "ResOtherZn") .AND. LocalCompAssigned( AtticZone ) > 0.5)
		then	if (IfValidAnd( AtticZone:FloorArea > 0.1 ))
		      then	ValidOr( AtticZone:EdgeLength, 0 ) * Area / AtticZone:FloorArea
				else	0  endif
		else	0  endif  }
	"Default CeilingBelowAttic:AtcEdg_WAArea"		CeilingBelowAttic:AtcEdg_WAArea	= {
		ValidOr( AtcEdg_WA, 0 ) * AtcEdg_Length  }
	"Default CeilingBelowAttic:AtcEdg_WBArea"		CeilingBelowAttic:AtcEdg_WBArea	= {
		ValidOr( AtcEdg_WB, 0 ) * AtcEdg_Length  }
	"Default CeilingBelowAttic:AtcEdg_TotArea"	CeilingBelowAttic:AtcEdg_TotArea	= {
		AtcEdg_WAArea + AtcEdg_WBArea  }
	"Set CeilingBelowAttic:AtcEdg_Msg"	CeilingBelowAttic:AtcEdg_Msg	= {
		Format( "Attic Edge:  Len=%.1f / WAArea=%.1f / WBArea=%.1f / TotArea=%.1f",
					AtcEdg_Length, AtcEdg_WAArea, AtcEdg_WBArea, AtcEdg_TotArea )  }

	"Set Attic:EdgeArea"			Attic:EdgeArea    = {
		min( SumRevRef( CeilingBelowAttic:AtticZone, CeilingBelowAttic:AtcEdg_TotArea ), (FloorArea * 0.75) )  }
	"Set Attic:EdgeArea_Msg"	Attic:EdgeArea_Msg	= {
		if (FloorArea < 0.1) then  " "
		else if (SumRevRef( CeilingBelowAttic:AtticZone, CeilingBelowAttic:AtcEdg_TotArea ) > (FloorArea * 0.75))
		then	Format( "Attic Edge issue: edge area estimate (%.1f) exceeds 75%% of attic floor area (%.1f)", 
		               SumRevRef( CeilingBelowAttic:AtticZone, CeilingBelowAttic:AtcEdg_TotArea ), FloorArea )
		else	Format( "Attic edge area (%.1f) represents attic floor area (%.1f) x %.3f", EdgeArea, FloorArea,
	                  (EdgeArea / FloorArea) )
		endif endif  }
;;	"Set Attic:EdgeWidth"		Attic:EdgeWidth   = {	2  }									; algorithm under development, assume 2 ft for now
;	"Set Attic:EdgeWidth"		Attic:EdgeWidth   = {	0  }  ; until attic edge stuff implemented
;	"Set Attic:EdgeLength"		Attic:EdgeLength  = {	sqrt( FloorArea ) * 0.7  }		; algorithm under development, assume sqrt(ACeilGross)*.7
;	"Set Attic:EdgeArea"			Attic:EdgeArea    = {	EdgeWidth * EdgeLength  }

	"Set Attic:CeilArea"			Attic:CeilArea    = {	max( 0, Local( FloorArea ) - Local( EdgeArea ) )  }
	"Set Attic:CeilFact"			Attic:CeilFact    = {	if (Local( FloorArea ) <= 0) then  0
																		else  Local( CeilArea ) / Local( FloorArea )  endif  }
	"Set Attic:TrussArea"		Attic:TrussArea   = {	Local( CeilArea ) * 2  }

	; SAc 1/26/13 - GC issue #25 - install fixed 30" attic height for flat (or close to flat) roofs (< 3"/12" rise)
	"Set Attic:Volume"         Attic:Volume      = {   if (RoofRise < 3)
																		then  CeilArea * 2.5					; define static 30" attic for flat (or close to flat) roofs
																		else  CeilArea * Height / 3  endif  }

	; SAC 12/28/14 - prevent Attic:ClVentableVolume from being > 0 when the attic NOT over any conditioned area
	"Set Attic:ClVentableVolume"					Attic:ClVentableVolume					= {
		if (Type == 0 .AND. IfValidAnd( FloorAreaOverCond > 1 )) then  Volume  else  0  endif  }
	"Set CeilingBelowAttic:ClVentableVolume"	CeilingBelowAttic:ClVentableVolume	= {
		if (ParentComponentType() != "ResGarage" .AND. LocalCompAssigned( AtticZone ) > 0) then AtticZone:ClVentableVolume 
		else 0 endif  }
	"Set CeilingBelowAttic:ClVentableArea"		CeilingBelowAttic:ClVentableArea		= {
		if (ParentComponentType() != "ResGarage" .AND. LocalCompAssigned( AtticZone ) > 0) then Area    else  0  endif  }
	"Set Zone:ClVentableClgArea"					Zone:ClVentableClgArea					= {
		SumChildren( CeilingBelowAttic:ClVentableArea )  }
;	"Set OtherZone:ClVentableClgArea"			OtherZone:ClVentableClgArea			=     ; SAC 10/2/19 - MFamProto
;		{  SumChildren( CeilingBelowAttic:ClVentableArea )  }

; SAC 4/28/14 - moved up to above attic edge calcs (where it can now be referenced) 
;	"Set Attic:RoofTilt"			Attic:RoofTilt		= {	if (Local( RoofPitch ) == 0) then  0
;																		else  atan( Local( RoofPitch ) ) * 180 / 3.14159265  endif  }

   ; reference to default HVAC duct attic - added to enable attic surface area checks PRIOR to defaulting HVACDist:Type (tic #621) - SAC 6/1/17
   "Set ResProj:DefaultDuctAtticRef - Default Attic zone for HVAC ducts"   ; SAC 6/1/17 - tic #621   
      ResProj:DefaultDuctAtticRef  = {
         if (SumAll( Attic:ClVentableVolume ) > 0.1)
         then	MaxAllComp( Attic:ClVentableVolume )
         else if (SumAll( Attic:FloorAreaOverCond ) > 0.1)
         then	MaxAllComp( Attic:FloorAreaOverCond )
         else	MaxAllComp( Attic:FloorArea )
         endif endif  }

	"Set Attic:DeckArea"			Attic:DeckArea		= {
		Local( CeilArea ) * sqrt( 1 + (Local( RoofPitch ) * Local( RoofPitch )) )  }

;"store BEMProc details" ResProj:Action = {  if (RunAbbrev == "s") then  StoreBEMProc( "set std Attic-DeckArea", 0 ) else  UNCHANGED  endif  }
;"debugging" ResProj:Action = { if (RunAbbrev == "s") then  MessageBox( "Model stored for %s:%s run", RunID, EnumString( StandardsVersion ) )  else  UNCHANGED  endif }

	"Set CeilingBelowAttic:UncondAtticArea"	CeilingBelowAttic:UncondAtticArea	= {
		if (IfValidAnd( AtticZone:Type == 0 )) then  AtticZone:FloorArea  else  0  endif  }
	"Set Zone:UncondAtticArea"						Zone:UncondAtticArea						= {
		if (Type > 9) then  0  else  SumChildren( CeilingBelowAttic:UncondAtticArea )  endif  }
	"Set Zone:AtticArea"								Zone:AtticArea								= {
		SumChildren( CeilingBelowAttic:Area )  }

;	"Set OtherZone:AtticArea"					OtherZone:AtticArea			=         ; SAC 9/20/19 - OtherZone (MFamProto) 
;		{  SumChildren( CeilingBelowAttic:Area )  }
;	"Set OtherZone:UncondAtticArea"			OtherZone:UncondAtticArea	= 
;		{  if (Type > 9) then  0  else  AtticArea  endif  }

			; to support multiple attics
	"Set Zone:MaxClVentableVolume"		Zone:MaxClVentableVolume	= {
		MaxChild(     CeilingBelowAttic:ClVentableVolume )  }
	"Set Zone:MaxClVentableCeiling"		Zone:MaxClVentableCeiling	= {
		MaxChildComp( CeilingBelowAttic:ClVentableVolume )  }
	"Set Zone:MaxClVentableAttic"			Zone:MaxClVentableAttic		= {
		if (	LocalCompAssigned( MaxClVentableCeiling ) > 0.5 .AND.
		      LocalCompAssigned( MaxClVentableCeiling:AtticZone ) > 0.5 ) then  MaxClVentableCeiling:AtticZone
		else  UNDEFINED  endif  }

; SAC 1/20/19 - moved FROM here to after most HVAC defaulting so that ClVentFan properties are defaulted before referenced (tic #1040)
;; SAC 10/20/14 - moved here from CSE simulation prep so that it is accessible in model checking
;	; SAC 5/2/13 - new rulelists to handle Cooling Ventilation (ClVent) summing into referenced ZONES
;	"Set Zone:ClVent*"	ResProj:Action	= {	if (IsMultiFamily < 0.5)
;														then  EvalRulelist( "Set_ZoneClVent_SFam" )
;														else	EvalRulelist( "Set_ZoneClVent_MFam" )  endif  }
END
;*************************************************************************


; SAC 4/14/15 - new rulelist to handle ALL Attic defaulting
;*************************************************************************
RULELIST "Default_Attic"  0 0 0 0
;*************************************************************************
  ; SAC 1/17/13 - added default attic roof construction assignment
	"Default Attic:Construction"		Attic:Construction	= {	if (LocalCompAssigned( Construction )) then  UNCHANGED
																					else	RuleLibrary( Cons, "Asphalt Shingle Roof" )  endif  }

  ; default rules that feed into attic edge defaults in the Cons object
	"Default Attic:RoofRise"	Attic:RoofRise		= {	5 }
	"Set Attic:RoofPitch"		Attic:RoofPitch	= {	if (IfValidAnd( RoofRise > 0 )) then  RoofRise / 12  else  0  endif  }
   ; fix logic to set Steep to 1 if RoofRise EQUAL 2:12 (previsouly only if it was > 2:12) - SAC 07/01/23 (tic #3479)
	"Set Attic:SteepSlope"		Attic:SteepSlope	= {	if (IfValidAnd( RoofRise >= 2 )) then  1  else  0  endif  }
; SAC 4/28/14 - moved up here from below to ensure that Attic:RoofTilt is set prior to attic edge calcs (where it can now be referenced)
	"Set Attic:RoofTilt"			Attic:RoofTilt		= {	if (IfValidAnd( RoofPitch > 0)) then  atan( RoofPitch ) * 180 / 3.14159265
																		else  0  endif  }

; SAC 11/3/14 - call subordinate rulelist to evaluate certain other attic area rules used to determine when attics are cool-ventable and can be assigned to CathedralCeilings converted to CeilingBelowAttics for std design model
	"Perform more Attic area defaulting"	Attic:Action	= {	EvalRulelist( "Default_AtticAreas", 1 )  }
END

;*************************************************************************
RULELIST "Default_AtticAreas"  0 0 0 0
;*************************************************************************
	"Set Attic:FloorArea"				Attic:FloorArea			= {	SumRevRef( CeilingBelowAttic:AtticZone, CeilingBelowAttic:Area )  }
   "Set Attic:Area - added for consistency w/ Garage & OtherZone"    Attic:Area = {  FloorArea  }   ; SAC 11/24/20 (tic #1253)
	"Set Attic:FloorAreaOverCond"		Attic:FloorAreaOverCond	= {	SumRevRef( CeilingBelowAttic:AtticZone, CeilingBelowAttic:AreaOverCond )  }
	"Set Attic:ToBeSimulated"			Attic:ToBeSimulated		= {	if (FloorArea > 0.1) then  1  else  0  endif  }		; SAC 5/11/15 - related to fix for isse 536

		;EM 2/11/15
	"Set Attic:FloorAreaOverNewZone"		Attic:FloorAreaOverNewZone	= {	SumRevRef( CeilingBelowAttic:AtticZone, CeilingBelowAttic:AreaOverNewZone )  }

	"Set Attic:NewAltLowSlopeAtticRoof"    Attic:NewAltLowSlopeAtticRoof	=              ; SAC 07/01/23 (tic #3479)
      {	if (FloorAreaOverCond < 1 .OR. SteepSlope > 0 .OR. Status == 1) then  0
         else  FloorAreaOverCond  endif  }
	"Set Attic:NewAltHiSlopeAtticRoof"     Attic:NewAltHiSlopeAtticRoof	= 
      {	if (FloorAreaOverCond < 1 .OR. SteepSlope < 1 .OR. Status == 1) then  0
         else  FloorAreaOverCond  endif  }

	"Set Attic:OnlyOverUncond"			Attic:OnlyOverUncond		= {	if (IfValidAnd( FloorArea > 0.1 ) .AND. IfValidAnd( FloorAreaOverCond > 0.1 )==0) then  1  else  0  endif  }	; SAC 11/19/14

; SAC 10/14/14 - added properties needed to enable multiple Attic obejcts per model
; SAC 12/14/14 - added logic to prevent ClVentableArea > 0 if this attic not over any conditioned zones
	"Set Attic:ClVentableArea"			Attic:ClVentableArea		= {	if (Type == 0 .AND. IfValidAnd( FloorAreaOverCond > 0.1 )) then  FloorArea  else  0  endif  }

; SAC 11/3/14 - added property to determine which, if any, Attic objects can be used to link to proposed model CathedralCeilings that are converted to CeilingBelowAttic for the standard design model
	"Set Attic:StdCathClgAtticArea"	Attic:StdCathClgAtticArea	= {	if ((Status == 2 .OR. Status == 3) .AND. Type == 0)	; New or Altered -and- Ventilated Attic
																							then  FloorArea  else  0  endif  }

	; SAC 9/23/15 - properties used to setup 2016 standard design roof constructions based on roof pitch
	"Set Attic:SteepRoofArea"			Attic:SteepRoofArea		= {	if (IfValidAnd( FloorArea > 0.1 ) .AND. IfValidAnd( SteepSlope > 0.5 )) then  FloorArea  else  0  endif  }
	"Set Attic:FlatRoofArea"			Attic:FlatRoofArea		= {	if (IfValidAnd( FloorArea > 0.1 ) .AND. IfValidAnd( SteepSlope < 0.5 )) then  FloorArea  else  0  endif  }
END
;*************************************************************************


;*************************************************************************  SAC 7/12/20
; set ResWin / ResExtWall / Zone / OtherZone - ResWin area by orientation
;*************************************************************************
RULELIST  "Set_ResExtWallAz_WinAreaByOrientation"  1 0 0 0
   "Set ResExtWall:Azimuth"               ResExtWall:Azimuth   = {  OrientationValue + ResProj:FrontOrientation  }
   "Adjust ResExtWall:Azimuth for parent ZnAzm"    ResExtWall:Azimuth =
      {  if (ParentComponentType() != "ResZn" .AND. ParentComponentType() != "ResOtherZn") then  UNCHANGED
         else  Azimuth + ValidOr( ZnAzm, 0 )  endif  }
   "Correct Azimuth for radial deg"    ResExtWall:Azimuth   =
      {  if (     Azimuth >= 360) then  Azimuth - 360
         else if (Azimuth <    0) then  Azimuth + 360
         else  UNCHANGED  endif endif  }
   "Sum window area into parent ResExtWall objects[1] - total"    ResExtWall:TotWinArea[1]  = {  SumChildren( ResWin:TotAreaInclMult[1] )  }

   ; calc adjustments to wall/win area orientation for models where surfaces stradle 45deg orientations - SAC 04/18/24 (tic #3554)
   "Set 'testing' ResExtWall:TrueOrientationIdx - (0 or 1-2 for close to 45deg)"    ResExtWall:TrueOrientationIdx = 
      {  if (     Azimuth <=  45 .AND. Azimuth >  42) then  1
         else if (Azimuth >   45 .AND. Azimuth <  48) then  2
         else if (Azimuth <= 135 .AND. Azimuth > 132) then  1
         else if (Azimuth >  135 .AND. Azimuth < 138) then  2
         else if (Azimuth <= 225 .AND. Azimuth > 222) then  1
         else if (Azimuth >  225 .AND. Azimuth < 228) then  2
         else if (Azimuth <= 315 .AND. Azimuth > 312) then  1
         else if (Azimuth >  315 .AND. Azimuth < 318) then  2
         else  0  endif endif endif endif endif endif endif endif  }
   "Set ResProj:WinOrientAdj"    ResProj:WinOrientAdj =              ; SAC 04/18/24 (tic #3554)
      {  if ( SumAcrossIf( ResExtWall:TotWinArea[1], ResExtWall:TrueOrientationIdx = 1 ) < 1 .AND.
              SumAcrossIf( ResExtWall:TotWinArea[1], ResExtWall:TrueOrientationIdx = 2 ) < 1 )
         then   0
         else if ( SumAcrossIf( ResExtWall:TotWinArea[1], ResExtWall:TrueOrientationIdx = 1 ) >
                   SumAcrossIf( ResExtWall:TotWinArea[1], ResExtWall:TrueOrientationIdx = 2 ) )
         then  -5
         else   5  endif endif  }
            ;   "dbg" ResProj:Action = { if (IfValidAnd( DefaultingRounds = 2 )) then  PostMessageToLog( "   WinOrientAdj = %g based on %gSF windows <= 45 vs. %gSF wins > 45", WinOrientAdj, SumAcrossIf( ResExtWall:TotWinArea[1], ResExtWall:TrueOrientationIdx = 1 ), SumAcrossIf( ResExtWall:TotWinArea[1], ResExtWall:TrueOrientationIdx = 2 ) )  else UNCHANGED endif }

   "Set ResExtWall:TrueOrientationIdx - (1-N, 2-E, 3-S, 4-W)"     ResExtWall:TrueOrientationIdx =        ; SAC 7/12/20
      {  if (     (Azimuth + ResProj:WinOrientAdj) >  45 .AND. (Azimuth + ResProj:WinOrientAdj) <= 135) then  2
         else if ((Azimuth + ResProj:WinOrientAdj) > 135 .AND. (Azimuth + ResProj:WinOrientAdj) <= 225) then  3
         else if ((Azimuth + ResProj:WinOrientAdj) > 225 .AND. (Azimuth + ResProj:WinOrientAdj) <= 315) then  4
         else  1  endif endif endif  }

   "Set Zone:WinAreaByOrientation[1-4]-NESW"  for:#O=(1to4)  Zone:WinAreaByOrientation[#O] = {  SumChildrenIf( ResExtWall:TotWinArea[1], ResExtWall:TrueOrientationIdx = #O )  }
   "Set Zone:NumWinOrientations - 1 (N)"                     Zone:NumWinOrientations = {  if (WinAreaByOrientation[1]  > 0.1) then  1  else  0  endif  }
   "Set Zone:NumWinOrientations - 2-4 (ESW)"  for:#O=(2to4)  Zone:NumWinOrientations = {  if (WinAreaByOrientation[#O] > 0.1) then  NumWinOrientations + 1  else  UNCHANGED  endif  }

   ; second round of NumWinOrientations defaulting ignoring orientations w/ little area - SAC 04/18/24 (tic #3554)  ; fix divide by zero error - SAC 05/14/24
   "Set Zone:MinWinOrientArea"      Zone:MinWinOrientArea = {  if (IfValidAnd( NumWinOrientations > 0 )==0) then  0.1
                                                               else  max( 0.1, (SumChildren( ResExtWall:TotWinArea[1] ) / NumWinOrientations) / 5 )  endif  }
   ; "Set Zone:MinWinOrientArea"      Zone:MinWinOrientArea = {  max( 0.1, SumChildren( ResExtWall:TotWinArea[1] ) / (NumWinOrientations + 4) )  }
            ;   "dbg" Zone:Action = { if (IfValidAnd( Proj:DefaultingRounds = 2 ) .AND. 
            ;               ( (WinAreaByOrientation[1] > 0.1 .AND. WinAreaByOrientation[1] <= MinWinOrientArea) .OR. (WinAreaByOrientation[2] > 0.1 .AND. WinAreaByOrientation[2] <= MinWinOrientArea) .OR.
            ;                 (WinAreaByOrientation[3] > 0.1 .AND. WinAreaByOrientation[3] <= MinWinOrientArea) .OR. (WinAreaByOrientation[4] > 0.1 .AND. WinAreaByOrientation[4] <= MinWinOrientArea) ))
            ;            then  PostMessageToLog( "   Zone '%s' reducing # win orientations from %g:  min area  %g  vs. areas  %g,  %g,  %g,  %g", Name, NumWinOrientations, MinWinOrientArea, WinAreaByOrientation[1], WinAreaByOrientation[2], WinAreaByOrientation[3], WinAreaByOrientation[4] )  else UNCHANGED endif }
   "Set Zone:NumWinOrientations - 1 (N) rnd2"                     Zone:NumWinOrientations = {  if (WinAreaByOrientation[1]  > MinWinOrientArea) then  1  else  0  endif  }
   "Set Zone:NumWinOrientations - 2-4 (ESW) rnd2"  for:#O=(2to4)  Zone:NumWinOrientations = {  if (WinAreaByOrientation[#O] > MinWinOrientArea) then  NumWinOrientations + 1  else  UNCHANGED  endif  }

   "Set Zone:NatVentWindPresCoefMult - mult on natural vent wind pressure coefficient"    Zone:NatVentWindPresCoefMult =      ; SAC 7/13/20  ; ResZnGrp:HasIntCorridors - SAC 04/22/24 (tic #3554)
      {  if (IfValidAnd( ResZnGrp:HasIntCorridors > 0 )==0 .OR. IfValidAnd( NumDwellingUnits = 1 ))
         then  switch (NumWinOrientations)
                  case  2 :  ValidOr( ResProj:NatVentWindPresCoefMult[2], 0.5  )
                  case  3 :  ValidOr( ResProj:NatVentWindPresCoefMult[3], 1 )
                  case  4 :  ValidOr( ResProj:NatVentWindPresCoefMult[4], 1 )
                  default :  ValidOr( ResProj:NatVentWindPresCoefMult[1], 0.25 )   ; 1
               endswitch 
         else  ; has interior corridors -and- more than 1 dwelling
               0.25   ; no cross ventilation
         endif  }

   "Set OtherZone:WinAreaByOrientation[1]-N"    OtherZone:WinAreaByOrientation[1] =
      {  SumChildrenIf( ResExtWall:TotWinArea[1], ResExtWall:TrueOrientationIdx = 1 )  }
   "Set OtherZone:WinAreaByOrientation[2]-E"    OtherZone:WinAreaByOrientation[2] =
      {  SumChildrenIf( ResExtWall:TotWinArea[1], ResExtWall:TrueOrientationIdx = 2 )  }
   "Set OtherZone:WinAreaByOrientation[3]-S"    OtherZone:WinAreaByOrientation[3] =
      {  SumChildrenIf( ResExtWall:TotWinArea[1], ResExtWall:TrueOrientationIdx = 3 )  }
   "Set OtherZone:WinAreaByOrientation[4]-W"    OtherZone:WinAreaByOrientation[4] =
      {  SumChildrenIf( ResExtWall:TotWinArea[1], ResExtWall:TrueOrientationIdx = 4 )  }
   "Set OtherZone:NumWinOrientations - 1 (N)"   OtherZone:NumWinOrientations = {  if (WinAreaByOrientation[1] > 0.1) then  1  else  0  endif  }
   "Set OtherZone:NumWinOrientations - 2 (E)"   OtherZone:NumWinOrientations = {  if (WinAreaByOrientation[2] > 0.1) then  NumWinOrientations + 1  else  UNCHANGED  endif  }
   "Set OtherZone:NumWinOrientations - 3 (S)"   OtherZone:NumWinOrientations = {  if (WinAreaByOrientation[3] > 0.1) then  NumWinOrientations + 1  else  UNCHANGED  endif  }
   "Set OtherZone:NumWinOrientations - 4 (W)"   OtherZone:NumWinOrientations = {  if (WinAreaByOrientation[4] > 0.1) then  NumWinOrientations + 1  else  UNCHANGED  endif  }
   ; SAC 7/13/20  ; ResZnGrp:HasIntCorridors - SAC 04/22/24 (tic #3554)
   "Set OtherZone:NatVentWindPresCoefMult - mult on natural vent wind pressure coefficient"     OtherZone:NatVentWindPresCoefMult =       ; no nat vent when no windows - SAC 04/23/24 (tic #3554)
      {  if (NumWinOrientations < 1)
         then  0.0
         else if (IfValidAnd( ResZnGrp:HasIntCorridors > 0 ))
         then  0.25
         else  switch (NumWinOrientations)
                  case  2 :  ValidOr( ResProj:NatVentWindPresCoefMult[2], 0.5  )
                  case  3 :  ValidOr( ResProj:NatVentWindPresCoefMult[3], 1 )
                  case  4 :  ValidOr( ResProj:NatVentWindPresCoefMult[4], 1 )
                  default :  ValidOr( ResProj:NatVentWindPresCoefMult[1], 0.25 )   ; 1 orientation
               endswitch  endif endif  }
END
;*************************************************************************


; SAC 10/6/15 - separate out rules to force reset of DHWSys assignments and set NumDHWSysAssigns, DHWSysAssignFrac & DHWSysFlrArea (to facilitate DHW BudgetConversion)
;*************************************************************************
RULELIST "Default_DwellUnitType_DHWSysRefs"  0 0 0 0

  ; SAC 11/20/14 - rules to FORCE reset of array elements beyond those valid based on NumDHWSysTypes
	"Force reset of DwellUnitType:DHWSysRef[1]"		DwellUnitType:Action		= {	if (NumDHWSysTypes >= 1 .OR. LocalStatus( DHWSysRef[1] ) < 6) then  UNCHANGED
																											else	EvalRulelist( "ForceReset_DwellUnitType_DHWSysRef_1", 1 )  endif  }
	"Force reset of DwellUnitType:DHWSysRef[2]"		DwellUnitType:Action		= {	if (NumDHWSysTypes >= 2 .OR. LocalStatus( DHWSysRef[2] ) < 6) then  UNCHANGED
																											else	EvalRulelist( "ForceReset_DwellUnitType_DHWSysRef_2", 1 )  endif  }
	"Force reset of DwellUnitType:DHWSysRef[3]"		DwellUnitType:Action		= {	if (NumDHWSysTypes >= 3 .OR. LocalStatus( DHWSysRef[3] ) < 6) then  UNCHANGED
																											else	EvalRulelist( "ForceReset_DwellUnitType_DHWSysRef_3", 1 )  endif  }
	"Force reset of DwellUnitType:DHWSysRef[4]"		DwellUnitType:Action		= {	if (NumDHWSysTypes >= 4 .OR. LocalStatus( DHWSysRef[4] ) < 6) then  UNCHANGED
																											else	EvalRulelist( "ForceReset_DwellUnitType_DHWSysRef_4", 1 )  endif  }
	"Force reset of DwellUnitType:DHWSysRef[5]"		DwellUnitType:Action		= {	if (NumDHWSysTypes >= 5 .OR. LocalStatus( DHWSysRef[5] ) < 6) then  UNCHANGED
																											else	EvalRulelist( "ForceReset_DwellUnitType_DHWSysRef_5", 1 )  endif  }
	; "Default DwellUnitType:DHWSysRef"
	"Set DwellUnitType:NumDHWSysAssigns - Number of DHWSys assignments - 1"
																DwellUnitType:NumDHWSysAssigns	= {	if (NumDHWSysTypes >= 1 .AND. LocalCompAssigned( DHWSysRef[1] ))
																													then	if (DHWSysRef[1]:NumDHWHeaters > 0.5) then  1  else  0  endif		else	0  endif  }
	"Set DwellUnitType:NumDHWSysAssigns - 2"		DwellUnitType:NumDHWSysAssigns	= {	if (NumDHWSysTypes >= 2 .AND. LocalCompAssigned( DHWSysRef[2] ))
																													then	if (DHWSysRef[2]:NumDHWHeaters > 0.5) then  NumDHWSysAssigns + 1  else  UNCHANGED  endif		else	UNCHANGED  endif  }
	"Set DwellUnitType:NumDHWSysAssigns - 3"		DwellUnitType:NumDHWSysAssigns	= {	if (NumDHWSysTypes >= 3 .AND. LocalCompAssigned( DHWSysRef[3] ))
																													then	if (DHWSysRef[3]:NumDHWHeaters > 0.5) then  NumDHWSysAssigns + 1  else  UNCHANGED  endif		else	UNCHANGED  endif  }
	"Set DwellUnitType:NumDHWSysAssigns - 4"		DwellUnitType:NumDHWSysAssigns	= {	if (NumDHWSysTypes >= 4 .AND. LocalCompAssigned( DHWSysRef[4] ))
																													then	if (DHWSysRef[4]:NumDHWHeaters > 0.5) then  NumDHWSysAssigns + 1  else  UNCHANGED  endif		else	UNCHANGED  endif  }
	"Set DwellUnitType:NumDHWSysAssigns - 5"		DwellUnitType:NumDHWSysAssigns	= {	if (NumDHWSysTypes >= 5 .AND. LocalCompAssigned( DHWSysRef[5] ))
																													then	if (DHWSysRef[5]:NumDHWHeaters > 0.5) then  NumDHWSysAssigns + 1  else  UNCHANGED  endif		else	UNCHANGED  endif  }
	"Set DwellUnitType:DHWSysAssignFrac"			DwellUnitType:DHWSysAssignFrac	= {	if (IfValidAnd( NumDHWSysAssigns > 0 )) then  1 / NumDHWSysAssigns  else  0  endif  }
	; SAC 3/28/19 - removed 2500 SF limit on DHW area served
	"Set DwellUnitType:DHWFlrAreaPerSys - Conditioned floor area (per unit) per assigned DHWSys" 	
																DwellUnitType:DHWFlrAreaPerSys	= {	if (IfValidAnd( DHWSysAssignFrac > 0 )==0) then  0
																													else if (IfValidAnd( CondFlrArea > 0 )) then  CondFlrArea * DHWSysAssignFrac  else  0  endif endif  }
END
;*************************************************************************


; SAC 10/6/15 - extracted rules from ProposedInput related to setting DHWHeater floor area served & hydronic heating properties to facilitate their evaluation during BudgetConversion
;*************************************************************************
RULELIST "Default_DHWHeater_AreaServedAndHydronic"  0 0 0 0

  ; LDH 170602 - Rulelists to Reset Zone DHW System assignments if not consistent with Zone:DHWSys[x]Status (tic 797)

; ---------- Call Rulelist to Reset Zone:DHWSys assignment if DHWSys[x]Status is altered or existing  --------------------
  "Reset Zone:DHWSys1 based on Zone:DHWSys1Status"  Zone:Action = {
    if( ( ResProj:RunScope = 2 .OR. ResProj:IsAddAlone = 1 ) .AND.
        ( DHWSys1Status = 1 .OR. DHWSys1Status = 2 ) .AND.
        LocalCompAssigned( DHWSys1 ) )
    then EvalRulelist( "ResetDHWSys1", 1 ) 
    else UNCHANGED endif }

  "Reset Zone:DHWSys2 based on Zone:DHWSys2Status"  Zone:Action = {
    if( ( ResProj:RunScope = 2 .OR. ResProj:IsAddAlone = 1 ) .AND.
      ( DHWSys2Status = 1 .OR. DHWSys2Status = 2 ) .AND.
        LocalCompAssigned( DHWSys2 ) )
    then EvalRulelist( "ResetDHWSys2", 1 ) 
    else UNCHANGED endif }

  "Reset Zone:AltDHWSys1 based on Zone:DHWSys1Status"  Zone:Action = {
    if( ( ResProj:RunScope = 1 .OR. DHWSys1Status = 3 .OR. DHWSys1Status = 1 ) .AND.
          LocalCompAssigned( AltDHWSys1 ) )
    then EvalRulelist( "ResetAltDHWSys1", 1 ) 
    else UNCHANGED endif }

  "Reset Zone:AltDHWSys2 based on Zone:DHWSys2Status"  Zone:Action = {
    if( ( ResProj:RunScope = 1 .OR. DHWSys2Status = 3 .OR. DHWSys2Status = 1 ) .AND.
          LocalCompAssigned( AltDHWSys2 ) )
    then EvalRulelist( "ResetAltDHWSys2", 1 ) 
    else UNCHANGED endif }

  "Reset Zone:exDHWSys1 based on Zone:DHWSys1Status"  Zone:Action = {
    if( ( ( ResProj:RunScope = 1 .AND. ResProj:IsAddAlone < 0.5 ) .OR. 
          DHWSys1Status = 3 .OR.
          ( DHWSys1Status = 2 .AND. IfValidAnd( DHWSys1Verified < 0.5 ) ) ) .AND.
       LocalCompAssigned( exDHWSys1 ) )
    then EvalRulelist( "ResetExDHWSys1", 1 ) 
    else UNCHANGED endif }

  "Reset Zone:exDHWSys2 based on Zone:DHWSys1Status"  Zone:Action = {
    if( ( ( ResProj:RunScope = 1 .AND. ResProj:IsAddAlone < 0.5 ) .OR. 
          DHWSys2Status = 3 .OR.
          ( DHWSys2Status = 2 .AND. IfValidAnd( DHWSys2Verified < 0.5 ) ) ) .AND.
       LocalCompAssigned( exDHWSys2 ) )
    then EvalRulelist( "ResetExDHWSys2", 1 ) 
    else UNCHANGED endif }

; SAC 10/6/15 - not ever referenced (?)
;	"Set Zone:DHWSys1Assigned"			Zone:DHWSys1Assigned		= {	if (LocalCompAssigned( DHWSys1 ) > 0) then  1  else  0  endif  }	; SAC 6/27/14 - may require adjustment for MFam DwellUnit, but no apparent use right now
;	"Set Zone:DHWSys2Assigned"			Zone:DHWSys2Assigned		= {	if (LocalCompAssigned( DHWSys2 ) > 0) then  1  else  0  endif  }

	; SAC 3/1/16 - add logic to account for Existing systems in AddAlone models (tic #607)
	"Set Zone:NumDHWSysAssigns - 1"	Zone:NumDHWSysAssigns	= {	if (ResProj:IsMultiFamily > 0.5) then  0		; not used for MFam
																						else if (((ResProj:RunScope == 1 .AND. ResProj:IsAddAlone < 1) .OR. DHWSys1Status == 3) .AND. LocalCompAssigned( DHWSys1 ) > 0) then  1
																						else if (  ResProj:RunScope == 2 .AND. DHWSys1Status == 2 .AND. LocalCompAssigned( AltDHWSys1 ) > 0) then  1
																						else if ( (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0) .AND. DHWSys1Status == 1 .AND. LocalCompAssigned(  exDHWSys1 ) > 0) then  1
																						else  0  endif endif endif endif  }
	"Set Zone:NumDHWSysAssigns - 2"	Zone:NumDHWSysAssigns	= {	if (ResProj:IsMultiFamily > 0.5) then  UNCHANGED		; not used for MFam
																						else if (((ResProj:RunScope == 1 .AND. ResProj:IsAddAlone < 1) .OR. DHWSys2Status == 3) .AND. LocalCompAssigned( DHWSys2 ) > 0) then  NumDHWSysAssigns + 1
																						else if (  ResProj:RunScope == 2 .AND. DHWSys2Status == 2 .AND. LocalCompAssigned( AltDHWSys2 ) > 0) then  NumDHWSysAssigns + 1
																						else if ( (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0) .AND. DHWSys2Status == 1 .AND. LocalCompAssigned(  exDHWSys2 ) > 0) then  NumDHWSysAssigns + 1
																						else  UNCHANGED  endif endif endif endif  }
	"Set Zone:DHWSysAssignFrac"		Zone:DHWSysAssignFrac	= {	if (IfValidAnd( NumDHWSysAssigns > 0 )==0) then  0  else  1 / NumDHWSysAssigns  endif  }

; SAC 7/26/16 - moved down from above to set it after DHWSysAssignFrac is set - DHWSysAssignFrac set in above rulelist eval, and now referenced in the following rules (tic #711)
   "Set Zone:DHWFloorArea - 1"   Zone:DHWFloorArea   = {   if (ResProj:IsMultiFamily > 0.5) then  SumChildren( DwellUnit:TotalDHWFlrArea )
                                                           else if (LocalCompAssigned( DHWSys1 ) == 0) then  0
                                                           else if (DHWSys1:NumDHWHeaters  > 0.5) then  (FloorArea * DHWSysAssignFrac)  else  0  endif endif endif  }
   "Set Zone:DHWFloorArea - 2"   Zone:DHWFloorArea   = {   if (ResProj:IsMultiFamily > 0.5 .OR. LocalCompAssigned( DHWSys2 ) == 0) then  UNCHANGED
                                                           else if (DHWSys2:NumDHWHeaters  > 0.5) then  DHWFloorArea + (FloorArea * DHWSysAssignFrac)  else  UNCHANGED  endif endif  }

	"Set Zone:HasDHWUse"					Zone:HasDHWUse				= {	if (IfValidAnd( CondFloorArea > 0.1 )==0) then  0  else  1  endif  }		; SAC 10/12/15 - needed for below rule setting 
	; HW consumption based on Res ACM, App E, Sec E3.1
	; SAC 10/12/15 - revised logic to use CondFloorArea for entire dwelling and divide the load across each Zone in the model
	; SAC 3/1/16 - add logic to reduce DHW load in New Cons Addition Alone models (tic #607)
; SAC 3/10/16 - RESNET rules affecting DHW use NOT integrated from MJB update
; SAC 8/31/16 - added adjustment to split load across multiple systems assigned to this zone (Zone:DHWSysAssignFrac) (tic #739)
	"Set Zone:DHWDailyConsPerSys"		Zone:DHWDailyConsPerSys	= {	if (ResProj:IsMultiFamily > 0.5 .OR. HasDHWUse < 0.5) then  0		; not used for MFam (or no CondFloorArea)
																				;		else	21.4 + (0.00679 * min( CondFloorArea, 2500 ))  endif  }
																						else if (ResProj:RunScope == 1 .AND. ResProj:IsAddAlone > 0 .AND. IfValidAnd( ResProj:AdditionCFAFrac > 0 ) .AND. IfValidAnd( ResProj:AddAloneTotalArea > 0 ))
																						then  ( (21.4 + (0.00679 * min( SumAll( ResProj:AddAloneTotalArea ), 2500 ))) * DHWSysAssignFrac / SumAll( Zone:HasDHWUse ) ) * ResProj:AdditionCFAFrac
																						else	  (21.4 + (0.00679 * min( SumAll( Zone:CondFloorArea     ), 2500 ))) * DHWSysAssignFrac / SumAll( Zone:HasDHWUse )  endif endif  }

   "Set OtherZone:HotWtrHrlyUsePerPers"   OtherZone:HotWtrHrlyUsePerPers  =      ; SAC 02/20/23 (tic #3418)
      {  if (  (SpcFunc == 231 .OR. SpcFunc == 342) .AND.      ; 231, "Laundry Area"
               SumRevRef( DwellUnit:WasherZoneRef, DwellUnit:CentralLaundryAssigned ) > 0.5)
         then  0   ; DHW load based on res central DHW assignments
         else if (SpcFunc < 200) then  0
         else  SpaceFunctionData:HotWtrHrlyUsePerPers("FuncType",EnumString(SpcFunc))      
         endif endif  }
   "Set ResOtherZn:HotWtrUsePerDay"       ResOtherZn:HotWtrUsePerDay =           ; SAC 10/10/24 (tic #3630)
      {  HotWtrHrlyUsePerPers * ValidOr( OccNumSim, 1 ) * 24  }

   "Set ResOtherZn:HtEqpUsedAsDHWHtr flag"      ResOtherZn:HtEqpUsedAsDHWHtr  =     ; SAC 10/14/24 (tic #3629)
      {  if (IfValidAnd( ActiveHVACSystem:Type = 2 ) .AND. IfValidAnd( ActiveHVACSystem:NumHtPumpSystemTypes > 0 ) .AND.
             IfValidAnd( ActiveHVACSystem:HtPumpSystem[1]:CanBeDHWHtr > 0.1 ) .AND. IfValidAnd( ActiveHVACSystem:ServesAsDHWHtr > 0.1 ))
         then  1  else  0  endif  }

   "Set ResOtherZn:HVACSysDHWFlrArea flag"      ResOtherZn:HVACSysDHWFlrArea  =     ; SAC 10/15/24 (tic #3629)
      {  if (HtEqpUsedAsDHWHtr > 0 .AND. HotWtrUsePerDay > 0.1) then  CondFloorAreaWithMult
         else  UNDEFINED  endif  }

   "Set OtherZone:ShowDHWSysAssignment"   OtherZone:ShowDHWSysAssignment  =      ; SAC 02/21/23 (tic #3418)
      {  if (HtEqpUsedAsDHWHtr > 0.1) then  0
         else if ( SpcFunc == 231 .OR. SpcFunc == 342 .OR.      ; 231, "Laundry Area"
                   HotWtrHrlyUsePerPers > 0 )
         then  1  else  0  endif endif  }

;   "Force reset of DwellUnitType:DHWSysRef[1]"		DwellUnitType:Action		=
;      {  if (HtEqpUsedAsDHWHtr < 1 .OR. LocalCompAssigned( DHWSysRef[1] ) < 1) then  UNCHANGED
;         else	EvalRulelist( "ForceReset_DwellUnitType_DHWSysRef_1", 1 )  endif  }

   "Set OtherZone:ActiveDHWSystem"		OtherZone:Action	=                 ; SAC 06/25/23 (tic #3479)
      {  EvalRulelist( "Default_ResOtherZn_ActiveDHWSystem", 1 )  }        ; SAC 10/16/24 (tic #3629)

   "Set OtherZone:HotWtrUseDUEquiv"    OtherZone:HotWtrUseDUEquiv  =       ; SAC 03/16/23 (tic #3418)
      {  HotWtrHrlyUsePerPers * ValidOr( OccNumSim, 0 ) * ValidOr( Mult, 1 ) * 8 / 50  }
         ; gal/h-person * #people * multiplier * est'd GPD/GPH / est'd DU GPD/pers

   "Set OtherZone:DHWFloorArea"           OtherZone:DHWFloorArea        =
      {  if (LocalCompAssigned( ActiveDHWSystem ) > 0 .OR. HtEqpUsedAsDHWHtr > 0.1) then  Area  else  0  endif  }
   ; removed CondFloorArea & LaundryArea conditions and added conditions that ActiveDHWSystem be assigned & SpaceFunctionData:HotWtrHrlyUsePerPers > 0 - SAC 08/30/20 (MFamProto)
	"Set OtherZone:HasDHWUse"					OtherZone:HasDHWUse				=                          ; SAC 9/20/19 - OtherZone (MFamProto)
      {	if ((HtEqpUsedAsDHWHtr < 1 .AND. LocalCompAssigned( ActiveDHWSystem ) < 1) .OR. SpcFunc < 200) then  0
         else if (SpaceFunctionData:HotWtrHrlyUsePerPers( "FuncType", EnumString( SpcFunc ) ) < 0.001) then  0
         else  1  endif endif  }     
	"Set OtherZone:DHWDailyConsPerSys"		OtherZone:DHWDailyConsPerSys	= {	0  }

  ; SAC 2/26/16 - added for error checking associated w/ ticket #607
	"Set Zone:DHWUnassignedFloorArea[1] - New"		Zone:DHWUnassignedFloorArea[1]	= {	if (NumDHWSysAssigns > 0) then  0
																														else if (ResProj:IsMultiFamily > 0.5) then  0		; MFam via DwellUnit(Type) ??
																														else if (ResProj:RunScope == 1 .OR. DHWSys1Status == 3) then  CondFloorArea
																														else	0  endif endif endif  }
	"Set Zone:DHWUnassignedFloorArea[2] - Altered"	Zone:DHWUnassignedFloorArea[2]	= {	if (NumDHWSysAssigns > 0) then  0
																														else if (ResProj:IsMultiFamily > 0.5) then  0		; MFam via DwellUnit(Type) ??
																														else if (ResProj:RunScope == 2 .AND. DHWSys1Status == 2) then  CondFloorArea
																														else	0  endif endif endif  }
	"Set Zone:DHWUnassignedFloorArea[3] - Existing"	Zone:DHWUnassignedFloorArea[3]	= {	if (NumDHWSysAssigns > 0) then  0
																														else if (ResProj:IsMultiFamily > 0.5) then  0		; MFam via DwellUnit(Type) ??
																														else if (ResProj:RunScope == 2 .AND. DHWSys1Status == 1) then  CondFloorArea
																														else	0  endif endif endif  }

	; SAC 3/28/19 - removed 2500 SF limit on DHW area served
   "Set Zone:DHWSys1NewCondFloorArea"     Zone:DHWSys1NewCondFloorArea  = {   if (ResProj:IsMultiFamily > 0.5)
                                                                              then  if (DHWFloorArea > 0) 
                                                                                    then  CondFloorArea  else  0  endif
                                                                              else if (ResProj:RunScope == 2)
                                                                              then  if (DHWSys1Status == 3 .AND. LocalCompAssigned( DHWSys1 ) > 0) 
                                                                                    then  CondFloorArea * DHWSysAssignFrac  else  0  endif
                                                                              else  CondFloorArea * DHWSysAssignFrac  endif endif  }
   "Set Zone:DHWSys1AltCondFloorArea"     Zone:DHWSys1AltCondFloorArea  = {   if (ResProj:IsMultiFamily < 0.5 .AND.  ResProj:RunScope == 2 .AND. DHWSys1Status == 2 .AND. LocalCompAssigned( AltDHWSys1 ) > 0) then  CondFloorArea * DHWSysAssignFrac  else  0  endif  }
  ; SAC 3/1/16 - altered logic to allow Existing DHW for AddAlone projects (#607)
   "Set Zone:DHWSys1ExCondFloorArea"		Zone:DHWSys1ExCondFloorArea	= {	if (ResProj:IsMultiFamily < 0.5 .AND. (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0) .AND. DHWSys1Status == 1 .AND. LocalCompAssigned(  exDHWSys1 ) > 0) then  CondFloorArea * DHWSysAssignFrac  else  0  endif  }

	"Set Zone:DHWSys2NewCondFloorArea"		Zone:DHWSys2NewCondFloorArea	= {	if (ResProj:IsMultiFamily > 0.5) then  0
																										else if (ResProj:RunScope == 2)
																								         then	if (DHWSys2Status == 3 .AND. LocalCompAssigned( DHWSys2 ) > 0) then  CondFloorArea * DHWSysAssignFrac  else  0  endif
																								      else	CondFloorArea * DHWSysAssignFrac  endif endif  }
	"Set Zone:DHWSys2AltCondFloorArea"		Zone:DHWSys2AltCondFloorArea	= {	if (ResProj:IsMultiFamily < 0.5 .AND.  ResProj:RunScope == 2 .AND. DHWSys2Status == 2 .AND. LocalCompAssigned( AltDHWSys2 ) > 0) then  CondFloorArea * DHWSysAssignFrac  else  0  endif  }
	"Set Zone:DHWSys2ExCondFloorArea"		Zone:DHWSys2ExCondFloorArea	= {	if (ResProj:IsMultiFamily < 0.5 .AND. (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0) .AND. DHWSys2Status == 1 .AND. LocalCompAssigned(  exDHWSys2 ) > 0) then  CondFloorArea * DHWSysAssignFrac  else  0  endif  }

   "Set OtherZone:DHWSysNewCondFloorArea" OtherZone:DHWSysNewCondFloorArea  = {  if (DHWFloorArea > 0) 
                                                                                 then  CondFloorArea  else  0  endif  }

  "Set Zone:VerifExDHWSys1Assigned"  Zone:VerifExDHWSys1Assigned = {
    if( ResProj:IsMultiFamily < 0.5 .AND. ResProj:RunScope == 2 .AND.
             LocalCompAssigned( AltDHWSys1 ) .AND.
             DHWSys1Verified .AND. LocalCompAssigned( exDHWSys1 ) )
    then 1
    else 0
    endif }

  "Set Zone:VerifExDHWSys2Assigned"  Zone:VerifExDHWSys2Assigned = {
    if( ResProj:IsMultiFamily < 0.5 .AND. ResProj:RunScope == 2 .AND.
             LocalCompAssigned( AltDHWSys2 ) .AND.
             DHWSys2Verified .AND. LocalCompAssigned( exDHWSys2 ) )
    then 1
    else 0
    endif }

;	"debug"		Zone:Action	= {	MessageBox( "PROP INPUT -- Zone '%s':  DHWSys1NewCondFloorArea = %g, DHWSys1AltCondFloorArea = %g, DHWSys1ExCondFloorArea = %g", Name, DHWSys1NewCondFloorArea, DHWSys1AltCondFloorArea, DHWSys1ExCondFloorArea )  }

   ; added to ensure proper Alt/Ex system assignment setup - SAC 06/26/24
   "Set ResOtherZn:NewValidResDHWSysRef"  ResOtherZn:NewValidResDHWSysRef =               ; further mods to set valid DHWSys refs only when HotWtrHrlyUsePerPers > 0 - SAC 07/08/24
      {  if (ShowDHWSysAssignment > 0 .AND. DHWSysStatus == 3 .AND. LocalCompAssigned(  ozDHWSys ) > 0 .AND. IfValidAnd( HotWtrHrlyUsePerPers > 0 ))
         then   ozDHWSys  else  UNDEFINED  endif  }
   "Set ResOtherZn:AltValidResDHWSysRef"  ResOtherZn:AltValidResDHWSysRef = 
      {  if (ShowDHWSysAssignment > 0 .AND. DHWSysStatus == 2 .AND. LocalCompAssigned( AltDHWSys ) > 0 .AND. IfValidAnd( HotWtrHrlyUsePerPers > 0 ) .AND. Proj:ResCompOpt > 1)
         then  AltDHWSys  else  UNDEFINED  endif  }
   "Set ResOtherZn:ExValidResDHWSysRef"   ResOtherZn:ExValidResDHWSysRef  = 
      {  if (ShowDHWSysAssignment > 0 .AND. DHWSysStatus == 1 .AND. LocalCompAssigned(  exDHWSys ) > 0 .AND. IfValidAnd( HotWtrHrlyUsePerPers > 0 ) .AND. Proj:ResCompOpt > 1)
         then   exDHWSys  else  UNDEFINED  endif  }

   "Init DHWSys:NResFloorAreaServed"      DHWSys:NResFloorAreaServed = {  0  }      ; SAC 02/24/23 (tic #3418)
   "Set DHWSys:NResFloorAreaServed from ResOtherZn"   ResOtherZn:ActiveDHWSystem:NResFloorAreaServed =       ; Mult - SAC 04/27/23 (tic #3392)
      {  if (Proj:IsComRuleset .AND. IfValidAnd( HotWtrHrlyUsePerPers > 0 ) .AND. HtEqpUsedAsDHWHtr < 0.1)
         then  ActiveDHWSystem:NResFloorAreaServed + (ValidOr( Area, 0 ) * ValidOr( Mult, 1 ))
         else  UNCHANGED  endif  }     ; further mods needed for EAA!

; mjb 12/18/13 - need to keep track of floor area served by DHWSys
; SAC 6/27/14 - rules to track MFam DwellUnit floor area served by each DHWSys
; SAC 9/23/15 - added 'ResProj:IsMultiFamily > 0.5 .AND. ' to following rules to ensure that DUT & DU objects milling around in SFam models don't effect setting of these properties
	"Set DHWSys:FloorAreaServed[1] - Init"		DHWSys:FloorAreaServed[1]	= {	NResFloorAreaServed  }
	"Set DHWSys:FloorAreaServed[1] - MFam-1"	DwellUnit:DwellUnitTypeRef:DHWSysRef[1]:FloorAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. DwellUnitTypeRef:NumDHWSysTypes > 0) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[1]:FloorAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:FloorAreaServed[1] - MFam-2"	DwellUnit:DwellUnitTypeRef:DHWSysRef[2]:FloorAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. DwellUnitTypeRef:NumDHWSysTypes > 1) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[2]:FloorAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:FloorAreaServed[1] - MFam-3"	DwellUnit:DwellUnitTypeRef:DHWSysRef[3]:FloorAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. DwellUnitTypeRef:NumDHWSysTypes > 2) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[3]:FloorAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:FloorAreaServed[1] - MFam-4"	DwellUnit:DwellUnitTypeRef:DHWSysRef[4]:FloorAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. DwellUnitTypeRef:NumDHWSysTypes > 3) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[4]:FloorAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:FloorAreaServed[1] - MFam-5"	DwellUnit:DwellUnitTypeRef:DHWSysRef[5]:FloorAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. DwellUnitTypeRef:NumDHWSysTypes > 4) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[5]:FloorAreaServed[1]  else  UNCHANGED  endif  }
	; SAC 12/23/14 - extension of above, but individually for existing/altered/new
	; SAC 4/25/16 - fix bug where Zone:Status used as basis of Ex/Alt/New floor area served, rather than Zone:DHWSys1Status (reported by LF 4/15/16 & 4/22/16)
   ; revised following rules to be sensistive to DHW status of resotherZn assignments - SAC 06/26/24  - further mods starting w/ all flr, not just ResOtherZn:CondFlr - SAC 07/08/24
	"Set DHWSys:ExFlrAreaServed[1] - Init"		DHWSys:ExFlrAreaServed[1]	= {	SumRevRef( ResOtherZn:ExValidResDHWSysRef,  ResOtherZn:FlrAreaWithMult )  }
	"Set DHWSys:ExFlrAreaServed[1] - MFam-1"	DwellUnit:DwellUnitTypeRef:DHWSysRef[1]:ExFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0) .AND. Zone:DHWSys1Status == 1 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 1) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[1]:ExFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:ExFlrAreaServed[1] - MFam-2"	DwellUnit:DwellUnitTypeRef:DHWSysRef[2]:ExFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0) .AND. Zone:DHWSys1Status == 1 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 2) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[2]:ExFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:ExFlrAreaServed[1] - MFam-3"	DwellUnit:DwellUnitTypeRef:DHWSysRef[3]:ExFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0) .AND. Zone:DHWSys1Status == 1 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 3) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[3]:ExFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:ExFlrAreaServed[1] - MFam-4"	DwellUnit:DwellUnitTypeRef:DHWSysRef[4]:ExFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0) .AND. Zone:DHWSys1Status == 1 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 4) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[4]:ExFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:ExFlrAreaServed[1] - MFam-5"	DwellUnit:DwellUnitTypeRef:DHWSysRef[5]:ExFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. (ResProj:RunScope == 2 .OR. ResProj:IsAddAlone > 0) .AND. Zone:DHWSys1Status == 1 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 5) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[5]:ExFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:AltFlrAreaServed[1] - Init"	DHWSys:AltFlrAreaServed[1]	= {	SumRevRef( ResOtherZn:AltValidResDHWSysRef, ResOtherZn:FlrAreaWithMult )  }
	"Set DHWSys:AltFlrAreaServed[1] - MFam-1"	DwellUnit:DwellUnitTypeRef:DHWSysRef[1]:AltFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. ResProj:RunScope == 2 .AND. Zone:DHWSys1Status == 2 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 1) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[1]:AltFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:AltFlrAreaServed[1] - MFam-2"	DwellUnit:DwellUnitTypeRef:DHWSysRef[2]:AltFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. ResProj:RunScope == 2 .AND. Zone:DHWSys1Status == 2 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 2) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[2]:AltFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:AltFlrAreaServed[1] - MFam-3"	DwellUnit:DwellUnitTypeRef:DHWSysRef[3]:AltFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. ResProj:RunScope == 2 .AND. Zone:DHWSys1Status == 2 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 3) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[3]:AltFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:AltFlrAreaServed[1] - MFam-4"	DwellUnit:DwellUnitTypeRef:DHWSysRef[4]:AltFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. ResProj:RunScope == 2 .AND. Zone:DHWSys1Status == 2 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 4) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[4]:AltFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:AltFlrAreaServed[1] - MFam-5"	DwellUnit:DwellUnitTypeRef:DHWSysRef[5]:AltFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. ResProj:RunScope == 2 .AND. Zone:DHWSys1Status == 2 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 5) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[5]:AltFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:NewFlrAreaServed[1] - Init"	DHWSys:NewFlrAreaServed[1]	= {	SumRevRef( ResOtherZn:NewValidResDHWSysRef, ResOtherZn:FlrAreaWithMult )  }    ; was: NResFloorAreaServed  }
	"Set DHWSys:NewFlrAreaServed[1] - MFam-1"	DwellUnit:DwellUnitTypeRef:DHWSysRef[1]:NewFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. Zone:DHWSys1Status == 3 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 1) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[1]:NewFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:NewFlrAreaServed[1] - MFam-2"	DwellUnit:DwellUnitTypeRef:DHWSysRef[2]:NewFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. Zone:DHWSys1Status == 3 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 2) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[2]:NewFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:NewFlrAreaServed[1] - MFam-3"	DwellUnit:DwellUnitTypeRef:DHWSysRef[3]:NewFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. Zone:DHWSys1Status == 3 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 3) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[3]:NewFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:NewFlrAreaServed[1] - MFam-4"	DwellUnit:DwellUnitTypeRef:DHWSysRef[4]:NewFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. Zone:DHWSys1Status == 3 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 4) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[4]:NewFlrAreaServed[1]  else  UNCHANGED  endif  }
	"Set DHWSys:NewFlrAreaServed[1] - MFam-5"	DwellUnit:DwellUnitTypeRef:DHWSysRef[5]:NewFlrAreaServed[1]	= {	if (ResProj:IsMultiFamily > 0.5 .AND. Zone:DHWSys1Status == 3 .AND. DwellUnitTypeRef:NumDHWSysTypes >= 5) then  (TotalDHWFlrArea * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[5]:NewFlrAreaServed[1]  else  UNCHANGED  endif  }

   "Adjust ResDHWSys floor area served values for (Com Hotel/Motel) Spc assignments"   Proj:Action =     ; SAC 02/26/22
      {  if (IsComRuleset)
         then  EvalRulelist( "AdjustCom_ResDHWSys_FloorAreaServed" )
         else  UNCHANGED  endif  }

  ; SAC 2/26/16 - removed reference to DHWSys:Status (which is NOT yet set) in determining Ex/Alt/NewFlrAreaServed
	"Set DHWSys:FloorAreaServed[1] - SFam"		DHWSys:FloorAreaServed[1]	= {	if (Proj:IsComRuleset .OR. IfValidAnd( ResProj:IsMultiFamily > 0.5 ))	then  UNCHANGED
																										else	SumRevRef( Zone:DHWSys1,	Zone:DHWSys1NewCondFloorArea ) + SumRevRef( Zone:AltDHWSys1, Zone:DHWSys1AltCondFloorArea ) +
																												SumRevRef( Zone:ExDHWSys1,	Zone:DHWSys1ExCondFloorArea  ) +
																												SumRevRef( Zone:DHWSys2,	Zone:DHWSys2NewCondFloorArea ) + SumRevRef( Zone:AltDHWSys2, Zone:DHWSys2AltCondFloorArea ) +
																												SumRevRef( Zone:ExDHWSys2,	Zone:DHWSys2ExCondFloorArea  )   endif  }
	"Set DHWSys:ExFlrAreaServed[1] - SFam"		DHWSys:ExFlrAreaServed[1]	= {	if (Proj:IsComRuleset .OR. IfValidAnd( ResProj:IsMultiFamily > 0.5 ) .OR.
                                                                                  (IfValidAnd( ResProj:RunScope == 1 ) .AND. IfValidAnd( ResProj:IsAddAlone < 0.5 )))	then  UNCHANGED
																										else	SumRevRef( Zone:ExDHWSys1,	 Zone:DHWSys1ExCondFloorArea  ) + SumRevRef( Zone:ExDHWSys2,  Zone:DHWSys2ExCondFloorArea  )   endif  }
	"Set DHWSys:AltFlrAreaServed[1] - SFam"	DHWSys:AltFlrAreaServed[1]	= {	if (Proj:IsComRuleset .OR. IfValidAnd( ResProj:IsMultiFamily > 0.5 ) .OR.
                                                                                  (IfValidAnd( ResProj:RunScope == 1 ) .AND. IfValidAnd( ResProj:IsAddAlone < 0.5 )))	then  UNCHANGED
																										else	SumRevRef( Zone:AltDHWSys1, Zone:DHWSys1AltCondFloorArea ) + SumRevRef( Zone:AltDHWSys2, Zone:DHWSys2AltCondFloorArea )   endif  }
	"Set DHWSys:NewFlrAreaServed[1] - SFam"	DHWSys:NewFlrAreaServed[1]	= {	if (Proj:IsComRuleset .OR. IfValidAnd( ResProj:IsMultiFamily > 0.5 ))	then  UNCHANGED
																										else	SumRevRef( Zone:DHWSys1,    Zone:DHWSys1NewCondFloorArea ) + SumRevRef( Zone:DHWSys2,    Zone:DHWSys2NewCondFloorArea )   endif  }
 

 ; LDH 170531 - new property to determine whether the DHW system is an existing, verified system
  "Set DHWSys:IsExtistingVerified" DHWSys:IsExVerif = {
    if( ( SumRevRef( Zone:exDHWSys1, Zone:DHWSys1Verified ) +
          SumRevRef( Zone:exDHWSys2, Zone:DHWSys2Verified ) ) > 0.5 )
    then 1
    else 0
    endif }

  "Set DHWSys:IsAlteredVerified" DHWSys:IsAltVerif = {
    if( ( SumRevRef( Zone:AltDHWSys1, Zone:DHWSys1Verified ) +
          SumRevRef( Zone:AltDHWSys2, Zone:DHWSys2Verified ) ) > 0.5 )
    then 1
    else 0
    endif }

  "Set DHWSys:AltVerifDHWSys1ZoneRef" DHWSys:AltVerifDHWSys1ZoneRef = {
    if( IsAltVerif = 1 ) 
    then MaxRevRefComp( Zone:AltDHWSys1, Zone:VerifExDHWSys1Assigned )
    else UNCHANGED
    endif }

  "Set DHWSys:AltVerifDHWSys2ZoneRef" DHWSys:AltVerifDHWSys2ZoneRef = {
    if( IsAltVerif = 1 ) 
    then MaxRevRefComp( Zone:AltDHWSys2, Zone:VerifExDHWSys2Assigned )
    else UNCHANGED
    endif }

  "Set DHWSys:VerifExDHWSysRef" DHWSys:VerifExDHWSysRef = {
    if( LocalCompAssigned( AltVerifDHWSys1ZoneRef ) )
    then AltVerifDHWSys1ZoneRef:exDHWSys1
    else if ( LocalCompAssigned( AltVerifDHWSys2ZoneRef ) )
    then AltVerifDHWSys2ZoneRef:exDHWSys2
    else UNCHANGED
    endif endif }


 ; LDH 170504 - new property to determine whether the DHW system is referenced by any zones - this will be used in BEMBase to allow unreferenced DHWSys to assigned to DHWSys references (for UI selection)
  "Set DHWSys:IsReferenced" DHWSys:IsReferenced = {
    if( IfValidAnd( FloorAreaServed[1] > 0 ) .OR.
        IsExVerif )
    then 1
    else 0
    endif }

   "Set DHWSys:ShwrDrnWtrHtRecovRpt - Shower drain water heat recovery (for report)"   ; SAC 2/23/18 (tic #978)
      DHWSys:ShwrDrnWtrHtRecovRpt  = {
         if ( (IsNew .OR. IsAltered) .AND. FloorAreaServed[1] > 0 .AND. Proj:IsSFamResRuleset .AND.
              ( (IfValidAnd( ResProj:IsMultiFamily < 0.5 ) .AND. IfValidAnd( NumDWHRSysDevices > 0 )) .OR.
                (IfValidAnd( ResProj:IsMultiFamily > 0.5 ) .AND. ( SumRevRef( DwellUnitType:DHWSysRef[1], DwellUnitType:DWHRSysDevicesSim[1] ) > 0 .OR.
                                                  SumRevRef( DwellUnitType:DHWSysRef[2], DwellUnitType:DWHRSysDevicesSim[2] ) > 0 .OR.
                                                  SumRevRef( DwellUnitType:DHWSysRef[3], DwellUnitType:DWHRSysDevicesSim[3] ) > 0 .OR.
                                                  SumRevRef( DwellUnitType:DHWSysRef[4], DwellUnitType:DWHRSysDevicesSim[4] ) > 0 .OR.
                                                  SumRevRef( DwellUnitType:DHWSysRef[5], DwellUnitType:DWHRSysDevicesSim[5] ) > 0 )) ) )
         then  "Yes"  else  "NA"  endif  }
      ; SAC 4/29/19 - replaced old DWHR reporting (below) w/ newer (above) (tic #1056)
      ;   if (IsReferenced > 0 .AND.
      ;       IfValidAnd( ResProj:HaveShwrDrnHtRecov > 0 ) .AND. IfValidAnd( ResProj:ShwrDRAINHREFF > 0 ))
      ;   then  Format( "%g", ResProj:ShwrDRAINHREFF )
      ;   else  "NA"  endif  }

   "Set ResDHWSys ShwrDrnWtrHtRecovRpt for (Com Hotel/Motel) models"    Proj:Action =     ; SAC 02/26/22
      {  if (IsComRuleset)
         then  EvalRulelist( "AdjustCom_ResDHWSys_ShwrDrnWtrHtRecovRpt" )
         else  UNCHANGED  endif  }

  ; SAC 2/26/16 - new rule to SET DHWSys:Status
  ; LDH 170531 - update rule to account for the existing system reference of an altered, verified system
	"Set DHWSys:Status"		DHWSys:Status	= {	
    if (IfValidAnd( ResProj:RunScope == 1 ) .AND. IfValidAnd( ResProj:IsAddAlone < 0.5 )) 
    then  3
    else if( IsExVerif )
    then 1  
    else if (NewFlrAreaServed[1] >= AltFlrAreaServed[1] .AND. NewFlrAreaServed[1] >= ExFlrAreaServed[1]) 
    then  3
    else if (AltFlrAreaServed[1] >  NewFlrAreaServed[1] .AND. AltFlrAreaServed[1] >= ExFlrAreaServed[1]) 
    then  2
    else  1  
    endif endif endif endif  }

   "Set DHWSys:TypeAbbrevStr-1 central"      DHWSys:TypeAbbrevStr  =       ; SAC 6/27/20
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0)
         then  "Central-"
         else  ""  endif  }
   "Set DHWSys:TypeAbbrevStr-2 recirc"       DHWSys:TypeAbbrevStr  =
      {  if (IsRecircSystem > 0)
         then  TypeAbbrevStr + "Recirc-"
         else  UNCHANGED  endif  }
   "Set DHWSys:TypeAbbrevStr-3 htr type"     DHWSys:TypeAbbrevStr  =       ; SAC 02/20/21 (tic #1260)  ; single vs. multi-pass - SAC 01/17/22
      {  if (CentralDHWTypeVal == 2)
         then  if (CHPWHSysDescrip == 2)
               then  TypeAbbrevStr + "HPWH-SglPass"
               else if (CHPWHSysDescrip == 3)
               then  TypeAbbrevStr + "HPWH-MltPass"
               else if (CHPWHIntegPkgType == 1)
               then  TypeAbbrevStr + "HPWH-NEEA"
               else if (CHPWHIntegPkgType == 2)
               then  TypeAbbrevStr + "HPWH-Com"
               else  TypeAbbrevStr + "HPWH"
               endif endif endif endif
         else if (LocalStatus( DHWHeater[1]:TypeAbbrevStr ) > 0)
         then  TypeAbbrevStr + DHWHeater[1]:TypeAbbrevStr
         else  TypeAbbrevStr + "DHWHtr"  endif endif  }

   "Set DHWSys:TreeDescrip"      DHWSys:TreeDescrip  =         ; SAC 8/27/19   ; added 'JA13' - SAC 02/02/21
      {  if (IfValidAnd( ResProj:RunScope == 1 ) .AND. IfValidAnd( ResProj:IsAddAlone < 0.5 ))
         then  if (DemRespCompat > 0 .AND. IfValidAnd( DemResponsive > 0))
               then  if (FloorAreaServed[1] > 0.1)
                     then  Format( "%s, JA13, %s SqFt assigned", TypeAbbrevStr, FltToStr( FloorAreaServed[1] ) )
                     else  Format( "%s, JA13, not assigned", TypeAbbrevStr )
                     endif
               else  if (FloorAreaServed[1] > 0.1)
                     then  Format( "%s, %s SqFt assigned", TypeAbbrevStr, FltToStr( FloorAreaServed[1] ) )
                     else  Format( "%s, not assigned", TypeAbbrevStr )
                     endif
               endif
         else  if (DemRespCompat > 0 .AND. IfValidAnd( DemResponsive > 0))
               then  if (FloorAreaServed[1] > 0.1)
                     then  Format( "%s, JA13, %s, %s SqFt assigned", TypeAbbrevStr, EnumString( Status ), FltToStr( FloorAreaServed[1] ) )
                     else  Format( "%s, JA13, %s, not assigned", TypeAbbrevStr, EnumString( Status ) )
                     endif
               else  if (FloorAreaServed[1] > 0.1)
                     then  Format( "%s, %s, %s SqFt assigned", TypeAbbrevStr, EnumString( Status ), FltToStr( FloorAreaServed[1] ) )
                     else  Format( "%s, %s, not assigned", TypeAbbrevStr, EnumString( Status ) )
                     endif
               endif endif  }

	"Set DHWSys:FloorAreaServed[2]"	   DHWSys:FloorAreaServed[2]	= {	FloorAreaServed[1]  }
	"Set DHWSys:FloorAreaServed[3]"	   DHWSys:FloorAreaServed[3]	= {	FloorAreaServed[1]  }
	"Set DHWSys:FloorAreaServed[4]"	   DHWSys:FloorAreaServed[4]	= {	FloorAreaServed[1]  }
	"Set DHWSys:FloorAreaServed[5]"	   DHWSys:FloorAreaServed[5]	= {	FloorAreaServed[1]  }
	"Set DHWSys:FloorAreaServed[6]"	   DHWSys:FloorAreaServed[6]	= {	FloorAreaServed[1]  }
;	"debug"		DHWSys:Action	= {	MessageBox( "PROP INPUT -- DHWSys '%s':  FloorAreaServed = %g", Name, FloorAreaServed  )  }
	"Set DHWSys:ExFlrAreaServed[2]"	   DHWSys:ExFlrAreaServed[2]	= {	ExFlrAreaServed[1]  }
	"Set DHWSys:ExFlrAreaServed[3]"	   DHWSys:ExFlrAreaServed[3]	= {	ExFlrAreaServed[1]  }
	"Set DHWSys:ExFlrAreaServed[4]"	   DHWSys:ExFlrAreaServed[4]	= {	ExFlrAreaServed[1]  }
	"Set DHWSys:ExFlrAreaServed[5]"	   DHWSys:ExFlrAreaServed[5]	= {	ExFlrAreaServed[1]  }
	"Set DHWSys:ExFlrAreaServed[6]"	   DHWSys:ExFlrAreaServed[6]	= {	ExFlrAreaServed[1]  }
	"Set DHWSys:AltFlrAreaServed[2]"	   DHWSys:AltFlrAreaServed[2]	= {	AltFlrAreaServed[1]  }
	"Set DHWSys:AltFlrAreaServed[3]"	   DHWSys:AltFlrAreaServed[3]	= {	AltFlrAreaServed[1]  }
	"Set DHWSys:AltFlrAreaServed[4]"	   DHWSys:AltFlrAreaServed[4]	= {	AltFlrAreaServed[1]  }
	"Set DHWSys:AltFlrAreaServed[5]"	   DHWSys:AltFlrAreaServed[5]	= {	AltFlrAreaServed[1]  }
	"Set DHWSys:AltFlrAreaServed[6]"	   DHWSys:AltFlrAreaServed[6]	= {	AltFlrAreaServed[1]  }
	"Set DHWSys:NewFlrAreaServed[2]"	   DHWSys:NewFlrAreaServed[2]	= {	NewFlrAreaServed[1]  }
	"Set DHWSys:NewFlrAreaServed[3]"	   DHWSys:NewFlrAreaServed[3]	= {	NewFlrAreaServed[1]  }
	"Set DHWSys:NewFlrAreaServed[4]"	   DHWSys:NewFlrAreaServed[4]	= {	NewFlrAreaServed[1]  }
	"Set DHWSys:NewFlrAreaServed[5]"	   DHWSys:NewFlrAreaServed[5]	= {	NewFlrAreaServed[1]  }
	"Set DHWSys:NewFlrAreaServed[6]"	   DHWSys:NewFlrAreaServed[6]	= {	NewFlrAreaServed[1]  }

	"Set DHWSys:NewCntrlAreaServed"		DHWSys:NewCntrlAreaServed	= {	if (IfValidAnd( CentralDHW > 0.5 )) then  NewFlrAreaServed[1] + AltFlrAreaServed[1]  else  0  endif  }
	"Set DHWSys:NewCntrlAreaServedHtr[1]"		DHWSys:NewCntrlAreaServedHtr[1]	= {	if (IfValidAnd( CentralDHW > 0.5 ) .AND. IfValidAnd( CentralDHWType = 2 )==0) then  NewCntrlAreaServed  else  0  endif  }
	"Set DHWSys:NewCntrlAreaServedHtr[2]"		DHWSys:NewCntrlAreaServedHtr[2]	= {	NewCntrlAreaServedHtr[1]  }
	"Set DHWSys:NewCntrlAreaServedHtr[3]"		DHWSys:NewCntrlAreaServedHtr[3]	= {	NewCntrlAreaServedHtr[1]  }
	"Set DHWSys:NewCntrlAreaServedHtr[4]"		DHWSys:NewCntrlAreaServedHtr[4]	= {	NewCntrlAreaServedHtr[1]  }
	"Set DHWSys:NewCntrlAreaServedHtr[5]"		DHWSys:NewCntrlAreaServedHtr[5]	= {	NewCntrlAreaServedHtr[1]  }
	"Set DHWSys:NewCntrlAreaServedHtr[6]"		DHWSys:NewCntrlAreaServedHtr[6]	= {	NewCntrlAreaServedHtr[1]  }

	; SAC 2/24/16 - additions to address ticket #607 - EAA DHW assignments
	"Set DHWSys:AreaServedDetails[1] - New, Non-central"			DHWSys:AreaServedDetails[1]	= {	if (IfValidAnd( CentralDHW < 0.5 )) then  NewFlrAreaServed[1]  else  0  endif  }
	"Set DHWSys:AreaServedDetails[2] - Altered, Non-central"		DHWSys:AreaServedDetails[2]	= {	if (IfValidAnd( CentralDHW < 0.5 )) then  AltFlrAreaServed[1]  else  0  endif  }
	"Set DHWSys:AreaServedDetails[3] - Existing, Non-central"	DHWSys:AreaServedDetails[3]	= {	if (IfValidAnd( CentralDHW < 0.5 )) then   ExFlrAreaServed[1]  else  0  endif  }
	"Set DHWSys:AreaServedDetails[4] - New, Central"				DHWSys:AreaServedDetails[4]	= {	if (IfValidAnd( CentralDHW > 0.5 )) then  NewFlrAreaServed[1]  else  0  endif  }
	"Set DHWSys:AreaServedDetails[5] - Altered, Central"			DHWSys:AreaServedDetails[5]	= {	if (IfValidAnd( CentralDHW > 0.5 )) then  AltFlrAreaServed[1]  else  0  endif  }
	"Set DHWSys:AreaServedDetails[6] - Existing, Central"			DHWSys:AreaServedDetails[6]	= {	if (IfValidAnd( CentralDHW > 0.5 )) then   ExFlrAreaServed[1]  else  0  endif  }

	"Set DHWSys:StdEqProp[2]"	   DHWSys:StdEqProp[2]	= {	StdEqProp[1]  }      ; SAC 05/01/23 (tic #3489)
	"Set DHWSys:StdEqProp[3]"	   DHWSys:StdEqProp[3]	= {	StdEqProp[1]  }
	"Set DHWSys:StdEqProp[4]"	   DHWSys:StdEqProp[4]	= {	StdEqProp[1]  }
	"Set DHWSys:StdEqProp[5]"	   DHWSys:StdEqProp[5]	= {	StdEqProp[1]  }
	"Set DHWSys:StdEqProp[6]"	   DHWSys:StdEqProp[6]	= {	StdEqProp[1]  }
	"Set DHWHeater:StdEqProp"		DHWHeater:StdEqProp  = {	SumRevRef( DHWSys:DHWHeater, DHWSys:StdEqProp )  }

	; SAC 7/7/15
	"Set DHWSys:DailyHWConsumption - Init"		   DHWSys:DailyHWConsumption	= {	0  }
	"Set DHWSys:DailyHWConsumption - MFam-1-5"	for:#DS=(1to5)  DwellUnit:DwellUnitTypeRef:DHWSysRef[#DS]:DailyHWConsumption	=
      {  if (DwellUnitTypeRef:NumDHWSysTypes >= #DS) then  (DwellUnitTypeRef:DHWDailyConsPerSys * Count * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[#DS]:DailyHWConsumption
         else  UNCHANGED  endif  }
     ; {  if (IfValidAnd( DwellUnitTypeRef:HtEqpUsedAsDHWHtr > 0 )) then  UNCHANGED
	; "Set DHWSys:DailyHWConsumption - MFam-2"	DwellUnit:DwellUnitTypeRef:DHWSysRef[2]:DailyHWConsumption	= {	if (DwellUnitTypeRef:NumDHWSysTypes > 1) then  (DwellUnitTypeRef:DHWDailyConsPerSys * Count * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[2]:DailyHWConsumption  else  UNCHANGED  endif  }
	; "Set DHWSys:DailyHWConsumption - MFam-3"	DwellUnit:DwellUnitTypeRef:DHWSysRef[3]:DailyHWConsumption	= {	if (DwellUnitTypeRef:NumDHWSysTypes > 2) then  (DwellUnitTypeRef:DHWDailyConsPerSys * Count * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[3]:DailyHWConsumption  else  UNCHANGED  endif  }
	; "Set DHWSys:DailyHWConsumption - MFam-4"	DwellUnit:DwellUnitTypeRef:DHWSysRef[4]:DailyHWConsumption	= {	if (DwellUnitTypeRef:NumDHWSysTypes > 3) then  (DwellUnitTypeRef:DHWDailyConsPerSys * Count * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[4]:DailyHWConsumption  else  UNCHANGED  endif  }
	; "Set DHWSys:DailyHWConsumption - MFam-5"	DwellUnit:DwellUnitTypeRef:DHWSysRef[5]:DailyHWConsumption	= {	if (DwellUnitTypeRef:NumDHWSysTypes > 4) then  (DwellUnitTypeRef:DHWDailyConsPerSys * Count * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[5]:DailyHWConsumption  else  UNCHANGED  endif  }

   ; added to track DHW use for space heating (DHWCombo) HPs (serving as wtr htrs) - SAC 10/15/24 (tic #3629)
   "Set DwellUnit:DailyHtEqpHWConsumption"      DwellUnit:DailyHtEqpHWConsumption =
      {  if (IfValidAnd( DwellUnitTypeRef:HtEqpUsedAsDHWHtr > 0 ))
         then  DwellUnitTypeRef:DHWDailyConsPerSys * Count * Parent( Mult )
         else  0  endif  }

	"Set DHWSys:DailyCommonHWConsumption - Init"    DHWSys:DailyCommonHWConsumption  = {  0  }      ; SAC 10/10/24 (tic #3630)
	"Set DHWSys:DailyCommonHWConsumption"     ResOtherZn:ActiveDHWSystem:DailyCommonHWConsumption  =
      {  if (IfValidAnd( ShowDHWSysAssignment > 0)==0) then  UNCHANGED
         else  ActiveDHWSystem:DailyCommonHWConsumption + (ValidOr( HotWtrUsePerDay, 0 ) * Parent( Mult ))  endif  }

	"Set DHWSys:NumAssignedCommonDUEquiv - Init"    DHWSys:NumAssignedCommonDUEquiv  = {  0  }      ; SAC 10/10/24 (tic #3630)
	"Set DHWSys:NumAssignedCommonDUEquiv"     ResOtherZn:ActiveDHWSystem:NumAssignedCommonDUEquiv  =
      {  if (IfValidAnd( ShowDHWSysAssignment > 0)==0) then  UNCHANGED
         else  ActiveDHWSystem:NumAssignedCommonDUEquiv + ValidOr( HotWtrUseDUEquiv, 0 )  endif  }

	"Set DHWSys:DailyHWConsumption - SFam"		DHWSys:DailyHWConsumption	= {	if (Proj:IsComRuleset)	then  UNCHANGED
																										else	SumRevRef( Zone:DHWSys1,	Zone:DHWDailyConsPerSys ) + SumRevRef( Zone:AltDHWSys1, Zone:DHWDailyConsPerSys ) +
																												SumRevRef( Zone:ExDHWSys1,	Zone:DHWDailyConsPerSys ) +
																												SumRevRef( Zone:DHWSys2,	Zone:DHWDailyConsPerSys ) + SumRevRef( Zone:AltDHWSys2, Zone:DHWDailyConsPerSys ) +
																												SumRevRef( Zone:ExDHWSys2,	Zone:DHWDailyConsPerSys )   endif  }

	; SAC 10/21/15
	"Set DHWSys:NumDUsServed - Init"		DHWSys:NumDUsServed	= {	0  }
	"Set DHWSys:NumDUsServed - MFam-1"	DwellUnit:DwellUnitTypeRef:DHWSysRef[1]:NumDUsServed	= {	if (DwellUnitTypeRef:NumDHWSysTypes > 0) then  (Count * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[1]:NumDUsServed  else  UNCHANGED  endif  }
	"Set DHWSys:NumDUsServed - MFam-2"	DwellUnit:DwellUnitTypeRef:DHWSysRef[2]:NumDUsServed	= {	if (DwellUnitTypeRef:NumDHWSysTypes > 1) then  (Count * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[2]:NumDUsServed  else  UNCHANGED  endif  }
	"Set DHWSys:NumDUsServed - MFam-3"	DwellUnit:DwellUnitTypeRef:DHWSysRef[3]:NumDUsServed	= {	if (DwellUnitTypeRef:NumDHWSysTypes > 2) then  (Count * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[3]:NumDUsServed  else  UNCHANGED  endif  }
	"Set DHWSys:NumDUsServed - MFam-4"	DwellUnit:DwellUnitTypeRef:DHWSysRef[4]:NumDUsServed	= {	if (DwellUnitTypeRef:NumDHWSysTypes > 3) then  (Count * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[4]:NumDUsServed  else  UNCHANGED  endif  }
	"Set DHWSys:NumDUsServed - MFam-5"	DwellUnit:DwellUnitTypeRef:DHWSysRef[5]:NumDUsServed	= {	if (DwellUnitTypeRef:NumDHWSysTypes > 4) then  (Count * Parent( Mult )) + DwellUnitTypeRef:DHWSysRef[5]:NumDUsServed  else  UNCHANGED  endif  }

   "Set DHWSys:NumResOtherZnsServed"   DHWSys:NumResOtherZnsServed =       ; SAC 03/16/23 (tic #3418)
      {  SumRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:HotWtrUseDUEquiv )  }

   "Set ResDHWSys Consumption & NumDUsServed for (Com Hotel/Motel) models"    Proj:Action =     ; SAC 02/26/22
      {  if (IsComRuleset)
         then  EvalRulelist( "AdjustCom_ResDHWSys_ConsumptionAndNumDUsServed" )
         else  UNCHANGED  endif  }

	"Set ResProj:DailyHWConsumption"			ResProj:DailyHWConsumption		=        ; added DwellUnit:DailyHtEqpHWConsumption (DHWCombo) - SAC 10/15/24 (tic #3629)
      {  SumAll( DHWSys:DailyHWConsumption ) + SumAll( DwellUnit:DailyHtEqpHWConsumption )  }

	"Set DHWSys:NumDUsServed - SFam"		DHWSys:NumDUsServed	= {	if (Proj:IsComRuleset .OR. IfValidAnd( DailyHWConsumption > 0 )==0)	then  UNCHANGED
																						else  1  endif  }

   "Set DHWSys:NumSystemsInBldg - # occurrences of this system in the building"     DHWSys:NumSystemsInBldg  =       ; SAC 6/14/20 - to populate CF1R F07_ResidentialWaterHeatingSystemCount (tic #1185)
      {  if (Proj:IsComRuleset .AND. IfValidAnd( CentralDHW > 0.5 ))
         then  1  else  NumDUsServed + NumResOtherZnsServed  endif  }

	; SAC 10/22/15 - based on stds, table 120.3-A, which for all pipe diameters >= 1 in. and in the temperature range 105-140 is simply 1.5 in.
	"Default DHWSys:LoopPipeInsulThk"	DHWSys:LoopPipeInsulThk		= {	1.5  }

	"Set DHWSys:NumDHWHeaters"		DHWSys:NumDHWHeaters	=           ; SAC 02/10/21 (tic #1219)
      {  if (LocalCompAssigned( DHWHeater[6] )) then  6
		   else if (LocalCompAssigned( DHWHeater[5] )) then  5
		   else if (LocalCompAssigned( DHWHeater[4] )) then  4
		   else if (LocalCompAssigned( DHWHeater[3] )) then  3
		   else if (LocalCompAssigned( DHWHeater[2] )) then  2
		   else if (LocalCompAssigned( DHWHeater[1] ) .OR.
                  (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWType == 2)) then  1
         else  0  endif endif endif endif endif endif  }

; SAC 1/14/14 - expand to array of 6 to facilitate defaulting of FloorAreaServed for assigned DHWHeaters  (GC issue #264)
	"Set DHWHeater:FloorAreaServed"		DHWHeater:FloorAreaServed 	= {	SumRevRef( DHWSys:DHWHeater, DHWSys:FloorAreaServed ) +
																								SumRevRef( HVACHeat:CHWHeater, HVACHeat:CHFloorAreaServed )  }
	"Set DHWHeater:ExFlrAreaServed"		DHWHeater:ExFlrAreaServed 	= {	SumRevRef( DHWSys:DHWHeater, DHWSys:ExFlrAreaServed ) +
																								SumRevRef( HVACHeat:CHWHeater, HVACHeat:CHExFlrAreaServed )  }
	"Set DHWHeater:AltFlrAreaServed"		DHWHeater:AltFlrAreaServed = {	SumRevRef( DHWSys:DHWHeater, DHWSys:AltFlrAreaServed ) +
																								SumRevRef( HVACHeat:CHWHeater, HVACHeat:CHAltFlrAreaServed )  }
	"Set DHWHeater:NewFlrAreaServed"		DHWHeater:NewFlrAreaServed = {	SumRevRef( DHWSys:DHWHeater, DHWSys:NewFlrAreaServed ) +
																								SumRevRef( HVACHeat:CHWHeater, HVACHeat:CHNewFlrAreaServed )  }
	"Set DHWHeater:AreaServedByFuel[1] - Elec"	DHWHeater:AreaServedByFuel[1]	= {	if (HeaterElementType == 0) then  FloorAreaServed  else  0  endif  }
	"Set DHWHeater:AreaServedByFuel[2] - Gas"		DHWHeater:AreaServedByFuel[2]	= {	if (HeaterElementType == 1) then  FloorAreaServed  else  0  endif  }
	"Set DHWHeater:AreaServedByFuel[3] - Prop"	DHWHeater:AreaServedByFuel[3]	= {	if (HeaterElementType == 2) then  FloorAreaServed  else  0  endif  }
	"Set DHWHeater:AreaServedByFuel[4] - HtPmp"	DHWHeater:AreaServedByFuel[4]	= {	if (HeaterElementType == 3) then  FloorAreaServed  else  0  endif  }
	"Set DHWHeater:AreaServedByFuel[5] - Oil"		DHWHeater:AreaServedByFuel[5]	= {	if (HeaterElementType == 4) then  FloorAreaServed  else  0  endif  }

	; SAC 10/27/15 - identify area this heater serves which is by new/altered AND central DHW systems
	"Set DHWHeater:NewCntrlAreaServed"		DHWHeater:NewCntrlAreaServed		= {	SumRevRef( DHWSys:DHWHeater, DHWSys:NewCntrlAreaServedHtr )  }

   ; SAC 5/10/19 - moved call setting TotNumDHWHeaters UP to be evaluated prior to DHW CompactDistrib rules that reference it
   ; ; SAC 12/21/18 - move DHWSys:TotNumDHWHeaters & ResProj:NumDHWEquipUnits into subordinate list to enable eval following Std design replacements
   ; "Set DHWSys:TotNumDHWHeaters & ResProj:NumDHWEquipUnits via subordinate rulelist"      ResProj:Action  = {
   ;       EvalRulelist( "Set_ResDHWSys_TotNumDHWHeaters" )  }

;	mjb	3/24/14 - set DHWSys:IsHydronic for DHWSysRpt object
	"Set DHWHeater:IsHydronic"		DHWHeater:IsHydronic  =	{	if ( SumRevRef( HVACHeat:CHWHeater, HVACHeat:CHFloorAreaServed ) > 0.5 ) then 1 else 0 endif	}
;	"Set DHWSys:IsHydronic"			DHWSys:IsHydronic     =	{	if ( SumAll( DHWHeater:IsHydronic ) > 0.5 ) then 1 else 0 endif	}
; SAC 4/30/15 - fix bug in above rule where DHWSys:IsHydronic set to TRUE for ALL DHWSys objects if ANY DHWHeater:IsHydronic flag in the model is set (issue 533)
	"Set DHWSys:IsHydronic - 1"	DHWSys:IsHydronic     =	{	if ( NumDHWHeaters >= 1 .AND. IfValidAnd( HeaterMultFlt[1] > 0 ) .AND. LocalCompAssigned( DHWHeater[1] ) == ComponentType( "ResWtrHtr" ))
																				then   if (IfValidAnd( DHWHeater[1]:IsHydronic > 0.5 )) then 1 else 0 endif   else 0 endif  }
	"Set DHWSys:IsHydronic - 2"	DHWSys:IsHydronic     =	{	if ( IsHydronic > 0 .OR. NumDHWHeaters < 2 .OR. IfValidAnd( HeaterMultFlt[2] > 0 )==0 .OR. LocalCompAssigned( DHWHeater[2] ) != ComponentType( "ResWtrHtr" ) ) 
																				then   UNCHANGED  else if (IfValidAnd( DHWHeater[2]:IsHydronic > 0.5 )) then  1  else  UNCHANGED  endif endif  }
	"Set DHWSys:IsHydronic - 3"	DHWSys:IsHydronic     =	{	if ( IsHydronic > 0 .OR. NumDHWHeaters < 3 .OR. IfValidAnd( HeaterMultFlt[3] > 0 )==0 .OR. LocalCompAssigned( DHWHeater[3] ) != ComponentType( "ResWtrHtr" ) ) 
																				then   UNCHANGED  else if (IfValidAnd( DHWHeater[3]:IsHydronic > 0.5 )) then  1  else  UNCHANGED  endif endif  }
	"Set DHWSys:IsHydronic - 4"	DHWSys:IsHydronic     =	{	if ( IsHydronic > 0 .OR. NumDHWHeaters < 4 .OR. IfValidAnd( HeaterMultFlt[4] > 0 )==0 .OR. LocalCompAssigned( DHWHeater[4] ) != ComponentType( "ResWtrHtr" ) ) 
																				then   UNCHANGED  else if (IfValidAnd( DHWHeater[4]:IsHydronic > 0.5 )) then  1  else  UNCHANGED  endif endif  }
	"Set DHWSys:IsHydronic - 5"	DHWSys:IsHydronic     =	{	if ( IsHydronic > 0 .OR. NumDHWHeaters < 5 .OR. IfValidAnd( HeaterMultFlt[5] > 0 )==0 .OR. LocalCompAssigned( DHWHeater[5] ) != ComponentType( "ResWtrHtr" ) ) 
																				then   UNCHANGED  else if (IfValidAnd( DHWHeater[5]:IsHydronic > 0.5 )) then  1  else  UNCHANGED  endif endif  }
	"Set DHWSys:IsHydronic - 6"	DHWSys:IsHydronic     =	{	if ( IsHydronic > 0 .OR. NumDHWHeaters < 6 .OR. IfValidAnd( HeaterMultFlt[6] > 0 )==0 .OR. LocalCompAssigned( DHWHeater[6] ) != ComponentType( "ResWtrHtr" ) ) 
																				then   UNCHANGED  else if (IfValidAnd( DHWHeater[6]:IsHydronic > 0.5 )) then  1  else  UNCHANGED  endif endif  }

	"Set DHWHeater:RecovEffActive"	DHWHeater:RecovEffActive	= {	if ( IsHydronic .AND. CanBeCHWHeater .AND. IfValidAnd( TankType != 8 ) )	then  1  else  0  endif  }		; SAC 2/17/15

  ; SAC 10/28/15 - enable access for ANY valid MFamDistType  - THEN restored original rule that requires a HERS verified option to access num loops option --- SAC 11/10/15 - restored for all selection > 0
  ; "Set DHWSys:DisplayNumLoops"		DHWSys:DisplayNumLoops	= {	if (ResProj:IsMultiFamily > 0.5 .AND. MFamDistType > 8388608 .AND. (UseDefaultLoops = 0 .OR. ResProj:DHWCalcMethod > 0)) then  1  else  0  endif  }
   ; SAC 7/29/18 - removed all logic pertaining to DHWCalcMethod (related to transition from T24DHW DLLs to CSE)
   "Set DHWSys:DisplayNumLoops"		DHWSys:DisplayNumLoops	= {	if (Proj:IsComRuleset .AND. MFamDistType > 0) then  1  else  0  endif  }

; LDH 170512 - Added Force reset of DHWSys:Status if User defined
  "Force reset of DHWSys:Status if User defined"  DHWSys:Action = {
  if( LocalStatus( DHWSys:Status ) = 7 )
  then EvalRulelist( "ForceDefault_DHWSys_Status", 1 )
  else UNCHANGED
  endif }

; LDH 170508 - add rules to Populate DHWSys:Status to referenced DHWHeater:Status, and check for count > 1 and areaserved > 1...
  "Status Flag for DHWSys:DHWHeater[1]"  DHWSys:HeaterStatus[1] = {
    if( IfValidAnd( HeaterMultFlt[1] > 0 ) .AND.
        IfValidAnd( IsReferenced = 1 ) .AND.
        IfValidAnd( Status > 0 ) )
    then Status
    else 0
    endif }

  "Status Flag for DHWSys:DHWHeater[2]"  DHWSys:HeaterStatus[2] = {
    if( IfValidAnd( HeaterMultFlt[2] > 0 ) .AND.
        IfValidAnd( IsReferenced = 1 ) .AND.
        IfValidAnd( Status > 0 ) )
    then Status
    else 0
    endif }

  "Status Flag for DHWSys:DHWHeater[3]"  DHWSys:HeaterStatus[3] = {
    if( IfValidAnd( HeaterMultFlt[3] > 0 ) .AND.
        IfValidAnd( IsReferenced = 1 ) .AND.
        IfValidAnd( Status > 0 ) )
    then Status
    else 0
    endif }

  "Status Flag for DHWSys:DHWHeater[4]"  DHWSys:HeaterStatus[4] = {
    if( IfValidAnd( HeaterMultFlt[4] > 0 ) .AND.
        IfValidAnd( IsReferenced = 1 ) .AND.
        IfValidAnd( Status > 0 ) )
    then Status
    else 0
    endif }

  "Status Flag for DHWSys:DHWHeater[5]"  DHWSys:HeaterStatus[5] = {
    if( IfValidAnd( HeaterMultFlt[5] > 0 ) .AND.
        IfValidAnd( IsReferenced = 1 ) .AND.
        IfValidAnd( Status > 0 ) )
    then Status
    else 0
    endif }

  "Status Flag for DHWSys:DHWHeater[6]"  DHWSys:HeaterStatus[6] = {
    if( IfValidAnd( HeaterMultFlt[6] > 0 ) .AND.
        IfValidAnd( IsReferenced = 1 ) .AND.
        IfValidAnd( Status > 0 ) )
    then Status
    else 0
    endif }

; LDH 170512 - Added Force reset of DHWHeater:Status if User defined
  "Force reset of DHWHeater:Status if User defined"  DHWHeater:Action = {
  if( LocalStatus( DHWHeater:Status ) = 7 )
  then EvalRulelist( "ForceDefault_DHWHeater_Status", 1 )
  else UNCHANGED
  endif }
    
  "Populate DHWSys:Status to referenced DHWHeater:Status" DHWHeater:Status = {
    Max( MaxRevRef( DHWsys:DHWHeater, DHWSys:HeaterStatus), 0 ) }

   "Check for, initiate and log/notify user of forced updates to DHWHeater:TankType"  ResProj:Action  =   ; SAC 5/27/19 (tic #1096)
      {  EvalRulelist( "CheckForUpdateNeeded_DHWHeater_OldTankType" )  }
END
;*************************************************************************

; moved into separate rulelist to facilitate calling from elsewhere - SAC 10/16/24 (tic #3629)
;*************************************************************************
RULELIST "Default_ResOtherZn_ActiveDHWSystem"  0 0 0 0
   "Set ResOtherZn:ActiveDHWSystem"		ResOtherZn:ActiveDHWSystem	=           ; SAC 06/25/23 (tic #3479)
      {  if      ((ShowDHWSysAssignment > 0 .OR. HtEqpUsedAsDHWHtr > 0.1) .AND. Proj:ResCompOpt > 1 .AND. DHWSysStatus == 2) then  AltDHWSys
         else if ((ShowDHWSysAssignment > 0 .OR. HtEqpUsedAsDHWHtr > 0.1) .AND. Proj:ResCompOpt > 1 .AND. DHWSysStatus == 1) then  exDHWSys
         else if ((ShowDHWSysAssignment > 0 .OR. HtEqpUsedAsDHWHtr > 0.1)) then  ozDHWSys
         else  UNDEFINED  endif endif endif  }
END
;*************************************************************************

; SAC 12/21/18 - rulelist to set DHWSys:TotNumDHWHeaters & ResProj:NumDHWEquipUnits to enable eval following Std design replacements
;*************************************************************************
RULELIST "Set_ResDHWSys_TotNumDHWHeaters"  1 0 0 0
   ; mjb 3/24/14 - set new property used to identify sum of all DHW equip units across all new, altered or existing/verified systems (used for generating DHWSysRpt records)
   ; SAC 5/10/19 - revised to eliminate dependence on NumDHWHeaters
   ; SAC 1/5/20 - added logic to hard-wire TotNumDHWHeaters to 1 (or greater) for new Central HPWH systems (tic #862)
	"Set ResDHWSys:TotNumDHWHeaters - 1"	ResDHWSys:TotNumDHWHeaters	= {	if (IfValidAnd( ResProj:IsMultiFamily < 1 )==0 .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  1
	                                                                        else if (LocalCompAssigned( DHWHeater[1]  )) then                HeaterMultFlt[1]   else      0      endif endif  }
	"Set ResDHWSys:TotNumDHWHeaters - 2"	ResDHWSys:TotNumDHWHeaters	= {	if (LocalCompAssigned( DHWHeater[2]  )) then  TotNumDHWHeaters + HeaterMultFlt[2]   else  UNCHANGED  endif  }
	"Set ResDHWSys:TotNumDHWHeaters - 3"	ResDHWSys:TotNumDHWHeaters	= {	if (LocalCompAssigned( DHWHeater[3]  )) then  TotNumDHWHeaters + HeaterMultFlt[3]   else  UNCHANGED  endif  }
	"Set ResDHWSys:TotNumDHWHeaters - 4"	ResDHWSys:TotNumDHWHeaters = {	if (LocalCompAssigned( DHWHeater[4]  )) then  TotNumDHWHeaters + HeaterMultFlt[4]   else  UNCHANGED  endif  }
	"Set ResDHWSys:TotNumDHWHeaters - 5"	ResDHWSys:TotNumDHWHeaters = {	if (LocalCompAssigned( DHWHeater[5]  )) then  TotNumDHWHeaters + HeaterMultFlt[5]   else  UNCHANGED  endif  }
	"Set ResDHWSys:TotNumDHWHeaters - 6"	ResDHWSys:TotNumDHWHeaters	= {	if (LocalCompAssigned( DHWHeater[6]  )) then  TotNumDHWHeaters + HeaterMultFlt[6]   else  UNCHANGED  endif  }
	"Set ResProj:NumDHWEquipUnits"		ResProj:NumDHWEquipUnits	= {	SumAll( ResDHWSys:TotNumDHWHeaters )  }
END
;*************************************************************************

;*************************************************************************
RULELIST "OverwriteResWinWidthHeightMultiplier"  1 0 0 0
	"Blast ResWin:Width data"		    ResWin:Width	= {	UNDEFINED  }
	"Blast ResWin:Height data"		    ResWin:Height	= {	UNDEFINED  }
	"Blast ResWin:Multiplier data"		ResWin:Multiplier	= {	1 }
END
RULELIST "ForceResWinAreaToUndefined"  1 0 0 0
	"Toggle ResWin:Area status to rule-defined"		ResWin:Area	= {	UNDEFINED }
END
;*************************************************************************

;*************************************************************************
RULELIST "OverwriteExistingResWinWidthHeightMultiplier"  1 0 0 0
	"Blast ResWin:exWidth data"		    ResWin:exWidth	= {	UNDEFINED  }
	"Blast ResWin:exHeight data"		    ResWin:exHeight	= {	UNDEFINED  }
	"Blast ResWin:exMultiplier data"		ResWin:exMultiplier	= {	UNDEFINED  }
END
RULELIST "ForceResWinExAreaToUndefined"  1 0 0 0
  "Toggle ResWin:exArea status to rule-defined"  ResWin:exArea	= {	UNDEFINED }
END
;*************************************************************************


;*************************************************************************
RULELIST "ForceDefault_Zone_Type" 1 0 0 0
;*************************************************************************
	"Redefault Zone:Type"		Zone:Type	= {	UNDEFINED  }
END
;*************************************************************************


; SAC 10/1/13 - address backward compatibility for ResIntWall:OutsideDiffUnit property - take its value and set corresponding properties for its replacement, then flag this property as undefined
;*************************************************************************
RULELIST "BackwardCompat_ResIntWall_OutsideDiffUnit"  1 0 1 1
	"Set ResIntWall:IsPartySurface based on ResIntWall:OutsideDiffUnit"		ResIntWall:IsPartySurface		= {	if (ResProj:IsMultiFamily < 0.5) then  UNCHANGED
																																		else	OutsideDiffUnit  endif  }
	"Set ResIntWall:OtherSideModeled based on ResIntWall:OutsideDiffUnit"	ResIntWall:OtherSideModeled	= {	if (ResProj:IsMultiFamily < 0.5) then  UNCHANGED
																																		else	OutsideDiffUnit  endif  }
	"Mark ResIntWall:OutsideDiffUnit as undefined"		ResIntWall:OutsideDiffUnit	= {	UNDEFINED  }
END
; SAC 4/28/15 - address backward compatibility for InteriorCeiling & ResIntFlr:OutsideDiffUnit property - take its value and set corresponding properties for its replacement, then flag this property as undefined
;*************************************************************************
RULELIST "BackwardCompat_InteriorCeiling_OutsideDiffUnit"  1 0 1 1
	"Set InteriorCeiling:IsPartySurface based on InteriorCeiling:OutsideDiffUnit"		InteriorCeiling:IsPartySurface	= {	if (ResProj:IsMultiFamily < 0.5) then  UNCHANGED
																																									else	OutsideDiffUnit  endif  }
	"Set InteriorCeiling:OtherSideModeled based on InteriorCeiling:OutsideDiffUnit"	InteriorCeiling:OtherSideModeled	= {	if (ResProj:IsMultiFamily < 0.5) then  UNCHANGED
																																									else	OutsideDiffUnit  endif  }
	"Mark InteriorCeiling:OutsideDiffUnit as undefined"		InteriorCeiling:OutsideDiffUnit	= {	UNDEFINED  }
END
;*************************************************************************
RULELIST "BackwardCompat_ResIntFlr_OutsideDiffUnit"  1 0 1 1
	"Set ResIntFlr:IsPartySurface based on ResIntFlr:OutsideDiffUnit"		ResIntFlr:IsPartySurface		= {	if (ResProj:IsMultiFamily < 0.5) then  UNCHANGED
																																								else	OutsideDiffUnit  endif  }
	"Set ResIntFlr:OtherSideModeled based on ResIntFlr:OutsideDiffUnit"	ResIntFlr:OtherSideModeled	= {	if (ResProj:IsMultiFamily < 0.5) then  UNCHANGED
																																								else	OutsideDiffUnit  endif  }
	"Mark ResIntFlr:OutsideDiffUnit as undefined"		ResIntFlr:OutsideDiffUnit	= {	UNDEFINED  }
END
;*************************************************************************


; SAC 10/20/14 - moved here from CSE simulation prep so that it is accessible in model checking
;*************************************************************************
RULELIST "Set_ZoneClVent_MFam"  0 0 0 0
;*************************************************************************
	"Init Zone:ClVentAirFlow[1]"			Zone:ClVentAirFlow[1]	= {	0  }
	"Init Zone:ClVentPower[1]"				Zone:ClVentPower[1]		= {	0  }
	"Init Zone:ClVentAirFlow[2]"			Zone:ClVentAirFlow[2]	= {	0  }
	"Init Zone:ClVentPower[2]"				Zone:ClVentPower[2]		= {	0  }
; NO RULES HERE SETTING these values - until such a time as the MFam buildings support whole house fans
END
;*************************************************************************


;*************************************************************************
RULELIST "Create_Garage" 1 0 0 0
;-------------------------------------------------------------------------
   "Create Garage component"		ResProj:Action		= {	CreateComp( Garage, "Garage" )  }
END
;;*************************************************************************
;RULELIST "Create_Attic" 1 0 0 0
;;-------------------------------------------------------------------------
;   "Create Attic component"		ResProj:Action		= {	CreateComp( Attic, "Attic" )  }
;END
;*************************************************************************
RULELIST "Create_CrawlSpace" 1 0 0 0
;-------------------------------------------------------------------------
   "Create CrawlSpace component"		ResProj:Action		= {	CreateComp( CrawlSpace, "Crawl Space" )  }
END
;*************************************************************************


; SAC 11/20/14 - rules to FORCE reset of DHWSysRef assignments beyond those valid based on DwellUnitType:NumDHWSysTypes
;*************************************************************************
RULELIST "ForceReset_DwellUnitType_DHWSysRef_1" 1 0 0 0
	"Force reset of DwellUnitType:DHWSysRef[1]"			DwellUnitType:DHWSysRef[1]		= {	UNDEFINED  }
END
RULELIST "ForceReset_DwellUnitType_DHWSysRef_2" 1 0 0 0
	"Force reset of DwellUnitType:DHWSysRef[2]"			DwellUnitType:DHWSysRef[2]		= {	UNDEFINED  }
END
RULELIST "ForceReset_DwellUnitType_DHWSysRef_3" 1 0 0 0
	"Force reset of DwellUnitType:DHWSysRef[3]"			DwellUnitType:DHWSysRef[3]		= {	UNDEFINED  }
END
RULELIST "ForceReset_DwellUnitType_DHWSysRef_4" 1 0 0 0
	"Force reset of DwellUnitType:DHWSysRef[4]"			DwellUnitType:DHWSysRef[4]		= {	UNDEFINED  }
END
RULELIST "ForceReset_DwellUnitType_DHWSysRef_5" 1 0 0 0
	"Force reset of DwellUnitType:DHWSysRef[5]"			DwellUnitType:DHWSysRef[5]		= {	UNDEFINED  }
END
;*************************************************************************


; LDH 170512 - Added Rulelist Force reset of DHWSys:Status if User defined
;*************************************************************************
RULELIST "ForceDefault_DHWSys_Status" 1 0 0 0
	"Redefault DHWSys:Status"		DHWSys:Status	= {	UNDEFINED  }
END
;*************************************************************************


; LDH 170512 - Added Rulelist Force reset of DHWHeater:Status if User defined
;*************************************************************************
RULELIST "ForceDefault_DHWHeater_Status" 1 0 0 0
	"Redefault DHWHeater:Status"		DHWHeater:Status	= {	UNDEFINED  }
END
;*************************************************************************


;*************************************************************************
; SAC 12/28/15 - replacement inputs for AdditionCFAFrac
RULELIST "Replace_AdditionCFAFrac_with_AddAloneAreas" 1 0 0 0
	"Set AddAloneAreas"		ResProj:Action		= {	EvalRulelist( "Set_AddAloneAreas_basedon_AdditionCFAFrac" )  }
	"Force default ResProj:AdditionCFAFrac"	ResProj:AdditionCFAFrac		= {	1	} 
END
;*************************************************************************
RULELIST "Set_AddAloneAreas_basedon_AdditionCFAFrac" 1 0 1 0
	"Set ResProj:AddAloneAddedArea (based on AdditionCFAFrac)"		ResProj:AddAloneAddedArea	= {
      if (IfValidAnd( AdditionCFAFrac > 0 ) .AND. IfValidAnd( AdditionCFAFrac <= 1 ))
      then	SumAll( Zone:FloorArea )
      else	0  endif  }
	"Set ResProj:AddAloneAddedAreaWithMult (based on AdditionCFAFrac)"		ResProj:AddAloneAddedAreaWithMult	= {
      if (IfValidAnd( AdditionCFAFrac > 0 ) .AND. IfValidAnd( AdditionCFAFrac <= 1 ))
      then	SumAll( Zone:CondFloorAreaWithMult )
      else	0  endif  }
	"Set ResProj:AddAloneExistArea (based on AdditionCFAFrac)"		ResProj:AddAloneExistArea	= {
      if (IfValidAnd( AdditionCFAFrac > 0 ) .AND. IfValidAnd( AdditionCFAFrac <= 1 ) .AND. IfValidAnd( AddAloneAddedArea > 0 ))
      then	AddAloneAddedArea / AdditionCFAFrac
      else	0  endif  }
END
;*************************************************************************
RULELIST "ForceReset_AddAloneAreas" 1 0 0 0
	"Force reset ResProj:AddAloneExistArea"	ResProj:AddAloneExistArea	= {	UNDEFINED  }		; SAC 12/28/15
	"Force reset ResProj:AddAloneAddedArea"	ResProj:AddAloneAddedArea	= {	UNDEFINED  }
	"Force reset ResProj:AddAloneAddedAreaWithMult"	ResProj:AddAloneAddedAreaWithMult	= {	UNDEFINED  }
END
;*************************************************************************


; LDH - Rulelist to DHWSys1 assignemnt if not valid
;*************************************************************************
RULELIST "ResetDHWSys1" 1 0 0 1
  "Reset Zone DHWSys1 Assignment"  Zone:DHWSys1 = { UNDEFINED }
END
;*************************************************************************


; LDH - Rulelist to DHWSys2 assignemnt if not valid
;*************************************************************************
RULELIST "ResetDHWSys2" 1 0 0 1
  "Reset Zone DHWSys2 Assignment"  Zone:DHWSys2 = { UNDEFINED }
END
;*************************************************************************


; LDH - Rulelist to AltDHWSys1 assignemnt if not valid
;*************************************************************************
RULELIST "ResetAltDHWSys1" 1 0 0 1
  "Reset Zone AltDHWSys1 Assignment"  Zone:AltDHWSys1 = { UNDEFINED }
END
;*************************************************************************


; LDH - Rulelist to AltDHWSys2 assignemnt if not valid
;*************************************************************************
RULELIST "ResetAltDHWSys2" 1 0 0 1
  "Reset Zone AltDHWSys2 Assignment"  Zone:AltDHWSys2 = { UNDEFINED }
END
;*************************************************************************


; LDH - Rulelist to exDHWSys1 assignemnt if not valid
;*************************************************************************
RULELIST "ResetExDHWSys1" 1 0 0 1
  "Reset Zone exDHWSys1 Assignment"  Zone:exDHWSys1 = { UNDEFINED }
END
;*************************************************************************


; LDH - Rulelist to exDHWSys2 assignemnt if not valid
;*************************************************************************
RULELIST "ResetExDHWSys2" 1 0 0 1
  "Reset Zone exDHWSys2 Assignment"  Zone:exDHWSys2 = { UNDEFINED }
END
;*************************************************************************


; SAC 10/2/19 - backward compat for 2019+ MFam laundry modeling
;*************************************************************************
RULELIST "ForceReset_DwellUnitType_HaveWasher" 1 0 1 0
   "Set DwellUnitType:WasherOption based on HaveWasher"  DwellUnitType:WasherOption  =
      {  if (IfValidAnd( HaveWasher > 0 )) 
         then  "In-Unit"
         else  "- none -"  endif  }
   "Blast user-defined DwellUnitType:HaveWasher"   DwellUnitType:HaveWasher  = {  UNDEFINED  }
END
;*************************************************************************
RULELIST "ForceReset_DwellUnitType_HaveDryer" 1 0 1 0
   "Set DwellUnitType:DryerOption based on HaveDryer"    DwellUnitType:DryerOption  =
      {  if (IfValidAnd( HaveDryer > 0 )) 
         then  "In-Unit"
         else  "- none -"  endif  }
   "Blast user-defined DwellUnitType:HaveDryer"    DwellUnitType:HaveDryer  = {  UNDEFINED  }
END
;*************************************************************************

;************************************************************************* ; SAC 12/15/19
RULELIST "ForceReset_DwellUnitType_StdDesignIAQLimits" 1 0 0 0
   "Blast DwellUnitType:StdDesignIAQCFM"              DwellUnitType:StdDesignIAQCFM             = {  UNDEFINED  }
;   "Blast DwellUnitType:ApplyStdIAQCFMLimitToDRtg"    DwellUnitType:ApplyStdIAQCFMLimitToDRtg   = {  UNDEFINED  }
   "Blast DwellUnitType:MaxStdDesignIAQWperCFM"       DwellUnitType:MaxStdDesignIAQWperCFM      = {  UNDEFINED  }
;   "Blast DwellUnitType:ApplyStdIAQMaxPwrToDRtg"      DwellUnitType:ApplyStdIAQMaxPwrToDRtg     = {  UNDEFINED  }
END
;*************************************************************************

;************************************************************************* ; SAC 6/12/20 - split out to allow eval in earlier stages of std design setup
RULELIST "StandardDefaulting_DwellUnit_IAQPower" 0 0 0 0
   ; adjust IAQ fan powers for StdDesignIAQWperCFM if specified - SAC 5/13/20       ; updated w/ references to DwellUnitTypeRef:MaxStdDesignIAQWperCFM - SAC 08/26/20
   "Adjust DwellUnit:IAQPwr_Exhaust if BRL..."    DwellUnit:IAQPwr_Exhaust  =
      {  if (LocalStatus( DwellUnitTypeRef:MaxStdDesignIAQWperCFM ) > 4)
         then                        DwellUnitTypeRef:MaxStdDesignIAQWperCFM * IAQCFM_Exhaust
         else if (GlobalStatus( ResProj:StdDesignIAQWperCFM ) > 4)
         then                        ResProj:StdDesignIAQWperCFM                * IAQCFM_Exhaust
         else if (IfValidAnd( DwellUnitTypeRef:MaxStdDesignIAQWperCFM < ResProj:StdDesignIAQWperCFM ))
         then  min( IAQPwr_Exhaust, (DwellUnitTypeRef:MaxStdDesignIAQWperCFM * IAQCFM_Exhaust) )
         else  min( IAQPwr_Exhaust, (ResProj:StdDesignIAQWperCFM                * IAQCFM_Exhaust) )  endif endif endif  }
   "Adjust DwellUnit:IAQPwr_Supply if BRL..."     DwellUnit:IAQPwr_Supply  =
      {  if (LocalStatus( DwellUnitTypeRef:MaxStdDesignIAQWperCFM ) > 4)
         then                       DwellUnitTypeRef:MaxStdDesignIAQWperCFM * IAQCFM_Supply
         else if (GlobalStatus( ResProj:StdDesignIAQWperCFM ) > 4)
         then                       ResProj:StdDesignIAQWperCFM                * IAQCFM_Supply
         else if (GlobalStatus( ResProj:StdDesignIAQWperCFM ) < 4 .OR. IfValidAnd( DwellUnitTypeRef:MaxStdDesignIAQWperCFM < ResProj:StdDesignIAQWperCFM ))
         then  min( IAQPwr_Supply, (DwellUnitTypeRef:MaxStdDesignIAQWperCFM * IAQCFM_Supply) )
         else  min( IAQPwr_Supply, (ResProj:StdDesignIAQWperCFM                * IAQCFM_Supply) )  endif endif endif  }
   "Adjust DwellUnit:IAQHRVPwr if BRL..."         DwellUnit:IAQHRVPwr  =
      {  if (LocalStatus( DwellUnitTypeRef:MaxStdDesignIAQWperCFM ) > 4)
         then                   DwellUnitTypeRef:MaxStdDesignIAQWperCFM * IAQHRVCFM
         else if (GlobalStatus( ResProj:StdDesignIAQWperCFM ) > 4)
         then                   ResProj:StdDesignIAQWperCFM                * IAQHRVCFM
         else if (GlobalStatus( ResProj:StdDesignIAQWperCFM ) < 4 .OR. IfValidAnd( DwellUnitTypeRef:MaxStdDesignIAQWperCFM < ResProj:StdDesignIAQWperCFM ))
         then  min( IAQHRVPwr, (DwellUnitTypeRef:MaxStdDesignIAQWperCFM * IAQHRVCFM) )
         else  min( IAQHRVPwr, (ResProj:StdDesignIAQWperCFM                * IAQHRVCFM) )  endif endif endif  }
   "Adjust DwellUnit:IAQBalPwr if BRL..."         DwellUnit:IAQBalPwr  =            ; SAC 08/26/20
      {  if (LocalStatus( DwellUnitTypeRef:MaxStdDesignIAQWperCFM ) > 4)
         then                   DwellUnitTypeRef:MaxStdDesignIAQWperCFM * IAQBalCFM
         else if (GlobalStatus( ResProj:StdDesignIAQWperCFM ) > 4)
         then                   ResProj:StdDesignIAQWperCFM                * IAQBalCFM
         else if (GlobalStatus( ResProj:StdDesignIAQWperCFM ) < 4 .OR. IfValidAnd( DwellUnitTypeRef:MaxStdDesignIAQWperCFM < ResProj:StdDesignIAQWperCFM ))
         then  min( IAQBalPwr, (DwellUnitTypeRef:MaxStdDesignIAQWperCFM * IAQBalCFM) )
         else  min( IAQBalPwr, (ResProj:StdDesignIAQWperCFM                * IAQBalCFM) )  endif endif endif  }
END
;*************************************************************************


;************************************************************************* - SAC 09/27/21
RULELIST "ForceReset_Zone_Type_Unconditioned" 1 0 0 0
   "log message re: reset"    Zone:Action =
      {  if (ResProj:ZonalControl == 0)
         then  PostMessageToLog( "Resetting Zone '%s' Type to 'Conditioned' (Unconditioned only allowed in Research mode)", Name )
         else  PostMessageToLog( "Resetting Zone '%s' Type to 'Living' (Unconditioned only allowed in Research mode)",      Name )
         endif  }
   "reset Zone:Type"    Zone:Type =
      {  if (ResProj:ZonalControl == 0)
         then  1   ; Conditioned
         else  2   ; Living
         endif  }
END
;*************************************************************************



;*************************************************************************
;*************************************************************************

ENDFILE

