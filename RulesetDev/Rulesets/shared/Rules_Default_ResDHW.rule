; -------------------------------------------------------------------------
; Rules pertaining to:   Defaulting the Proposed Building Model - focusing on DHW properties
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2014, California Energy Commission
; Copyright (c) 2012-2014, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
;STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------

ENUM_PROPERTIES_VALUE   ; ensures retrieval/logic/us of enum properties assume numeric value (alternative is ENUM_PROPERTIES_STRING)

; SAC 10/25/16 - new rulelist to default DHW systems, heaters & simulation properties
;*************************************************************************
RULELIST "ProposedInput_DHWEquipment" 0 0 0 0
;*************************************************************************
   ;--------------------------------------------------------------------
   ; ProposedInput: DHW Rules
   ;--------------------------------------------------------------------

   ; SAC 1/7/20 - DHWSolarSys (tic #1013)
   "Default DHWSolarSys data"    Proj:Action =
      {  if (ComponentCount( DHWSolSys ) < 1) then  UNCHANGED
         else  EvalRulelist( "Default_DHWSolarSys" )  endif  }

	"Default ResProj:CSEDHWUseMethod"	ResProj:CSEDHWUseMethod	= {
      if (StdsVersionYr > 2016 .OR. DRtgRefRunID == 2014)		; SAC 4/15/16 - ensure new DHWUseMethod for RESNET DRtg ref run
      then	"New (via wsDayUse)"
      else	"Old (via wsUse)"
      endif  }

   "Default ResDHWSys:CentralRecircType"     ResDHWSys:CentralRecircType =    ; default to "Non-Central" - SAC 02/13/21 (tic #1260)
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190200 ))
         then  0
         else  UNCHANGED  endif  }

   "Force reset of ResDHWSys:CentralDHW if not a central type"    ResDHWSys:Action  =     ; SAC 10/25/22
      {  if (LocalStatus( CentralDHW ) > 4 .AND. IfValidAnd( CentralDHW > 0 ) .AND.
             CentralRecircType < 1)
         then  EvalRulelist( "ForceReset_DHWSys_CentralDHW", 1 )
         else  UNCHANGED  endif  }
	"Default ResDHWSys:CentralDHW"			ResDHWSys:CentralDHW		=     ; SAC 02/13/21 (tic #1260)
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190200 ))
         then  if (CentralRecircType > 0)
               then  1
               else  0  endif
         else  0  endif  }   ; SAC 12/23/13 - revised default which was previously:  ResProj:IsMultiFamily  }	; SAC 12/10/13

	"Default ResDHWSys:MFamDistType"       ResDHWSys:MFamDistType =      ; SAC 02/13/21 (tic #1260)
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190200 ))
         then  if (CentralRecircType > 1)
               then  5056     ; "Multi-family: Recirculating with no control (continuous pumping)"
               else  0  endif
         else  UNCHANGED  endif  }

   "Force reset of ResDHWSys:CentralDHWType if need be"     ResDHWSys:Action  =     ; SAC 1/1/20 (tic #862)
      {  if (IfValidAnd( ResDHWSys:CentralDHWType >= 1 ) .AND. (IfValidAnd( ResProj:IsMultiFamily < 1 ) .OR. CentralDHW < 1))
         then  EvalRulelist( "ForceReset_DHWSys_CentralDHWType", 1 )
         else  UNCHANGED  endif  }
   "Default ResDHWSys:CentralDHWType"     ResDHWSys:CentralDHWType  =     ; SAC 1/1/20 (tic #862)
      {  if (IfValidAnd( ResProj:IsMultiFamily < 1 ) .OR. CentralDHW < 1) then  UNDEFINED
         else  1  endif  }   ; 1-Other / 2-HPWH
   "Set ResDHWSys:CentralDHWTypeVal"      ResDHWSys:CentralDHWTypeVal  =     ; SAC 1/3/20 (tic #862)
      {  if (IfValidAnd( CentralDHWType > 0 )) then  CentralDHWType
         else  0  endif  }

   "Force de-assignment of heaters 2-6 when CentralDHWType = HPWH"            ResDHWSys:Action =         ; SAC 02/10/21 (tic #1219)
      {  if (CentralDHWTypeVal != 2 .OR. Proj:RunAbbrev != "u") then  UNCHANGED
         else if (LocalCompAssigned( DHWHeater[2] ) .OR.
                  LocalCompAssigned( DHWHeater[3] ) .OR. LocalCompAssigned( DHWHeater[4] ) .OR.
                  LocalCompAssigned( DHWHeater[5] ) .OR. LocalCompAssigned( DHWHeater[6] ))
         then  EvalRulelist( "ForceReset_DHWSys_DHWHeaters_2thru6", 1 )
         else  UNCHANGED  endif endif  }
   "Force de-assignment of (non-CHPWH) heater #1 when CentralDHWType = HPWH"  ResDHWSys:Action =         ; SAC 02/10/21 (tic #1219)
      {  if (CentralDHWTypeVal != 2 .OR. Proj:RunAbbrev != "u" .OR. IfValidAnd( DHWHeater[1]:IsCentralHPWH > 0 )) then  UNCHANGED
         else if (LocalCompAssigned( DHWHeater[1] ))
         then  EvalRulelist( "ForceReset_DHWSys_DHWHeaters_1", 1 )
         else  UNCHANGED  endif endif  }

   "Default Proj:SimulateCentralDHWBranches" Proj:SimulateCentralDHWBranches = {  1  }   ; SAC 10/30/19 - flag indicating whether or not to simulate central DHW system branches (in CSE)    ; SAC 11/06/19 - default 0->1

   "Blast user-defined ResDHWSys:CSEWaterUseWasteFactor if not EnableResearchMode"  ResDHWSys:Action =
      {  if ( IfValidAnd( Proj:EnableResearchMode > 0 ) .OR.
              ( LocalStatus( CSEWaterUseWasteFactor ) < 5 .AND.
                LocalStatus( CSEFaucetDrawWaste ) < 5 .AND.
                LocalStatus( CSEShowerDrawWaste ) < 5 .AND.
                LocalStatus( CSEBathDrawWaste   ) < 5 .AND.
                LocalStatus( CSECWashrDrawWaste ) < 5 .AND.
                LocalStatus( CSEDWashrDrawWaste ) < 5 ) ) then  UNCHANGED
         else  EvalRulelist( "Blast_DHWSys_CSEWaterUseWasteFactor", 1 )  endif  }

   "Blast Proj:HaveShwrDrnHtRecov & ShwrDRAINHREFF if BypassRuleLimits not activated"  ; SAC 1/12/19
      Proj:Action  = {
         if ((LocalStatus( HaveShwrDrnHtRecov ) > 4 .OR. LocalStatus( ShwrDRAINHREFF ) > 4) .AND.
             IfValidAnd( ResProj:BypassRuleLimits > 0 )==0)
         then  EvalRulelist( "BlastInputs_OldShwrDrnHtRecov" )
         else  UNCHANGED  endif  }

	; DHW use #define values - SAC 3/15/16
	"Default Proj:ShwrFLOWF"				Proj:ShwrFLOWF					= {	1.0  }
   "Default Proj:HaveShwrDrnHtRecov"   Proj:HaveShwrDrnHtRecov    = {   0    }  ; SAC 2/16/18 (tic #978)  
	;"Default Proj:ShwrDRAINHREFF"			Proj:ShwrDRAINHREFF			= {	0    }
   ; SAC 10/18/17 - force default of Proj:ShwrDRAINHREFF via rulelist only for code vontage < 2019
; SAC 1/12/19 - no need to force Proj:ShwrDRAINHREFF for <2019 vint models ??
;   "Default of Proj:ShwrDRAINHREFF if not user-defined (for code vintages < 2019)"    Proj:Action  = {
;         if (LocalStatus( ShwrDRAINHREFF ) > 6 .AND. EnergyCodeYearNum >= 2019) then  UNCHANGED
;         else  EvalRulelist( "ForceDefault_Proj_ShwrDRAINHREFF", 1 )  endif  }
	"Default Proj:CwshHOTF"					Proj:CwshHOTF					= {	0.22 }
	"Default Proj:CwshUSEF"					Proj:CwshUSEF					= {	2.03 }
	"Default Proj:FaucHOTF"					Proj:FaucHOTF					= {	0.5  }
	"Default Proj:FaucFlowF"				Proj:FaucFlowF					= {	1    }
	"Default Proj:BathFLOWF"				Proj:BathFLOWF					= {	1    }
	"Default Proj:BathDRAINHREFF"			Proj:BathDRAINHREFF			= {	0    }
	"Default Proj:DwshFLOWF"				Proj:DwshFLOWF					= {	1    }
   ; SAC 12/6/18 - updated DHW draw profile include file to latest combined SFam/MFam (tic #?? no explicit ticket)
   ; SAC 2/28/19 - restored use of DHWDUSF & DHWDUMF for PRE-2019 analysis (to ensure equivalent results)
   ; revised to DHWDU2.txt for 2019.2.0 and later releases - SAC 03/16/21
   ; switch ResProj:EnergyCodeYearNum to Proj:CompCodeBase for CBECC MFam compatibility - SAC 03/06/23
	"Default Proj:CSE_DHWUseIncFile"		Proj:CSE_DHWUseIncFile		= {
      if (IfValidAnd( ResProj:CSEDHWUseMethod = 1 )) then  UNDEFINED
      else if (AnalysisVersion >= 190200) then "DHWDU2.txt"
      else if (IfValidAnd( Proj:CompCodeBase >= 2019 )) then  "DHWDU.txt"
      else if (IfValidAnd( ResProj:IsMultiFamily < 0.5 )) then  "DHWDUSF.txt"  else  "DHWDUMF.txt"
      endif endif endif endif  }
	"Default Proj:CSE_DHWUseIncFileHashID"	Proj:CSE_DHWUseIncFileHashID	= {
      if (IfValidAnd( ResProj:CSEDHWUseMethod = 1 )) then  UNDEFINED
      else  17
      endif  }

   "Set flag DHWSys:DHWSolarSysRefValid"     ResDHWSys:DHWSolarSysRefValid =     ; SAC 05/30/22
      {  if (LocalCompAssigned( DHWSolarSysRef ) > 0) then  1
         else  0  endif  }

; SAC 12/30/19 - moved these DHWSys heater assignment rules up here BEFORE certain DHWHeater defaults that can depend on # heaters assigned by DHWSystems (tic #862)
  ; SAC 5/21/13 - added a few basic DHWSys UI & defaulting rules
	"Set ResDHWSys:NumDHWHeaters"		ResDHWSys:NumDHWHeaters	= {
           if (LocalCompAssigned( DHWHeater[6] )) then  6
      else if (LocalCompAssigned( DHWHeater[5] )) then  5
      else if (LocalCompAssigned( DHWHeater[4] )) then  4
      else if (LocalCompAssigned( DHWHeater[3] )) then  3
      else if (LocalCompAssigned( DHWHeater[2] )) then  2
      else if (LocalCompAssigned( DHWHeater[1] ) .OR.
               (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2)) then  1
      else  0  endif endif endif endif endif endif  }

   "Set DHWSys:DHWHtrHVACSysRef[1-6]"  for:#Htr=(1to6)  ResDHWSys:DHWHtrHVACSysRef[#Htr]  =     ; needed to define rules that SET properties of these referenced HVACSys(es) - SAC 09/24/24 (res tic #1349, com #3629)
      {  if (LocalCompAssigned( DHWHeater[#Htr] ) == ComponentType( "ResHVACSys" )) then  DHWHeater[#Htr]  else  UNDEFINED  endif  }

	"Default ResDHWSys:HeaterMult[1]"		ResDHWSys:HeaterMult[1]		= {
      if (LocalCompAssigned( DHWHeater[1] )) then  1  else  UNDEFINED  endif  }
	"Default ResDHWSys:HeaterMult[2]"		ResDHWSys:HeaterMult[2]		= {
      if (LocalCompAssigned( DHWHeater[2] )) then  1  else  UNDEFINED  endif  }
	"Default ResDHWSys:HeaterMult[3]"		ResDHWSys:HeaterMult[3]		= {
      if (LocalCompAssigned( DHWHeater[3] )) then  1  else  UNDEFINED  endif  }
	"Default ResDHWSys:HeaterMult[4]"		ResDHWSys:HeaterMult[4]		= {
      if (LocalCompAssigned( DHWHeater[4] )) then  1  else  UNDEFINED  endif  }
	"Default ResDHWSys:HeaterMult[5]"		ResDHWSys:HeaterMult[5]		= {
      if (LocalCompAssigned( DHWHeater[5] )) then  1  else  UNDEFINED  endif  }
	"Default ResDHWSys:HeaterMult[6]"		ResDHWSys:HeaterMult[6]		= {
      if (LocalCompAssigned( DHWHeater[6] )) then  1  else  UNDEFINED  endif  }

   ; SAC 1/2/19 - rules to manage new floating point HeaterMult property
   "Blast user-defined ResDHWSys:HeaterMultFlt[*] if BypassRuleLimits not activated"   ResDHWSys:Action  = {
         if (IfValidAnd( ResProj:BypassRuleLimits > 0 )==0 .AND. IfValidAnd( Proj:EnableResearchMode > 0 )==0 .AND.
             (LocalStatus( HeaterMultFlt[1] ) > 4 .OR. LocalStatus( HeaterMultFlt[2] ) > 4 .OR. LocalStatus( HeaterMultFlt[3] ) > 4 .OR.
              LocalStatus( HeaterMultFlt[4] ) > 4 .OR. LocalStatus( HeaterMultFlt[5] ) > 4 .OR. LocalStatus( HeaterMultFlt[6] ) > 4))
         then  EvalRulelist( "ForceDefault_DHWSys_HeaterMultFlt", 1 )
         else  UNCHANGED  endif  }
   "Default ResDHWSys:HeaterMultFlt[1]"   ResDHWSys:HeaterMultFlt[1]  = {  HeaterMult[1]  }
   "Default ResDHWSys:HeaterMultFlt[2]"   ResDHWSys:HeaterMultFlt[2]  = {  HeaterMult[2]  }
   "Default ResDHWSys:HeaterMultFlt[3]"   ResDHWSys:HeaterMultFlt[3]  = {  HeaterMult[3]  }
   "Default ResDHWSys:HeaterMultFlt[4]"   ResDHWSys:HeaterMultFlt[4]  = {  HeaterMult[4]  }
   "Default ResDHWSys:HeaterMultFlt[5]"   ResDHWSys:HeaterMultFlt[5]  = {  HeaterMult[5]  }
   "Default ResDHWSys:HeaterMultFlt[6]"   ResDHWSys:HeaterMultFlt[6]  = {  HeaterMult[6]  }

   "Set ResDHWSys:CntrlHtrMultFlt[1]"     ResDHWSys:CntrlHtrMultFlt[1]  =           ; SAC 6/14/20 (tic #185)
      {  if (Proj:IsComRuleset .AND. IfValidAnd( CentralDHW > 0 ) .AND. 
             IfValidAnd( HeaterMultFlt[1] > 0 ) .AND. IfValidAnd( FloorAreaServed[1] > 0 )) 
         then  HeaterMultFlt[1]  else  UNDEFINED  endif  }
   "Set ResDHWSys:CntrlHtrMultFlt[2]"     ResDHWSys:CntrlHtrMultFlt[2]  =  
      {  if (Proj:IsComRuleset .AND. IfValidAnd( CentralDHW > 0 ) .AND. 
             IfValidAnd( HeaterMultFlt[2] > 0 ) .AND. IfValidAnd( FloorAreaServed[1] > 0 ))
         then  HeaterMultFlt[2]  else  UNDEFINED  endif  }
   "Set ResDHWSys:CntrlHtrMultFlt[3]"     ResDHWSys:CntrlHtrMultFlt[3]  =  
      {  if (Proj:IsComRuleset .AND. IfValidAnd( CentralDHW > 0 ) .AND. 
             IfValidAnd( HeaterMultFlt[3] > 0 ) .AND. IfValidAnd( FloorAreaServed[1] > 0 ))
         then  HeaterMultFlt[3]  else  UNDEFINED  endif  }
   "Set ResDHWSys:CntrlHtrMultFlt[4]"     ResDHWSys:CntrlHtrMultFlt[4]  =  
      {  if (Proj:IsComRuleset .AND. IfValidAnd( CentralDHW > 0 ) .AND. 
             IfValidAnd( HeaterMultFlt[4] > 0 ) .AND. IfValidAnd( FloorAreaServed[1] > 0 ))
         then  HeaterMultFlt[4]  else  UNDEFINED  endif  }
   "Set ResDHWSys:CntrlHtrMultFlt[5]"     ResDHWSys:CntrlHtrMultFlt[5]  =  
      {  if (Proj:IsComRuleset .AND. IfValidAnd( CentralDHW > 0 ) .AND. 
             IfValidAnd( HeaterMultFlt[5] > 0 ) .AND. IfValidAnd( FloorAreaServed[1] > 0 ))
         then  HeaterMultFlt[5]  else  UNDEFINED  endif  }
   "Set ResDHWSys:CntrlHtrMultFlt[6]"     ResDHWSys:CntrlHtrMultFlt[6]  =  
      {  if (Proj:IsComRuleset .AND. IfValidAnd( CentralDHW > 0 ) .AND. 
             IfValidAnd( HeaterMultFlt[6] > 0 ) .AND. IfValidAnd( FloorAreaServed[1] > 0 ))
         then  HeaterMultFlt[6]  else  UNDEFINED  endif  }

   ; SAC 5/10/19 - moved call setting TotNumDHWHeaters HERE to be evaluated prior to DHW CompactDistrib rules that reference it
   "Set ResDHWSys:TotNumDHWHeaters & ResProj:NumDHWEquipUnits via subordinate rulelist"      Proj:Action  = {
         EvalRulelist( "Set_ResDHWSys_TotNumDHWHeaters" )  }

	"Set ResDHWSys:FirstDHWHtrIndex"			ResDHWSys:FirstDHWHtrIndex	= {
           if (LocalCompAssigned( DHWHeater[1] ) .AND. IfValidAnd( HeaterMultFlt[1] > 0.001 )) then  1
      else if (LocalCompAssigned( DHWHeater[2] ) .AND. IfValidAnd( HeaterMultFlt[2] > 0.001 )) then  2
      else if (LocalCompAssigned( DHWHeater[3] ) .AND. IfValidAnd( HeaterMultFlt[3] > 0.001 )) then  3
      else if (LocalCompAssigned( DHWHeater[4] ) .AND. IfValidAnd( HeaterMultFlt[4] > 0.001 )) then  4
      else if (LocalCompAssigned( DHWHeater[5] ) .AND. IfValidAnd( HeaterMultFlt[5] > 0.001 )) then  5
      else if (LocalCompAssigned( DHWHeater[6] ) .AND. IfValidAnd( HeaterMultFlt[6] > 0.001 )) then  6
      else	0  endif endif endif endif endif endif  }


	"Switch from 2013 to 2016 heat pump if not in research mode"	; SAC 6/2/16 - tic #660
      ResWtrHtr:Action	= {
         if (IfValidAnd( Proj:CompCodeBase < 2016 )) then  UNCHANGED
			else if (HeaterElementType == 3 .AND. IfValidAnd( Proj:EnableResearchMode > 0 )==0)
			then	EvalRulelist( "ForceDefault_DHWHeater_ASHPType", 1 )
			else if (HeaterElementType == 5)		; = 'Heat Pump (2016)' from 2016 models or perhaps 'Heat Pump' from older 2013/16 or current models
			then	if (IfValidAnd( Proj:AnalysisVersion >= 190200 )) then  UNCHANGED  ; following not needed starting w/ 2019.2.0 - SAC 01/29/21 (tic #1260)
               else if (LocalStatus( HPWH_NEEARated ) > 0) then  UNCHANGED  ; no need for backward compat if HPWH_NEEARated already set
					else if (ASHPType == 1) then  EvalRulelist( "ForceDefault_DHWHeater_ASHPType", 1 )	; switch from 'Generic' to non-NEEA rated
					else if ((ASHPType >= 11 .AND. ASHPType <= 15) .OR. ASHPType == 19 .OR. 
								(ASHPType >= 16 .AND. ASHPType <= 17 .AND. IfValidAnd( Proj:EnableResearchMode > 0 )) .OR.
								(ASHPType >= 21 .AND. ASHPType <= 23)) then  EvalRulelist( "BackwardCompat_DHWHeater_ASHPType", 1 )
					else if (LocalStatus( ASHPType ) < 7 .AND. LocalStatus( EnergyFactor ) == 7)	; ASHPType not user-defined but EnergyFactor IS
					then	EvalRulelist( "ForceDefault_DHWHeater_ASHPType", 1 )
					else	UNCHANGED  endif endif endif endif endif
			else	UNCHANGED  endif endif endif  }

   ; SAC 2/28/18 - switched from defaulting to Elec htr when NOT ResProj:NatGasAvailable -to- Proj:GasType != NatGas (tic #992)
	"Default ResWtrHtr:HeaterElementType"		ResWtrHtr:HeaterElementType	= {
      if (Proj:GasType != 1)
      then  0   ; Electric Resistance		- SAC 7/9/13 - updated default per MJB request
      else	1   ; Natural Gas     - SAC 5/17/13 - Oil no longer grouped w/ NatGas here		; SAC 11/9/15 - now simply 'Gas'
      endif  }

   "Set ResWtrHtr:HeaterType to handle lots of defaulting and UI - needed to differentiate original Elec/Gas ConsInst from new CSE model"  ; SAC 3/1/18 (tic #993)
      ResWtrHtr:HeaterType  = {
         if (HeaterElementType == 1 .AND. TankType == 10 .AND.
             IfValidAnd( ResProj:EnergyCodeYearNum < 2019 )==0)
         then  9
         else  TankType
         endif  }

   "Force defaulting of certain 'Consumer Instantaneous (UEF)' DHWHeater inputs"  ; SAC 3/1/18 (tic #993)
      ResWtrHtr:Action  = {
         if (HeaterType == 9 .AND. IfValidAnd( ResProj:BypassRuleLimits > 0 )==0 .AND.
             (LocalStatus( RatedFlow  ) > 6 .OR. LocalStatus( AnnFuelUse  ) > 6 .OR. 
              LocalStatus( AnnElecUse ) > 6 .OR. LocalStatus( StandbyElec ) > 6))
         then  EvalRulelist( "ForceReset_DHWHeaterPerformance_ConsumerInstantaneousUEF", 1 )
         else  UNCHANGED  endif  }

   "Default (and possibly reset) NEEA & UEF HPWHs flags"    Proj:Action =
      {  if (IfValidAnd( Proj:AnalysisVersion >= 190200 ))
         then  EvalRulelist( "DHWHeater_Default_HPWHFlags" )
         else  EvalRulelist( "DHWHeater_Default_HPWHFlags_Before190200" )  endif  }

   ; SAC 1/14/19 - added default of HPWHBrand since auto enum defaults not triggered by default rule above
   "Default ResWtrHtr:HPWHBrand"	ResWtrHtr:HPWHBrand	= {
         if (HeaterElementType == 5 .AND. HPWH_NEEARated) then  1
         else  UNCHANGED  endif  }

   "Default ResWtrHtr:HPWHComModel"    ResWtrHtr:HPWHComModel	=        ; SAC 02/01/21 (tic #1260)
      {  if (HeaterElementType == 5 .AND. HPWH_ComProduct) then  1
         else  0  endif  }

   ; ID concatenating fuel and tank type used for range checking"   
  "Set ResWtrHtr:FuelTankTypeRangeID"    ResWtrHtr:FuelTankTypeRangeID  = {
    if( HeaterElementType = 5 .AND.
         IsUEF )
    then 5099
    else (HeaterElementType * 1000) + HeaterType 
    endif }

   ; SAC 4/24/17 - rule to transfer user-defined ASHPType -> new HPWHBrand & HPWHModel properties (tic #829)
   "Backward compat for ASHPType"   ResWtrHtr:Action  = {
         if (HeaterElementType == 5 .AND. HPWH_NEEARated > 0 .AND.
             LocalStatus( ASHPType ) > 6)
         then  EvalRulelist( "BackwardCompat_ASHPType_to_HPWHModel", 1 )
         else if (HPWHBrand == 2)   ; old "- simulation type -"
         then  EvalRulelist( "BackwardCompat_SimTypeHPWHModel_to_BrandHPWHModel", 1 )
         else  UNCHANGED  endif endif  }

   ; ResWtrHtr:CentralHPWHCprsrType - only set via rules/library items   ; SAC 3/5/20 (Colmac)

   ; allow ResWtrHtr:HPWHBrand & ResWtrHtr:HPWHModel to default via enums
   ; SAC 5/23/17 - wrapped HPWHModel in IfValidAnd() check for 2013 models where this property has no enumeration list and is therefore undefined
   ; HPWH_ComProduct & HPWHComModel - SAC 02/01/21 (tic #1260)
   ; added check for IsCentralHPWH > 0 - SAC 03/02/22
   "Default ResWtrHtr:ASHPType"  ResWtrHtr:ASHPType  =               ; incremented CHPWH ASHPType value by 100 to avoid conflict w/ new Rheem NEEA models - SAC 12/28/22
      {  if (HeaterElementType == 5 .AND. (HPWH_NEEARated > 0 .OR. HPWH_ComProduct > 0 .OR. IfValidAnd( IsCentralHPWH > 0 )))
         then  if (CentralHPWHCprsrType > 0)
               then  mod( CentralHPWHCprsrType, 100 ) + 100
               else if (HPWH_NEEARated > 0 .AND. IfValidAnd( HPWHModel > 1 ))
               then  mod( HPWHModel, 100 )
               else if (HPWH_ComProduct > 0 .AND. IfValidAnd( HPWHComModel > 1 ))
               then  mod( HPWHComModel, 100 )
               else  0  endif endif endif
         else  0  endif  }

; moved into defaulting rulelists by version (called above) - SAC 01/29/21 (tic #1260)
;   "Set ResWtrHtr:IsUEFHtPump - Whether or not DHW heater is a UEF-rated heat pump"   
;      ResWtrHtr:IsUEFHtPump  = {
;         if (HPWH_NEEARated .OR. HeaterElementType != 5) then  0  else  1  endif  }    ; SAC 1/14/19 - switched default from '0' to '1' for Non-NEEA HPWHs  / SAC 1/21/19 - revised again to ensure set '1' only for HPs

  "Set ResWtrHtr:IsUEF - Whether or not DHW heater rated by UEF"  ResWtrHtr:IsUEF  = {
    if( HeaterElementType = 5 .AND.
        IsUEFHtPump = 1 )
    then 1
    else switch ( HeaterType )
     ;case  9 :   1      ; "UEF-rated Instantaneous"   - ???
      case 10 :   1      ; "Consumer Instantaneous (UEF)"             
     ;case 11 :   " "	   ; "Commercial Instantaneous (TE)"            
      case 12 :   1      ; "Consumer Storage (UEF)"                   
     ;case 13 :   " "    ; "Commercial Storage (TE & SBL)"            
      case 14 :   1      ; "Residential-Duty Commercial Storage (UEF)"
      case 15 :   1      ; "Residential-Duty Commercial Instantaneous (UEF)"
      default :   0	
      endswitch 
    endif }

   ; SAC 4/15/16 - added logic to allow *X CSE models in RESNET2014 dsgn rtg ref runs
   ; SAC 4/15/16 - use OLD Resistance CSE mechanism for TankTypes != SmallStor (tic #636)
   ; SAC 6/14/18 - toggle off tank location for Elec - Small Storage (tic #871, run 12)  was:  .OR. (HeaterElementType == 0 .AND. HeaterType == 6))
   ; SAC 6/20/18 - restored tank location for Elec - Small Storage and ADD it for Elec - Consumer Storage (UEF) (tic #871)
	"Set ResWtrHtr:ShowTankLocation"			ResWtrHtr:ShowTankLocation	=              ; HPWH_ComProduct - SAC 02/01/21 (tic #1260)
   {  if (IfValidAnd( ResProj:StdsVersionYr < 2017 ) .AND. IfValidAnd( ResProj:DRtgRefRunID = 2014 )==0) then  0
      else if ( (HeaterElementType == 5 .AND. ((HPWH_NEEARated < 0.5 .AND. HPWH_ComProduct < 0.5) .OR. ASHPType > 0)) .OR.
                (HeaterElementType == 0 .AND. (HeaterType == 6 .OR. HeaterType == 12)) )
      then  1  else  0
      endif endif  }
	"Port ResWtrHtr:ASHPTankOutside -> TankOutside"		ResWtrHtr:Action	= {
      if (LocalStatus( ASHPTankOutside ) > 6 .AND. LocalStatus( TankOutside ) < 7)		; SAC 4/14/16
      then  EvalRulelist( "Force_ASHPTankOutside_to_TankOutside", 1 )  else  UNCHANGED  endif  }
	"Port ResWtrHtr:ASHPTankZone -> TankZone"				ResWtrHtr:Action	= {
      if (LocalStatus( ASHPTankZone ) > 6 .AND. LocalStatus( TankZone ) < 7)
      then  EvalRulelist( "Force_ASHPTankZone_to_TankZone", 1 )  else  UNCHANGED  endif  }

;"debug" ResProj:Action = { PostMessageToLog( "Before ResWtrHtr:TankOutside rule:  StdsVersionYr = %g  /  ClimateZone = %g  /  StdDesignBase = %g  /  BldgTypeTblStr = %s", StdsVersionYr, ClimateZone, StdDesignBase, BldgTypeTblStr )  }
   ; SAC 12/7/18 - revised logic to include reference to new T24RClimateZoneCodeBase:HPWHLocWhenNoGarage for 2019+ models w/ no attached garage (tic #990)
	"Default ResWtrHtr:TankOutside"		ResWtrHtr:TankOutside	= {
      if (ShowTankLocation < 0.5) then  UNDEFINED
      else if (IfValidAnd( ResProj:StdsVersionYr >= 2020 ) .AND. ComponentCount( ResGarage ) < 1 .AND. MaxAll( ResOtherZn:AreaParking ) < 1 .AND.
               T24RClimateZoneCodeBase:HPWHLocWhenNoGarage( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) == "Outdoor")
      then  1
      else if (ComponentCount( Garage ) < 1 .AND. ComponentCount( ResZn ) < 1)
      then  1
      else  0
      endif endif endif  }
	"Default ResWtrHtr:TankZone"			ResWtrHtr:TankZone		= {
      if (ShowTankLocation < 0.5 .OR. IfValidAnd( TankOutside > 0 )) then  UNDEFINED
		else if (ComponentCount( ResGarage ) > 0) then  MaxAllComp( ResGarage:Area )
		else if (MaxAll( ResOtherZn:AreaParking ) > 0) then  MaxAllComp( ResOtherZn:AreaParking )
		else if (GlobalCompAssigned( ResProj:DfltMFamLaundryZn ) > 0) then  ResProj:DfltMFamLaundryZn
		else if (ComponentCount( ResCrawlSpc ) > 0) then  MaxAllComp( ResCrawlSpc:Area )
		else if (ComponentCount( ResAttic ) > 0) then  MaxAllComp( ResAttic:FloorArea )
		else  undefined  endif endif endif endif endif endif  }
   "Default ResWtrHtr:ASHPSplit"         ResWtrHtr:ASHPSplit      = {
      if (HeaterElementType .NE. 5) then  UNDEFINED
      else if (HPWH_NEEARated < 0.5) then  0
      else  switch( ASHPType )
               case 16 :  1      ; "Sanden 40" - RJH 9/30/24 Sanden now SANCO2
               case 17 :  1      ; "Sanden 80" - RJH 9/30/24 Sanden now SANCO2
               case 18 :  1      ; "Sanden 120" - RJH 9/30/24 added
               case 25 :  1      ; "Harvest Thermal 40" - RJH 9/30/24 added
               case 26 :  1      ; "Harvest Thermal 40" - RJH 9/30/24 added
               case 27 :  1      ; "Harvest Thermal 40" - RJH 9/30/24 added
           ;    case 45 :  1      ; "Colmac CxA20"  - SAC 3/9/20 (Colmac)
           ;    case 46 :  1      ; "Nyle C185A external"  - SAC 4/19/20
           ;    case 47 :  1      ; "Nyle C250A external"  - SAC 4/19/20
               case 148 :  1      ; "Colmac CxV-5"
               case 149 :  1      ; "Colmac CxA-10"
               case 150 :  1      ; "Colmac CxA-15"
               case 145 :  1      ; "Colmac CxA-20"
               case 151 :  1      ; "Colmac CxA-25"
               case 152 :  1      ; "Colmac CxA-30"
               case 153 :  1      ; "Nyle C25A"
               case 154 :  1      ; "Nyle C60A"
               case 155 :  1      ; "Nyle C90A"
               case 156 :  1      ; "Nyle C125A"
               case 146 :  1      ; "Nyle C185A"
               case 147 :  1      ; "Nyle C250A"
               case 167 :  1      ; "Nyle C60A-CWP"        ; SAC 6/23/20 - added cold wthr package presets
               case 168 :  1      ; "Nyle C90A-CWP"
               case 169 :  1      ; "Nyle C125A-CWP"
               case 170 :  1      ; "Nyle C185A-CWP"
               case 171 :  1      ; "Nyle C250A-CWP"
               case 157 :  1      ; "Sanden GS3-45HPA-US"   ; used to map to 17 - Sanden 80
               case 177 :  1      ; "Colmac CxV-5 (MP)"      ; multi pass additions - SAC 01/18/22
               case 178 :  1      ; "Colmac CxA-10 (MP)"
               case 179 :  1      ; "Colmac CxA-15 (MP)"
               case 180 :  1      ; "Colmac CxA-20 (MP)"
               case 181 :  1      ; "Colmac CxA-25 (MP)"
               case 182 :  1      ; "Colmac CxA-30 (MP)"
               case 183 :  1      ; "Rheem HPHD-60HNU (horiz MP)"
               case 184 :  1      ; "Rheem HPHD-60VNU (vertical MP)"
               case 185 :  1      ; "Rheem HPHD-135HNU (horiz MP)"
               case 186 :  1      ; "Rheem HPHD-135VNU (vertical MP)"
               case 105 :  1      ; "NyleC60A_MP"      ; more multi pass options - SAC 02/23/22
               case 106 :  1      ; "NyleC90A_MP"
               case 107 :  1      ; "NyleC125A_MP"
               case 108 :  1      ; "NyleC185A_MP"
               case 109 :  1      ; "NyleC250A_MP"
               case 125 :  1      ; "NyleC60A_CWP_MP"
               case 126 :  1      ; "NyleC90A_CWP_MP"
               case 127 :  1      ; "NyleC125A_CWP_MP"
               case 128 :  1      ; "NyleC185A_CWP_MP"
               case 129 :  1      ; "NyleC250A_CWP_MP"
               default :  0
            endswitch  endif endif  }
   ; added default (Std design) logic to locate in garage if present - SAC 03/31/22 (Res tic #1327)
	"Default ResWtrHtr:ASHPTSrcOutside"		ResWtrHtr:ASHPTSrcOutside	= {
      if (HeaterElementType .NE. 5) then  UNDEFINED
      else if (IfValidAnd( ResProj:HasGarage > 0 ) .AND.
               (SumAll( ResOtherZn:AreaParking ) > 0 .OR. ComponentCount( ResGarage ) > 0))
      then  0  else  1  endif endif  }
   ; removed restriction to ASHPSplit > 0 for defaulting ASHPTSrcZone - SAC 03/31/22 (Res tic #1327)
	"Default ResWtrHtr:ASHPTSrcZone"			ResWtrHtr:ASHPTSrcZone		= {
      if (HeaterElementType .NE. 5 .OR. IfValidAnd( ASHPTSrcOutside > 0 )) then  UNDEFINED
      else if (LocalCompAssigned( TankZone ) > 0) then  TankZone
		else if (MaxAll( ResOtherZn:AreaParking ) > 0) then  MaxAllComp( ResOtherZn:AreaParking )
      else if (ComponentCount( ResGarage ) > 0) then  MaxAllComp( ResGarage:Area )
      else if (GlobalCompAssigned( ResProj:DfltMFamLaundryZn ) > 0) then  ResProj:DfltMFamLaundryZn
      else if (ComponentCount( ResCrawlSpc ) > 0) then  MaxAllComp( ResCrawlSpc:Area )
      else if (ComponentCount( ResAttic ) > 0) then  MaxAllComp( ResAttic:FloorArea )
      else  undefined  endif endif endif endif endif endif endif  }

; replaced w/ DemRespCompat - SAC 12/11/20
;   "Set ResWtrHtr:IsDemandResponse - flag set if this DHW heater should be simulated w/ a demand response setpoint schedule"
;      ResWtrHtr:IsDemandResponse  = {
;         if (HeaterElementType == 5 .AND. HPWH_NEEARated > 0 .AND. ASHPType == 36)  ; "GE2014 80 Eff DR"
;         then  1  else  0  endif  }

   "Blast user-defined InputRating for certain TankTypes"  ; SAC 6/11/18 & 6/12/18 (tic #940)
      ResWtrHtr:Action  = {
         if (LocalStatus( InputRating ) < 7 .OR. TankType == 3 .OR. TankType == 13)  ; Large Storage or Commercial Storage (TE & SBL)
         then  UNCHANGED
         else  EvalRulelist( "ForceReset_DHWHeater_InputRating", 1 )
         endif  }
   "Set ResWtrHtr:ShowInputRating"     ResWtrHtr:ShowInputRating  = 
      {  if (HeaterElementType != 3 .AND. HPWH_NEEARated != 1 .AND.
             (TankType == 3 .OR. TankType == 13))
         then  1  else  0  endif  }

; SAC 5/17/13 - Oil no longer grouped w/ NatGas here - rules updated to duplicate NatGas logic for new/separate Oil option
; SAC 6/13/18 - updated property name to InputRatingSim to accommodate conditionally-required InputRating (leaving undefined when not an input) (tic #940)
	"Set ResWtrHtr:InputRatingSim"			ResWtrHtr:InputRatingSim	= {	
		if (LocalStatus( InputRating ) > 6) then  InputRating
		else
		switch (HeaterElementType)
			case  0 :	      	; (watts)   "Electric Resistance" 
                     switch (HeaterType)
               			case  2 :    36000		; "Large Instantaneous"       - SAC 6/14/18
               			case  3 :    13500		; "Large Storage"             - SAC 6/14/18
               			case  5 :     8000		; "Small Instantaneous"       - SAC 6/14/18
               			case  6 :     4500		; "Small Storage"             - SAC 6/14/18 / SAC 6/20/18
               			case 10 :     8000		; "Consumer Instantaneous (UEF)"             
               			case 11 :    36000		; "Commercial Instantaneous (TE)"            
               			case 12 :     4500		; "Consumer Storage (UEF)"    - SAC 6/20/18  
               			case 13 :    13500		; "Commercial Storage (TE & SBL)"            
                        case 15 :    36000      ; "Residential-Duty Commercial Instantaneous (UEF)"
							   default :	  4500      ;                             - SAC 6/20/18
							endswitch
			case  1 :   			; (Btu/hr)  "Natural Gas"   
                     switch (HeaterType)
                        case  2 :   210000      ; "Large Instantaneous"       - SAC 6/14/18
                        case  3 :   150000      ; "Large Storage"             - SAC 6/14/18
                        case  9 :  UNDEFINED	   ; "UEF-rated Instantaneous"
							   case  5 :   195000		; "Small Tankless"
               			case 10 :   190000		; "Consumer Instantaneous (UEF)"             
               			case 11 :   210000		; "Commercial Instantaneous (TE)"            
               			case 12 :    40000		; "Consumer Storage (UEF)"                   
               			case 13 :   150000		; "Commercial Storage (TE & SBL)"            
               			case 14 :    76000		; "Residential-Duty Commercial Storage (UEF)"
                        case 16 :   300000      ; "Commercial Packaged Boiler"      ; SAC 12/19/19 - to facilitate new central gas std design DHW system (tic #862)
							   default :	 40000		; "Small Storage"
							endswitch
			case  2 :   			; (Btu/hr)  "Propane"             
							if (HeaterType == 5) then  195000		; "Small Tankless"
							else	40000  endif							; "Small Storage"
			case  3 :    8000    ; (watts)   "Heat Pump"           
			case  4 :   			; (Btu/hr)  "Oil"   
							if (HeaterType == 5) then  195000		; "Small Tankless"
							else	40000  endif							; "Small Storage"
			case  5 :    5000		; (watts)  "Heat Pump"              
			default :	UNDEFINED
		endswitch  endif  }
	"Set ResWtrHtr:InputRatingUnits"		ResWtrHtr:InputRatingUnits	= {
		switch (HeaterElementType)
			case  0 :	"watts"   ; "Electric Resistance" 
			case  1 :   "Btu/hr"  ; "Natural Gas"   
			case  2 :   "Btu/hr"  ; "Propane"             
			case  3 :   "watts"   ; "Heat Pump"           
			case  4 :   "Btu/hr"  ; "Oil"   
			case  5 :   "watts"   ; "Heat Pump" 
			default :	" "
		endswitch  }

   ; moved UP to here in evaluation order to define NumDwellingUnits before being referenced in DHWSys rules - SAC 12/30/19 (tic #862)
   "Set ResZn:Mult"     ResZn:Mult = {  if (IfValidAnd( ResZnGrp:Mult > 0 )) then  ResZnGrp:Mult  else  1  endif  }   ; SAC 04/21/23 (tic #3392)
	"Default DwellUnit:Count"					DwellUnit:Count				    = {  1  }
	"Set DwellUnit:CountWithMult"				DwellUnit:CountWithMult		    = {  Count * Parent( Mult )  }     ; SAC 04/26/23 (tic #3392)
	"Set ResZn:NumDwellingUnits"		      ResZn:NumDwellingUnits	       = {  if (ResProj:IsMultiFamily < 0.5) then  0  else  SumChildren( DwellUnit:Count )  endif  }
   "Set ResZn:NumDwellingUnitsWithMult"   ResZn:NumDwellingUnitsWithMult = {  if (ResProj:IsMultiFamily < 0.5) then  0  else  SumChildren( DwellUnit:CountWithMult )  endif  }   ; SAC 04/26/23 (tic #3392)
	"Set ResProj:NumDwellingUnits"		   ResProj:NumDwellingUnits	    = {  if (ResProj:IsMultiFamily < 0.5) then  1  else  SumAll( ResZn:NumDwellingUnitsWithMult )  endif  }

   "Set DwellUnit:CentralDHWDUCount"   DwellUnit:CentralDHWDUCount =       ; SAC 08/20/22 (CUAC)
      {  if (IfValidAnd( DwellUnitTypeRef:DHWSysRef[1]:CentralDHW > 0 )) then  Count  else  UNDEFINED  endif  }
   "Set ResZn:CentralDHWDUCount"       ResZn:CentralDHWDUCount = {  SumChildren( DwellUnit:CentralDHWDUCount )  }

   "Set ResZn:NumDwellingUnitsByBedrmsWithMult[1] - Studio"    ResZn:NumDwellingUnitsByBedrmsWithMult[1] =      ; SAC 08/05/22 (CUAC)
      {  if (  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 0 ))
         then  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 0 ) * ValidOr( ResZnGrp:Mult, 1 )  else  UNDEFINED  endif  }
   "Set ResZn:NumDwellingUnitsByBedrmsWithMult[2] - 1 Bdrm"    ResZn:NumDwellingUnitsByBedrmsWithMult[2] = 
      {  if (  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 1 ))
         then  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 1 ) * ValidOr( ResZnGrp:Mult, 1 )  else  UNDEFINED  endif  }
   "Set ResZn:NumDwellingUnitsByBedrmsWithMult[3] - 2 Bdrm"    ResZn:NumDwellingUnitsByBedrmsWithMult[3] = 
      {  if (  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 2 ))
         then  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 2 ) * ValidOr( ResZnGrp:Mult, 1 )  else  UNDEFINED  endif  }
   "Set ResZn:NumDwellingUnitsByBedrmsWithMult[4] - 3 Bdrm"    ResZn:NumDwellingUnitsByBedrmsWithMult[4] = 
      {  if (  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 3 ))
         then  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 3 ) * ValidOr( ResZnGrp:Mult, 1 )  else  UNDEFINED  endif  }
   "Set ResZn:NumDwellingUnitsByBedrmsWithMult[5] - 4 Bdrm"    ResZn:NumDwellingUnitsByBedrmsWithMult[5] = 
      {  if (  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 4 ))
         then  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 4 ) * ValidOr( ResZnGrp:Mult, 1 )  else  UNDEFINED  endif  }
   "Set ResZn:NumDwellingUnitsByBedrmsWithMult[6] - 5 Bdrm"    ResZn:NumDwellingUnitsByBedrmsWithMult[6] = 
      {  if (  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 5 ))
         then  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 5 ) * ValidOr( ResZnGrp:Mult, 1 )  else  UNDEFINED  endif  }
   "Set ResZn:NumDwellingUnitsByBedrmsWithMult[7] - 6 Bdrm"    ResZn:NumDwellingUnitsByBedrmsWithMult[7] = 
      {  if (  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 6 ))
         then  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit = 6 ) * ValidOr( ResZnGrp:Mult, 1 )  else  UNDEFINED  endif  }
   "Set ResZn:NumDwellingUnitsByBedrmsWithMult[8] - >6 Bdrm"   ResZn:NumDwellingUnitsByBedrmsWithMult[8] = 
      {  if (  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit > 6 ))
         then  SumChildrenIf( DwellUnit:Count, DwellUnit:NumBedroomsPerUnit > 6 ) * ValidOr( ResZnGrp:Mult, 1 )  else  UNDEFINED  endif  }

   "Set ResProj:NumDwellingUnitsByBedrms[1] - Studio"     ResProj:NumDwellingUnitsByBedrms[1] =    ; SAC 08/10/22 (CUAC)   ; SAC 09/18/23 (OldCUAC)
      {  if (IfValidAnd( CUACReport > 0 ) .AND. IfValidAnd( CUAC_OldAccessDB > 0 )) then  UNCHANGED
         else  SumAll( ResZn:NumDwellingUnitsByBedrmsWithMult[1] )  endif  }
   "Set ResProj:NumDwellingUnitsByBedrms[2] - 1 Bdrm"     ResProj:NumDwellingUnitsByBedrms[2] = 
      {  if (IfValidAnd( CUACReport > 0 ) .AND. IfValidAnd( CUAC_OldAccessDB > 0 )) then  UNCHANGED
         else  SumAll( ResZn:NumDwellingUnitsByBedrmsWithMult[2] )  endif  }
   "Set ResProj:NumDwellingUnitsByBedrms[3] - 2 Bdrm"     ResProj:NumDwellingUnitsByBedrms[3] = 
      {  if (IfValidAnd( CUACReport > 0 ) .AND. IfValidAnd( CUAC_OldAccessDB > 0 )) then  UNCHANGED
         else  SumAll( ResZn:NumDwellingUnitsByBedrmsWithMult[3] )  endif  }
   "Set ResProj:NumDwellingUnitsByBedrms[4] - 3 Bdrm"     ResProj:NumDwellingUnitsByBedrms[4] = 
      {  if (IfValidAnd( CUACReport > 0 ) .AND. IfValidAnd( CUAC_OldAccessDB > 0 )) then  UNCHANGED
         else  SumAll( ResZn:NumDwellingUnitsByBedrmsWithMult[4] )  endif  }
   "Set ResProj:NumDwellingUnitsByBedrms[5] - 4 Bdrm"     ResProj:NumDwellingUnitsByBedrms[5] = 
      {  if (IfValidAnd( CUACReport > 0 ) .AND. IfValidAnd( CUAC_OldAccessDB > 0 )) then  UNCHANGED
         else  SumAll( ResZn:NumDwellingUnitsByBedrmsWithMult[5] )  endif  }
   "Set ResProj:NumDwellingUnitsByBedrms[6] - 5 Bdrm"     ResProj:NumDwellingUnitsByBedrms[6] = 
      {  if (IfValidAnd( CUACReport > 0 ) .AND. IfValidAnd( CUAC_OldAccessDB > 0 )) then  UNCHANGED
         else  SumAll( ResZn:NumDwellingUnitsByBedrmsWithMult[6] )  endif  }
   "Set ResProj:NumDwellingUnitsByBedrms[7] - 6 Bdrm"     ResProj:NumDwellingUnitsByBedrms[7] = 
      {  if (IfValidAnd( CUACReport > 0 ) .AND. IfValidAnd( CUAC_OldAccessDB > 0 )) then  UNCHANGED
         else  SumAll( ResZn:NumDwellingUnitsByBedrmsWithMult[7] )  endif  }
   "Set ResProj:NumDwellingUnitsByBedrms[8] - >6 Bdrm"    ResProj:NumDwellingUnitsByBedrms[8] = 
      {  if (IfValidAnd( CUACReport > 0 ) .AND. IfValidAnd( CUAC_OldAccessDB > 0 )) then  UNCHANGED
         else  SumAll( ResZn:NumDwellingUnitsByBedrmsWithMult[8] )  endif  }

   ; SAC 08/06/22   ; added logic to ensure CUAC_InputErrorCheck evaluated even when CUACReport !> 0 - SAC 12/29/22
   "Call rulelist to set CUAC affordable housing unit stuff"   Proj:Action =     ; added logic to prevent evaluating 'CUAC_InputErrorCheck' for 2025 analysis - SAC 01/26/23   ; SAC 09/18/23 (OldCUAC)
      {  if (IfValidAnd( CUACReport > 0 ))
         then  if (IfValidAnd( CUAC_OldAccessDB > 0 ))
               then  EvalRulelist( "CUAC_ZoneUnitCounts_OldCUAC" )
               else  EvalRulelist( "CUAC_ZoneUnitCounts" )  endif
         else if (IfValidAnd( EngyCodeYearNum <= 2022 ))
         then  EvalRulelist( "CUAC_InputErrorCheck" )
         else  UNCHANGED  endif endif  }

  ; SAC 10/24/19 - copy following rules out of Rules_CSE_Simulation_DHW to default PRIOR to defaulting new ResDHWSys:RecircPumpPwr
	; SAC 10/27/15 - fix problem where ResDHWSys:NumAssignedDUFracs not taking into account number of assigned DwellUnits of each DwellUnitType
	; SAC 12/29/19 - moved up from below to use in TankVolume defaulting (tic #862)
	"Set DwellUnitType:NumDUsSrvdPerDHWSys"	DwellUnitType:NumDUsSrvdPerDHWSys	= {	ValidOr( DHWSysAssignFrac, 0 ) * ValidOr( NumAssigningDUs, 0 )  }
	"Set ResDHWSys:NumAssignedDUFracs"		ResDHWSys:NumAssignedDUFracs	= {	if (IfValidAnd( ResProj:IsMultiFamily = 0 )) then  ResProj:NumDwellingUnits
																								else	SumRevRef( DwellUnitType:DHWSysRef[1], DwellUnitType:NumDUsSrvdPerDHWSys ) +
																										SumRevRef( DwellUnitType:DHWSysRef[2], DwellUnitType:NumDUsSrvdPerDHWSys ) +
																										SumRevRef( DwellUnitType:DHWSysRef[3], DwellUnitType:NumDUsSrvdPerDHWSys ) +
																										SumRevRef( DwellUnitType:DHWSysRef[4], DwellUnitType:NumDUsSrvdPerDHWSys ) +
																										SumRevRef( DwellUnitType:DHWSysRef[5], DwellUnitType:NumDUsSrvdPerDHWSys ) 
																								endif  }
   "Adjust ResDHWSys NumAssignedDUFracs for (Com Hotel/Motel) models"      Proj:Action =     ; SAC 02/26/22
      {  if (IsComRuleset)
         then  EvalRulelist( "AdjustCom_ResDHWSys_NumAssignedDUFracs" )
         else  UNCHANGED  endif  }

   ; SAC 12/30/19 - number of DwellUnits served by DHW heater assignment to this system (sum of fractions) (tic #862)
   ; SAC 1/5/20 - added logic for new Central HPWH system inputs (tic #862)
   "Set ResDHWSys:NumAssignedDUHtrFracs[1]"  ResDHWSys:NumAssignedDUHtrFracs[1]  =     ; NumResOtherZnsServed - SAC 03/24/23 (tic #3418)   ; fix undefined data error - SAC 04/10/23
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  (NumAssignedDUFracs + ValidOr( NumResOtherZnsServed, 0 ))
         else if (LocalCompAssigned( DHWHeater[1] ) < 1 .OR. IfValidAnd( HeaterMult[1] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  (NumAssignedDUFracs + ValidOr( NumResOtherZnsServed, 0 )) / TotNumDHWHeaters  endif endif  }
   "Set ResDHWSys:NumAssignedDUHtrFracs[2]"  ResDHWSys:NumAssignedDUHtrFracs[2]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[2] ) < 1 .OR. IfValidAnd( HeaterMult[2] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  (NumAssignedDUFracs + ValidOr( NumResOtherZnsServed, 0 )) / TotNumDHWHeaters  endif endif  }
   "Set ResDHWSys:NumAssignedDUHtrFracs[3]"  ResDHWSys:NumAssignedDUHtrFracs[3]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[3] ) < 1 .OR. IfValidAnd( HeaterMult[3] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  (NumAssignedDUFracs + ValidOr( NumResOtherZnsServed, 0 )) / TotNumDHWHeaters  endif endif  }
   "Set ResDHWSys:NumAssignedDUHtrFracs[4]"  ResDHWSys:NumAssignedDUHtrFracs[4]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[4] ) < 1 .OR. IfValidAnd( HeaterMult[4] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  (NumAssignedDUFracs + ValidOr( NumResOtherZnsServed, 0 )) / TotNumDHWHeaters  endif endif  }
   "Set ResDHWSys:NumAssignedDUHtrFracs[5]"  ResDHWSys:NumAssignedDUHtrFracs[5]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[5] ) < 1 .OR. IfValidAnd( HeaterMult[5] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  (NumAssignedDUFracs + ValidOr( NumResOtherZnsServed, 0 )) / TotNumDHWHeaters  endif endif  }
   "Set ResDHWSys:NumAssignedDUHtrFracs[6]"  ResDHWSys:NumAssignedDUHtrFracs[6]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[6] ) < 1 .OR. IfValidAnd( HeaterMult[6] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  (NumAssignedDUFracs + ValidOr( NumResOtherZnsServed, 0 )) / TotNumDHWHeaters  endif endif  }


; new property duplicating above except reporting '0' for central HPWH systems
; RJH 9/4/23 this new property supports GitHub Issue #101
   "Set ResDHWSys:NumIndivAssignedDUHtrFracs[1]"  ResDHWSys:NumIndivAssignedDUHtrFracs[1]  =  
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[1] ) < 1 .OR. IfValidAnd( HeaterMult[1] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else if (CentralRecircType > 0) then 1 else (NumAssignedDUFracs + ValidOr( NumResOtherZnsServed, 0 )) / TotNumDHWHeaters  endif endif endif  }
   "Set ResDHWSys:NumIndivAssignedDUHtrFracs[2]"  ResDHWSys:NumIndivAssignedDUHtrFracs[2]  = {  NumAssignedDUHtrFracs[2]  } 
   "Set ResDHWSys:NumIndivAssignedDUHtrFracs[3]"  ResDHWSys:NumIndivAssignedDUHtrFracs[3]  = {  NumAssignedDUHtrFracs[3]  } 
   "Set ResDHWSys:NumIndivAssignedDUHtrFracs[4]"  ResDHWSys:NumIndivAssignedDUHtrFracs[4]  = {  NumAssignedDUHtrFracs[4]  } 
   "Set ResDHWSys:NumIndivAssignedDUHtrFracs[5]"  ResDHWSys:NumIndivAssignedDUHtrFracs[5]  = {  NumAssignedDUHtrFracs[5]  } 
   "Set ResDHWSys:NumIndivAssignedDUHtrFracs[6]"  ResDHWSys:NumIndivAssignedDUHtrFracs[6]  = {  NumAssignedDUHtrFracs[6]  } 


  ; SAC 12/29/19 - copy following rules out of Rules_CSE_Simulation_DHW to default PRIOR to defaulting ResWtrHtr:TankVolume (tic #862)
   ; SAC 1/2/19 - added to facilitate standard design HPWH sizing (HPWHSIZE)
	"Set DwellUnitType:NumBRsSrvdPerDHWSys"	DwellUnitType:NumBRsSrvdPerDHWSys	= {	NumDUsSrvdPerDHWSys * ValidOr( NumBedrooms, 0 )  }
	"Set ResDHWSys:NumAssignedBRFracs"		ResDHWSys:NumAssignedBRFracs	= {	if (IfValidAnd( ResProj:IsMultiFamily < 0.5 ))
	                                                                     then  if (ResProj:RunScope = 1 .AND. ResProj:IsAddAlone > 0.5)
	                                                                           then  ResProj:NumBedrooms + ResProj:NumAddBedrooms
	                                                                           else  ResProj:NumBedrooms
	                                                                           endif
																								else	SumRevRef( DwellUnitType:DHWSysRef[1], DwellUnitType:NumBRsSrvdPerDHWSys ) +
																										SumRevRef( DwellUnitType:DHWSysRef[2], DwellUnitType:NumBRsSrvdPerDHWSys ) +
																										SumRevRef( DwellUnitType:DHWSysRef[3], DwellUnitType:NumBRsSrvdPerDHWSys ) +
																										SumRevRef( DwellUnitType:DHWSysRef[4], DwellUnitType:NumBRsSrvdPerDHWSys ) +
																										SumRevRef( DwellUnitType:DHWSysRef[5], DwellUnitType:NumBRsSrvdPerDHWSys ) 
																								endif  }
   "Adjust ResDHWSys NumAssignedBRFracs for (Com Hotel/Motel) models"      Proj:Action =     ; SAC 03/02/22
      {  if (IsComRuleset)
         then  EvalRulelist( "AdjustCom_ResDHWSys_NumAssignedBRFracs" )
         else  UNCHANGED  endif  }

	; SAC 12/30/19 - number of DwellUnit Bedrooms served by DHW heater assignment to this system (sum of fractions) (tic #862)
   ; SAC 1/5/20 - added logic for new Central HPWH system inputs (tic #862)
   "Set ResDHWSys:NumAssignedBRHtrFracs[1]"  ResDHWSys:NumAssignedBRHtrFracs[1]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  NumAssignedBRFracs
         else if (LocalCompAssigned( DHWHeater[1] ) < 1 .OR. IfValidAnd( HeaterMult[1] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  NumAssignedBRFracs / TotNumDHWHeaters  endif endif  }
   "Set ResDHWSys:NumAssignedBRHtrFracs[2]"  ResDHWSys:NumAssignedBRHtrFracs[2]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[2] ) < 1 .OR. IfValidAnd( HeaterMult[2] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  NumAssignedBRFracs / TotNumDHWHeaters  endif endif  }
   "Set ResDHWSys:NumAssignedBRHtrFracs[3]"  ResDHWSys:NumAssignedBRHtrFracs[3]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[3] ) < 1 .OR. IfValidAnd( HeaterMult[3] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  NumAssignedBRFracs / TotNumDHWHeaters  endif endif  }
   "Set ResDHWSys:NumAssignedBRHtrFracs[4]"  ResDHWSys:NumAssignedBRHtrFracs[4]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[4] ) < 1 .OR. IfValidAnd( HeaterMult[4] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  NumAssignedBRFracs / TotNumDHWHeaters  endif endif  }
   "Set ResDHWSys:NumAssignedBRHtrFracs[5]"  ResDHWSys:NumAssignedBRHtrFracs[5]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[5] ) < 1 .OR. IfValidAnd( HeaterMult[5] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  NumAssignedBRFracs / TotNumDHWHeaters  endif endif  }
   "Set ResDHWSys:NumAssignedBRHtrFracs[6]"  ResDHWSys:NumAssignedBRHtrFracs[6]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[6] ) < 1 .OR. IfValidAnd( HeaterMult[6] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  NumAssignedBRFracs / TotNumDHWHeaters  endif endif  }

   "Set ResWtrHtr:NumAssignedDUFracs"     ResWtrHtr:NumAssignedDUFracs  =     ; SAC 12/30/19 (tic #862)
      {  if (IfValidAnd( ResProj:IsMultiFamily < 0.5 )) then  ResProj:NumDwellingUnits
         else  SumRevRef( ResDHWSys:DHWHeater, ResDHWSys:NumAssignedDUHtrFracs )  endif  }
   "Set ResWtrHtr:NumAssignedBRFracs"     ResWtrHtr:NumAssignedBRFracs  =
      {  if (IfValidAnd( ResProj:IsMultiFamily < 0.5 )) then  ResProj:NumBedrooms
         else  SumRevRef( ResDHWSys:DHWHeater, ResDHWSys:NumAssignedBRHtrFracs )  endif  }

   "Set ResWtrHtr:NumIndivAssignedDUFracs"     ResWtrHtr:NumIndivAssignedDUFracs  =     ; RJH 9/4/23 GitHub Issue #101
      {  if (IfValidAnd( ResProj:IsMultiFamily < 0.5 )) then  ResProj:NumDwellingUnits
         else  SumRevRef( ResDHWSys:DHWHeater, ResDHWSys:NumIndivAssignedDUHtrFracs )  endif  }


   "Set ResDHWSys:DailyCommonHWConsHtrFracs[1]"                   ResDHWSys:DailyCommonHWConsHtrFracs[1]  =     ; SAC 10/10/24 (tic #3630)
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  DailyCommonHWConsumption
         else if (LocalCompAssigned( DHWHeater[1] ) < 1 .OR. IfValidAnd( HeaterMult[1] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  ValidOr( DailyCommonHWConsumption, 0 ) * HeaterMult[1] / TotNumDHWHeaters  endif endif  }
   "Set ResDHWSys:DailyCommonHWConsHtrFracs[2-6]"  for:#H=(2to6)  ResDHWSys:DailyCommonHWConsHtrFracs[#H]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[#H] ) < 1 .OR. IfValidAnd( HeaterMult[#H] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  ValidOr( DailyCommonHWConsumption, 0 ) * HeaterMult[#H] / TotNumDHWHeaters  endif endif  }

   "Set ResWtrHtr:DailyCommonHWConsFracs"       ResWtrHtr:DailyCommonHWConsFracs  =     ; SAC 10/10/24 (tic #3630)
      {  if (IfValidAnd( ResProj:IsMultiFamily > 0.5 )==0) then  0
         else  SumRevRef( ResDHWSys:DHWHeater, ResDHWSys:DailyCommonHWConsHtrFracs )  endif  }


   "Set ResDHWSys:NumAssignedCommonDUEquivByHtr[1]"                   ResDHWSys:NumAssignedCommonDUEquivByHtr[1]  =     ; SAC 10/10/24 (tic #3630)
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  NumAssignedCommonDUEquiv
         else if (LocalCompAssigned( DHWHeater[1] ) < 1 .OR. IfValidAnd( HeaterMult[1] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  ValidOr( NumAssignedCommonDUEquiv, 0 ) * HeaterMult[1] / TotNumDHWHeaters  endif endif  }
   "Set ResDHWSys:NumAssignedCommonDUEquivByHtr[2-6]"  for:#H=(2to6)  ResDHWSys:NumAssignedCommonDUEquivByHtr[#H]  =
      {  if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
         else if (LocalCompAssigned( DHWHeater[#H] ) < 1 .OR. IfValidAnd( HeaterMult[#H] > 0 )==0 .OR. IfValidAnd( TotNumDHWHeaters > 0 )==0) then  0  
         else  ValidOr( NumAssignedCommonDUEquiv, 0 ) * HeaterMult[#H] / TotNumDHWHeaters  endif endif  }

   "Set ResWtrHtr:NumAssignedCommonDUEquiv"        ResWtrHtr:NumAssignedCommonDUEquiv  =     ; SAC 10/10/24 (tic #3630)
      {  if (IfValidAnd( ResProj:IsMultiFamily > 0.5 )==0) then  0
         else  SumRevRef( ResDHWSys:DHWHeater, ResDHWSys:NumAssignedCommonDUEquivByHtr )  endif  }


   "Set ResWtrHtr:TankVolumeEditable"  ResWtrHtr:TankVolumeEditable  =     ; SAC 12/29/19 (tic #862)
      {  if (HeaterType == 16 .AND. IfValidAnd( Proj:EnableResearchMode > 0 )==0) then  0
         else  1  endif  }
   "Force reset of ResWtrHtr:TankVolume if user-defined but should be rule-defined"       ; SAC 12/30/19 (tic #862)
      ResWtrHtr:Action   =
      {  if (LocalStatus( TankVolume ) < 5 .OR. HeaterType != 16 .OR. TankVolumeEditable > 0) then  UNCHANGED
         else  EvalRulelist( "ForceReset_DHWHeater_TankVolume", 1 )  endif  }

   ; SAC 7/9/17 - added logic to prevent error when FloorAreaServed not yet defined (can happen first time through defaulting)
   ; SAC 11/8/17 - added check for HPWH_NEEARated flag/checkbox to prevent reporting of non-NEEA HPWHs
   ; moved up here from below to use in defaulting ResWtrHtr:TankVolume - SAC 03/07/24
   "Set ResWtrHtr:IsNEEAHtPumpWtrHtr - flag triggering NEEA heat pump water heater special feature message"	; SAC 7/5/17 - tic #805
      ResWtrHtr:IsNEEAHtPumpWtrHtr  = {
         if ( IfValidAnd( FloorAreaServed <= 0 )==0 .AND.
              HeaterElementType == 5 .AND. IfValidAnd( HPWH_NEEARated > 0 ) .AND. 
              (IfValidAnd( CentralHPWHCprsrType > 0 ) .OR. (HPWHBrand > 2 .AND. HPWHModel > 1)) )
         then  1  else  0  endif  }

   "Force re-default of ResWtrHtr:TankVolume for NEEA HPWHs to ensure reporting accuracy"    ResWtrHtr:Action =      ; SAC 05/02/24
      {  if (LocalStatus( TankVolume ) > 4 .AND. IsNEEAHtPumpWtrHtr .AND. HPWHModel > 1)
         then  EvalRulelist( "ForceReset_DHWHeater_TankVolume", 1 )
         else  UNCHANGED  endif  }

   ; SAC 8/29/16 - moved TankVolume default up here, before EnergyFactor rule that may reference TankVolume (tic #725)
   ; added HPWHData_NEEA:TankVolume() table look-up for NEEA HPWHs - SAC 03/07/24
	"Default ResWtrHtr:TankVolume"		ResWtrHtr:TankVolume	= {
		if (HeaterElementType == 5 .AND. HPWH_NEEARated < 0.5) then  50		; SAC 5/17/16 - HP2016, Generic
      else if (IsNEEAHtPumpWtrHtr .AND. HPWHModel > 1)
      then  if (  HPWHData_NEEA:TankVolume( "ModelNum", HPWHModel ) > 0)
            then  HPWHData_NEEA:TankVolume( "ModelNum", HPWHModel )
            else  50  endif
		else	switch (HeaterType)
					case  0 :	50			; "Boiler"        
					case  1 :	50			; "Indirect"      
					case  3 :	50			; "Large Storage" 
					case  2 :	 0			; "Large Tankless"
					case  6 :	50			; "Small Storage" 
					case  5 :    0			; "Small Tankless"
					case  7 :	50			; "Unfired Storage Tank"
					case  8 :	 5 		; "Electric Mini Tank"
					case  9 :	 0 		; "UEF-rated Instantaneous"
               case 10 :    0		; "Consumer Instantaneous (UEF)"             
               case 11 :    0		; "Commercial Instantaneous (TE)"            
               case 12 :   50		; "Consumer Storage (UEF)"                   
               case 13 :  100		; "Commercial Storage (TE & SBL)"            
               case 14 :   50		; "Residential-Duty Commercial Storage (UEF)"
               case 15 :    0    ; "Residential-Duty Commercial Instantaneous (UEF)"
               case 16 :  max( 50, int( ((ValidOr( NumAssignedDUFracs, 1 ) + ValidOr( NumAssignedCommonDUEquiv, 0 )) * 10) +
                                        ( ValidOr( NumAssignedBRFracs, 1 ) * 3) + 0.5 ) )      ; "Commercial Packaged Boiler"  ; SAC 12/19/19 - to facilitate new central gas std design DHW system (tic #862)  ; SAC 10/09/24 (tic #3630)
					default :   50
				endswitch  endif endif  }
   "Set ResWtrHtr:ShowTankVolume"      ResWtrHtr:ShowTankVolume  =            ; HPWH_ComProduct - SAC 02/01/21 (tic #1260)
         {   if (HeaterElementType == 1 .AND. HeaterType == 9) then  0
            else if (HeaterElementType != 5 .OR. (HPWH_NEEARated < 0.5 .AND. HPWH_ComProduct < 0.5))
            then  1  else  0  endif endif  }

   ; SAC 8/29/16 - updated 2016 T-24 default efficiencies for small storage & instantaneous heaters to properly reflect tank size adjustments present in federal standards (table F-3) (tic #725)
   ; SAC 8/31/16 - added logic to round efficiencies to nearest 1/1000 (tic #725)
   "Default ResWtrHtr:EnergyFactor"      ResWtrHtr:EnergyFactor   = {
      switch (HeaterElementType)
         case  0 :            ; "Electric Resistance" 
            switch (HeaterType)
               case  6 :   if (IfValidAnd( ResProj:StdsVersionYr < 2016 )) then  0.945      ; "Small Storage"        ; SAC 1/4/16 - .97 -> .945 (tic 547)
                           else  if (IfValidAnd( TankVolume > 55 ))
                                 then  int( 1000 * ( 2.057 - (0.00113 * TankVolume               ) ) + 0.5 ) / 1000
                                 else  int( 1000 * ( 0.960 - (0.0003  * ValidOr( TankVolume, 50 )) ) + 0.5 ) / 1000  endif endif
               case  5 :   if (IfValidAnd( ResProj:StdsVersionYr < 2016 )) then  0.93       ; "Small Tankless"
                           else  int( 1000 * ( 0.93 - (0.00132 * ValidOr( TankVolume, 0 )) ) + 0.5 ) / 1000  endif
               case 10 :   0.92		; "Consumer Instantaneous (UEF)"             
               case 11 :   0.99		; "Commercial Instantaneous (TE)"            
               case 12 :   0.92		; "Consumer Storage (UEF)"                   
               case 13 :   0.93		; "Commercial Storage (TE & SBL)"            
               case 15 :   0.80     ; "Residential-Duty Commercial Instantaneous (UEF)"
               default :   0.93
            endswitch
         case  1 :          ; "Natural Gas"   
            switch (HeaterType)
               case  6 :   if (IfValidAnd( ResProj:StdsVersionYr < 2015 )) then  0.575      ; "Small Storage" 
                           else if (IfValidAnd( ResProj:StdsVersionYr < 2016 )) then  0.6
                           else  if (IfValidAnd( TankVolume > 55 ))
                                 then  int( 1000 * ( 0.8012 - (0.00078 * TankVolume               ) ) + 0.5 ) / 1000
                                 else  int( 1000 * ( 0.675  - (0.0015  * ValidOr( TankVolume, 50 )) ) + 0.5 ) / 1000  endif endif endif
               case  5 :   if (IfValidAnd( ResProj:StdsVersionYr < 2016 )) then  0.82       ; "Small Tankless"
                           else  int( 1000 * ( 0.82 - (0.0019 * ValidOr( TankVolume, 0 )) ) + 0.5 ) / 1000  endif
               case  9 :   0.81                                               ; "Consumer Instantaneous (UEF)-New"
               case 10 :   0.81		; "Consumer Instantaneous (UEF)"             
               case 11 :   0.80		; "Commercial Instantaneous (TE)"            
               case 12 :   0.56		; "Consumer Storage (UEF)"                   
               case 13 :   0.80		; "Commercial Storage (TE & SBL)"            
               case 14 :   0.61		; "Residential-Duty Commercial Storage (UEF)"
               case 16 :   0.80     ; "Commercial Packaged Boiler"      ; SAC 12/19/19 - to facilitate new central gas std design DHW system (tic #862)
               default :   if (IfValidAnd( ResProj:StdsVersionYr < 2016 )) then  0.575  else  0.80  endif      ; SAC 11/10/15
            endswitch
         case  2 :          ; "Propane"             
            switch (HeaterType)
               case  6 :   if (IfValidAnd( ResProj:StdsVersionYr < 2015 )) then  0.575      ; "Small Storage" 
                           else if (IfValidAnd( ResProj:StdsVersionYr < 2016 )) then  0.60
                           else  if (IfValidAnd( TankVolume > 55 ))
                                 then  int( 1000 * ( 0.8012 - (0.00078 * TankVolume               ) ) + 0.5 ) / 1000
                                 else  int( 1000 * ( 0.675  - (0.0015  * ValidOr( TankVolume, 50 )) ) + 0.5 ) / 1000  endif endif endif
               case  5 :   if (IfValidAnd( ResProj:StdsVersionYr < 2016 )) then  0.82       ; "Small Tankless"
                           else  int( 1000 * ( 0.82 - (0.0019 * ValidOr( TankVolume, 0 )) ) + 0.5 ) / 1000  endif
               default :   if (IfValidAnd( ResProj:StdsVersionYr < 2016 )) then  0.575  else  0.80  endif      ; SAC 11/10/15
            endswitch
         case  3 :          ; "Heat Pump"           
            switch (HeaterType)
               case  6 :   0.97               ; "Small Storage" 
               case  5 :   0.97               ; "Small Tankless"
               default :   0.97
            endswitch
         case  4 :          ; "Oil"   
            switch (HeaterType)
               case  6 :                      ; "Small Storage" 
                           if (IfValidAnd( ResProj:StdsVersionYr < 2015 )) then  0.575  else  0.60  endif
               case  5 :   0.82               ; "Small Tankless"
               default :   0.575
            endswitch
         case  5 :         ; SAC 5/17/16 - HP2016, Generic
            if (HPWH_NEEARated < 0.5 .AND. HPWH_ComProduct < 0.5)      ; SAC 5/17/16 - HP2016, Generic   ; HPWH_ComProduct - SAC 02/01/21 (tic #1260)
            then if( IsUEF )
              then 3
              else 2
              endif
            else  0.59  endif
         default :   0.59
      endswitch  }

	"Set ResWtrHtr:EfficiencyUnits"		ResWtrHtr:EfficiencyUnits	= {
			if ((HeaterElementType == 5 .AND. IfValidAnd( HPWH_NEEARated > 0 )==0 .AND. IsUEFHtPump > 0) .OR.
			         IsUEF) then  "UEF"
			else if (HeaterElementType == 5) then  "EF"			; SAC 5/17/16 - HP2016, Generic
			else	switch (HeaterType)
						case  0 :	"TE"	   ; "Boiler"           ; SAC 6/14/18 - frac -> TE (tic #871)
						case  1 :	"TE"		; "Indirect"         ; SAC 6/21/18 - added TE
						case  3 :	"TE"	   ; "Large Storage"    ; SAC 6/14/18 - frac -> TE (tic #871, runs 8)
						case  2 :	"TE"		; "Large Tankless"   ; SAC 6/14/18 - EF -> TE (tic #871, runs 7&11)
						case  6 :	"EF"		; "Small Storage" 
						case  5 :   "EF"		; "Small Tankless"
						case  7 :	" "		; "Unfired Storage Tank"
						case  8 :	" "		; "Electric Mini Tank"
						case  9 :   "UEF"		; "UEF-rated Instantaneous"
						case 10 :   "UEF"		; "Consumer Instantaneous (UEF)"             
						case 11 :   "TE"	   ; "Commercial Instantaneous (TE)"  ; SAC 6/14/18 - frac -> TE (tic #871, runs 9)
						case 12 :   "UEF"		; "Consumer Storage (UEF)"                   
						case 13 :   "TE"	   ; "Commercial Storage (TE & SBL)"  ; SAC 6/14/18 - frac -> TE (tic #871, runs 10)
						case 14 :   "UEF"		; "Residential-Duty Commercial Storage (UEF)"
                  case 15 :   "UEF"    ; "Residential-Duty Commercial Instantaneous (UEF)"
                  case 16 :   "TE"     ; "Commercial Packaged Boiler"      ; SAC 12/19/19 - to facilitate new central gas std design DHW system (tic #862)
						default :   "EF"	
					endswitch  endif endif  }

	"Set ResWtrHtr:EfficiencyLabel"		ResWtrHtr:EfficiencyLabel	= {
			if ( (HeaterElementType == 5 .AND. IfValidAnd( HPWH_NEEARated > 0 )==0 .AND. IsUEFHtPump > 0) .OR.
			     IsUEF ) then  "Uniform Energy Factor:"
			else if (HeaterType == 9) then  "Uniform Energy Factor:"
			else if (HeaterElementType == 5) then  "Energy Factor:"
			else	switch (HeaterType)
						case  0 :	"Thermal Efficiency:"  	; "Boiler"           - SAC 6/14/18 - Eff -> Thermal Eff (tic #871, run 6)
						case  1 :	"Thermal Efficiency:"   ; "Indirect"         - SAC 6/21/18 - added Thermal Eff
						case  3 :	"Thermal Efficiency:"	; "Large Storage"    - SAC 6/14/18 - EF -> Thermal Eff (tic #871, runs 10)
						case  2 :	"Thermal Efficiency:"	; "Large Tankless"   - SAC 6/14/18 - EF -> Thermal Eff (tic #871, runs 7,16)
						case  6 :	"Energy Factor:"	; "Small Storage" 
						case  5 :   "Energy Factor:"	; "Small Tankless"
						case  7 :	" "         		; "Unfired Storage Tank"
						case  8 :	" "         		; "Electric Mini Tank"
						case  9 :   "Energy Factor:"	; "UEF-rated Instantaneous"
				;		case 10 :   "Uniform E.F.:"	; "Consumer Instantaneous (UEF)"
						case 11 :	"Thermal Efficiency:"   ; "Commercial Instantaneous (TE)"
				;		case 12 :   "Uniform E.F.:"	; "Consumer Storage (UEF)"
						case 13 :	"Thermal Efficiency:"	; "Commercial Storage (TE & SBL)"
				;		case 14 :   "Uniform E.F.:"	; "Residential-Duty Commercial Storage (UEF)"
            ;     case 15 :   "Uniform E.F.:"   ; "Residential-Duty Commercial Instantaneous (UEF)"
                  case 16 :   "Thermal Efficiency"    ; "Commercial Packaged Boiler"      ; SAC 12/19/19 - to facilitate new central gas std design DHW system (tic #862)
						default :   "Energy Factor:"	
					endswitch  endif endif endif  }

	"Set ResWtrHtr:RecovEffLabel"		ResWtrHtr:RecovEffLabel	= {  "Recovery Efficiency:"  }
   ; SAC 6/14/18 - switch RecovEffLabel for 'Residential-Duty Commercial Storage (UEF)' from TE to RE (like all others) (tic #871)
   ;   switch (HeaterType)
   ;   case 14 :   "Thermal Efficiency:"	; "Residential-Duty Commercial Storage (UEF)"
   ;   default :   "Recovery Efficiency:"	
	;   endswitch  }

	; SAC 6/27/16 - revised logic in the following rule to ensure TankVolumeRange not > 0 for HPWHs where HPWH_NEEARated is selected (tic #699)
	"Set ResWtrHtr:TankVolumeRange"		ResWtrHtr:TankVolumeRange	= {		; SAC 6/16/16 - added key to TankVolume range checks: 1=>SmallStor, 2=>LargeStor (tic #661)
			if (HeaterElementType == 5)
			then	if (HPWH_NEEARated < 0.5)
					then  1
					else  0  endif
			else	switch (HeaterType)
						case  0 :	 0			; "Boiler"        
						case  1 :	 0			; "Indirect"      
						case  3 :	 2			; "Large Storage" 
						case  2 :	 0			; "Large Tankless"
						case  6 :	 1			; "Small Storage" 
						case  5 :    0			; "Small Tankless"
						case  7 :	 0			; "Unfired Storage Tank"
						case  8 :	 0 		; "Electric Mini Tank"
						case  9 :	 0 		; "Consumer Instantaneous (UEF)-New"
						default :    0
					endswitch  endif  }

	"Default ResWtrHtr:IntInsulRVal"			ResWtrHtr:IntInsulRVal		=     ; SAC 12/30/19 (tic #862)
      {  if (HeaterType == 16) then  12
         else  0  endif  }
	"Default ResWtrHtr:ExtInsulRVal"			ResWtrHtr:ExtInsulRVal		= {	0  }

   ; SAC 6/29/17 - logic to ensure pilot energy not collected for electric water heaters (tic #757)
   "Set ResWtrHtr:PilotEnergyActive"      ResWtrHtr:PilotEnergyActive  = {
         if (HeaterElementType == 1 .AND.   ; only for Gas heaters
             (HeaterType == 0 .OR. HeaterType == 1 .OR. HeaterType == 2))
         then  1  else  0  endif  }
   ; SAC 6/14/18 - new property determining when pilot energy must be > 0 (tic #871, runs 6&7)
   "Set ResWtrHtr:PilotEnergyReqd"      ResWtrHtr:PilotEnergyReqd  = {
         if (HeaterElementType == 1 .AND.   ; only for Gas heaters
             (HeaterType == 0 .OR. HeaterType == 2))  ; boiler or larg inst
         then  1  else  0  endif  }
   ; SAC 6/14/18 - new property determining when standby loss frac must be > 0 (tic #871, run 10)
   "Set ResWtrHtr:StandbyLossFracReqd"      ResWtrHtr:StandbyLossFracReqd  = {
         if (TankType == 3 .OR.
             (HeaterElementType == 1 .AND. HeaterType == 13))  ; Gas - Commercial Storage (TE & SBL)
         then  1  else  0  endif  }

	; SAC 11/10/15 - add standby loss defaulting for large heaters based on fed appliance stds   - SAC 11/11/15 - added in elec storage losses + indirect fuel   - SAC 11/19/15 - added logic to set SBL to 0 for non-elec tanks < 10gal
   ; SAC 11/13/17 - revised result via new round() function to ensure consistency w/ budget conversion (tic #892)
   ; SAC 6/13/18 - updated InputRating property name to InputRatingSim to accommodate InputRating being ignored for most heater types (tic #940)
   ; SAC 6/14/18 - altered default StandbyLossFrac (pilot) for Gas Boiler & Lrg Inst from formula to 750 (static) (tic #871, runs 6-7)
	"Default ResWtrHtr:StandbyLossFrac"
      ResWtrHtr:StandbyLossFrac	= {
         if (IfValidAnd( TankVolume > 0 )==0) then  UNDEFINED
			else if (HeaterElementType = 0 .OR. HeaterElementType = 3 .OR. HeaterElementType = 6)		; Electric
			then	if (HeaterType == 2 .OR. HeaterType == 0 .OR. HeaterType == 1)
					then	round( ((0.3 + (27 / TankVolume )) / 100) * (8.25 * TankVolume * 70), 5 ) 		; Btuh
					else if (HeaterType == 3)
					then	round(  (0.3 + (27 / TankVolume )) / 100, 5 )  											; frac
               else if (HeaterType == 13) then   0.02     		; "Commercial Storage (TE & SBL)"            
					else	UNDEFINED  endif endif endif
			else if (HeaterElementType != 0 .AND. HeaterElementType != 3 .AND. HeaterElementType != 6)	; NOT elec
			then	if (HeaterType == 0 .OR. HeaterType == 2) then  750
			      else if (HeaterType == 1)
					then	if (TankVolume < 10) then  0
							else	round(  (ValidOr( InputRatingSim, 0 ) / 800) + (110 * sqrt( TankVolume )), 5 )										; Btuh	
							endif
					else if (HeaterType == 3)
					then	if (TankVolume < 10) then  0
							else	round( ((ValidOr( InputRatingSim, 0 ) / 800) + (110 * sqrt( TankVolume ))) / (8.25 * TankVolume * 70), 5 )	; frac
							endif
               else if (HeaterType == 13) then   0.02     		; "Commercial Storage (TE & SBL)"            
					else	UNDEFINED  endif endif endif endif
			else	UNDEFINED  endif endif endif  }
; SAC 11/19/15 - removed following rule as it DUPLICATES logic already executed in the above rule
;	; adjust above StandbyLossFrac to transform from Btuh to fraction    - SAC 11/19/15 - fix bug where StandbyLossFrac is undefined
;	"Convert default ResWtrHtr:StandbyLossFrac to fraction"
;				ResWtrHtr:StandbyLossFrac	= {	if (IfValidAnd( StandbyLossFrac > 0 ) .AND. IfValidAnd( HeaterType == 3 ) .AND. IfValidAnd( TankVolume >= 10 ))
;															then	StandbyLossFrac / (8.25 * TankVolume * 70)
;															else	UNCHANGED  endif  }

   ; property used in UEF Storage heaters (tic #801) - SAC 6/29/17
   "Default ResWtrHtr:FirstHourRating"    ResWtrHtr:FirstHourRating  = {
		switch (HeaterElementType)
			case  0 :	      	; (watts)   "Electric Resistance" 
                     switch (HeaterType)
               			case 12 :    60   ; "Consumer Storage (UEF)"                   
							   default :  UNDEFINED
							endswitch
			case  1 :   			; (Btu/hr)  "Natural Gas"   
                     switch (HeaterType)
               			case 12 :    80	; "Consumer Storage (UEF)"                   
               			case 14 :   120	; "Residential-Duty Commercial Storage (UEF)"
							   default :  UNDEFINED
							endswitch
      case  5:         ; Heat Pump
        if ( IsUEF ) 
        then 66
        else UNDEFINED
        endif
			default :  UNDEFINED  
		endswitch  }

   ; SAC 5/25/17 - added for new 'UEF-rated Instantaneous'
   "Default ResWtrHtr:RatedFlow"       ResWtrHtr:RatedFlow    = {
		switch (HeaterElementType)
			case  0 :	      	; (watts)   "Electric Resistance" 
                     switch (HeaterType)
               			case 10 :   	2	; "Consumer Instantaneous (UEF)"             
                        case 15 :      5  ; "Residential-Duty Commercial Instantaneous (UEF)"
							   default :  UNDEFINED
							endswitch
			case  1 :   			; (Btu/hr)  "Natural Gas"   
                     switch (HeaterType)
               			case  9 :    4.7	; "Consumer Instantaneous (UEF)-New"
               			case 10 :   	8	; "Consumer Instantaneous (UEF)"             
							   default :  UNDEFINED
							endswitch
			default :  UNDEFINED  
		endswitch  }

   "Default ResWtrHtr:AnnFuelUse"      ResWtrHtr:AnnFuelUse   = {  
      if (HeaterElementType = 1 .AND. HeaterType = 9) then  205  else  UNDEFINED  endif  }  ;  therms   'yellow label' annual fuel use, therms (required)
   "Default ResWtrHtr:AnnElecUse"      ResWtrHtr:AnnElecUse   = {  
      if (HeaterElementType = 1 .AND. HeaterType = 9) then   52  else  UNDEFINED  endif  }  ;  kWh      'yellow label' annual electricity use, kWh (required)
   "Default ResWtrHtr:StandbyElec"     ResWtrHtr:StandbyElec  = {  
      if (HeaterElementType = 1 .AND. HeaterType = 9) then    4  else  UNDEFINED  endif  }  ;  W        standby power, W (optional, default 4)

	"Set flag (ResWtrHtr:CanBeCHWHeater) indicating whether or not this DHWHeater can be assigned to a combined hydronic heating system"	  ; SAC 7/8/13   
;	mjb-10/9/13	only type of water heater NOT available for combined hydronics is Heat Pump WH
;				ResWtrHtr:CanBeCHWHeater	= {	if (	HeaterElementType != 3   )	then  1  else  0  endif  }
; SAC 1/6/14 - mod to prevent Electric water heaters from being used in combined hydronic systems (question as to how to model standard design)
; SAC 1/6/16 - revised to enable Electric Resistance water heaters to be used in combined hydronic systms (tic 374)
; SAC 6/16/16 - revised logic to prevent NEW 'Heat Pump' selection (ASHPX) to be used in combined hydronic systems (tic #680)
; SAC 6/29/17 - revised to toggle OFF for new UEF types (tic #801)
; SAC 11/28/17 - reversed logic in last change to enable UEF types for CombHydr space htg (tic #910)
; SAC 12/19/19 - prevent new Com Pckgd Blr from being CHWHtr (tic #862)
				ResWtrHtr:CanBeCHWHeater	= {	if ( HeaterElementType != 3 .AND. HeaterElementType != 5 .AND.
				                                      HeaterType != 16 )
				                                 then  1  else  0  endif  }
;				ResWtrHtr:CanBeCHWHeater	= {	if (	HeaterElementType != 3 .AND. HeaterElementType != 0   )	then  1  else  0  endif  }
;				ResWtrHtr:CanBeCHWHeater	= {	if (	HeaterElementType == 1  .OR.   ; "Natural Gas"
;																	HeaterElementType == 2  .OR.   ; "Propane"    
;																	HeaterElementType == 4  )      ; "Oil"        
;															then  1  else  0  endif  }

   ; SAC 1/18/19 - prevent user-specification of RecovEff for 2019+ Gas Consumer Instantaneous (UEF) heaters (tic #1054)
   ; SAC 1/29/19 - added logic to if statement to prevent blasting RecovEff for ALL heater types (tic #1054)
   "Blast ResWtrHtr:RecovEff for 2019+ Gas Consumer Instantaneous (UEF) heaters (if user-specified)"  ResWtrHtr:Action =
      {  if (LocalStatus( RecovEff ) < 5 .OR. HeaterElementType != 1 .OR. HeaterType != 9) then  UNCHANGED
         else  EvalRulelist( "ForceReset_DHWHeater_RecovEff", 1 )  endif  }

;	mjb-10/7/13 default recovery efficiency as UNDEFINED so that it does not show up in compliance reports erroneously
;	"Default ResWtrHtr:RecovEff"			ResWtrHtr:RecovEff	= {	UNDEFINED  }
; SAC 1/6/14 - added RecovEff default back in (for non-electric water heaters) - this property not apparently reported any longer, so presence of default when heater not used in combined hydronic systems seems to no longer be a problem
; SAC 11/28/17 - added logic to prevent defaulting UEF htr RecovEff to 70 now that they CanBeCHWHeater (tic #910)
	"Default ResWtrHtr:RecovEff"			ResWtrHtr:RecovEff	= {
      if ( CanBeCHWHeater .AND. HeaterType < 9 )	then  70
      else
   		switch (HeaterElementType)
            case  0 :            ; "Electric Resistance" 
               switch (HeaterType)
                  case 10 :   99		; "Consumer Instantaneous (UEF)"             
                  case 12 :   99		; "Consumer Storage (UEF)"                   
                  default :   UNDEFINED
               endswitch
            case  1 :          ; "Natural Gas"   
               switch (HeaterType)
                 ; case  9 :   82		; "Consumer Instantaneous (UEF)-New"             
                  case  9 : min( 99, ((1.0702 * ValidOr( EnergyFactor, 0.81 ) - 0.0332) * 100) )		; "Consumer Instantaneous (UEF)-New"  - installed new default formula (tic #1054) - SAC 1/18/19 / added max of 99 - SAC 1/31/19
                  case 10 :   83		; "Consumer Instantaneous (UEF)"             
                  case 12 :   78		; "Consumer Storage (UEF)"                   
                  case 14 :   80		; "Residential-Duty Commercial Storage (UEF)"
                  default :   UNDEFINED
               endswitch
            default :  UNDEFINED
         endswitch
      endif  }
   ; SAC 6/14/18 - added RecovEff access for Elec UEF types (tic #871, runs )
   "Set ResWtrHtr:DispUEFRecovEff"  ResWtrHtr:DispUEFRecovEff  = {  ; tic #910 - SAC 11/28/17
         if (HeaterType = 10 .OR. HeaterType = 12 .OR. HeaterType = 14) then  1
         else if (HeaterElementType = 1 .AND.   ; Gas
                  (HeaterType = 11 .OR. HeaterType = 13)) then  1
         else if (HeaterElementType = 0 .AND.   ; Elec
                  (HeaterType = 11 .OR. HeaterType = 13 .OR. HeaterType = 15)) then  1
         else  0  endif endif endif  }

   ; SAC 6/14/18 - prevented Elec heaters from including elec mini tank and expanded list of ElecMiniTank-compatible systems to include  (tic #871)
	"Set ResWtrHtr:AllowElecMiniTank flag"		ResWtrHtr:AllowElecMiniTank	= {
      if ((HeaterElementType = 1 .AND. (HeaterType == 2 .OR. HeaterType == 5)) .OR.  ; Gas - Sm & Lrg Instantaneous
          (HeaterElementType = 1 .AND. TankType = 10) .OR.  ; Gas - Consumer Instantaneous (UEF)
          (HeaterElementType = 1 .AND. TankType = 11))      ; Gas - Commercial Instantaneous (TE)
      then  1  else  0  endif  }
	"Default ResWtrHtr:HasElecMiniTank"			ResWtrHtr:HasElecMiniTank		= {	0  }
	"Default ResWtrHtr:ElecMiniTankPower"		ResWtrHtr:ElecMiniTankPower	= {
      if (AllowElecMiniTank > 0 .AND. HasElecMiniTank > 0) then  100  else  0  endif  }

	"Set ResWtrHtr:EFRangeChkID"			ResWtrHtr:EFRangeChkID			=        ; SAC 6/15/16 - tic #679   ; HPWH_ComProduct - SAC 02/01/21 (tic #1260)
   {  if (HeaterElementType == 5 .AND. HPWH_NEEARated < 0.5 .AND. HPWH_ComProduct < 0.5) then  1
      else if (HeaterElementType == 0)
      then  if (     HeaterType ==  6) then  2    ; SAC 12/1/16 - ElecRes SmStor => limit to <= 0.97 per call w/ BW & CB
            else if (HeaterType ==  5) then  3    ; SAC 5/10/17 - ElecRes SmInst EF => limit to <= 1.0 (tic #732)
            else if (HeaterType == 12) then  5    ; SAC 2/25/20 - ElecRes ConsumerStor UEF => limit to <= 0.94
            else                             4    ; SAC 5/10/17 - ElecRes Large* Eff => limit to <= 1.0 (tic #732)
            endif endif endif
      else if (HeaterElementType == 1)
      then  if (     HeaterType ==  9) then  6    ; SAC 2/25/20 - Gas ConsumerInst UEF => limit to <= 0.99
            else  0  endif
      else  0  endif endif endif  }
	"Set ResWtrHtr:ShowEnergyFactor"		ResWtrHtr:ShowEnergyFactor		=     ; SAC 5/17/16 - HP2016, Generic   ; HPWH_ComProduct - SAC 02/01/21 (tic #1260)
   {  if (HeaterElementType == 5 .AND. HPWH_NEEARated < 0.5 .AND. HPWH_ComProduct < 0.5) then  1
      else if (IsUEF .AND. HPWH_NEEARated < 0.5) then  1
      else if (HeaterElementType != 5 .AND.
               (HeaterType == 4 .OR. HeaterType == 5 .OR. HeaterType == 6 .OR. HeaterType == 9))
      then  1  else  0  endif endif endif  }

   ; moved UP above to use in defaulting TankVolume - SAC 03/07/24
   ; ; SAC 7/9/17 - added logic to prevent error when FloorAreaServed not yet defined (can happen first time through defaulting)
   ; ; SAC 11/8/17 - added check for HPWH_NEEARated flag/checkbox to prevent reporting of non-NEEA HPWHs
   ; "Set ResWtrHtr:IsNEEAHtPumpWtrHtr - flag triggering NEEA heat pump water heater special feature message"	; SAC 7/5/17 - tic #805
   ;    ResWtrHtr:IsNEEAHtPumpWtrHtr  = {
   ;       if ( IfValidAnd( FloorAreaServed <= 0 )==0 .AND.
   ;            HeaterElementType == 5 .AND. HPWH_NEEARated > 0 .AND. 
   ;            (CentralHPWHCprsrType > 0 .OR. (HPWHBrand > 2 .AND. HPWHModel > 1)) )
   ;       then  1  else  0  endif  }

   "Set ResWtrHtr:IsNewAssignedHPWH - flag: this is a New HPWH assigned to one or more DHWSystems"    ResWtrHtr:IsNewAssignedHPWH =       ; SAC 02/05/21
      {  if (HeaterElementType == 5 .AND. IfValidAnd( NewFlrAreaServed > 0 )) then  1  else  0  endif  }

   "Default ResWtrHtr:StandbyLossMult - for simulating insulation blanket on Elec WHs"  ; SAC 10/18/17
      ResWtrHtr:StandbyLossMult  = {
         if ((HeaterElementType == 5 .OR. (HeaterElementType == 0 .AND. ShowTankLocation > 0.5)) .AND.
             IfValidAnd( ResProj:EnergyCodeYearNum < 2019 )==0) then  1.0
         else  UNDEFINED  endif  }

  ; SAC 12/22/18 - added 2019 Drain Water Heat Recovery (via new DWHX objects) // SAC 1/5/19 - renamed DWHRSys
      ; ResDWHRSys:Type,                           Default,   0,    1,   1,    1,  1,  1 BEMP_Sym,  1,  0,  0, "",                 0,  0,                           1003, "DWHRSys type"   
   ; SAC 1/5/19 - renamed from ...Effect(iveness) -> Eff(iciency)  / SAC 1/8/19 - converted units from frac to %
   "Default ResDWHRSys:CSARatedEff"    ResDWHRSys:CSARatedEff  = {  42  }   ; updated default efficiency from 43 to 42 (per guidance from CEC) - SAC 09/23/21
;ResDWHRSys:IsReferenced,                  NotInput,   0,    0,   0,    1,  1,  1 BEMP_Int,  1,  0,  0, "",                 0,  0,                           3008, "flag indicating whether the DWHRSys is referenced by a DHW system (that serves Zones/DUs)."

      ; ResDHWSys:DWHRSysRef[ALL],                 Default,   0,    1,   1,    1,  1,  1 BEMP_Obj,  3,  1,   1, "DWHRSys", 0, "",  1003, "DWHRSys equipment" 
   "Default ResDHWSys:DWHRSysShowers[1]"    ResDHWSys:DWHRSysShowers[1]  = {
         if (LocalCompAssigned( DWHRSysRef[1] )) then  1  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysShowers[2]"    ResDHWSys:DWHRSysShowers[2]  = {
         if (LocalCompAssigned( DWHRSysRef[2] )) then  1  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysShowers[3]"    ResDHWSys:DWHRSysShowers[3]  = {
         if (LocalCompAssigned( DWHRSysRef[3] )) then  1  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysShowers[4]"    ResDHWSys:DWHRSysShowers[4]  = {
         if (LocalCompAssigned( DWHRSysRef[4] )) then  1  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysShowers[5]"    ResDHWSys:DWHRSysShowers[5]  = {
         if (LocalCompAssigned( DWHRSysRef[5] )) then  1  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysShowers[6]"    ResDHWSys:DWHRSysShowers[6]  = {
         if (LocalCompAssigned( DWHRSysRef[6] )) then  1  else  UNDEFINED  endif  }
   "Set ResDHWSys:NumDWHRSysRefs - Number of DWHRSys object references are defined"    ResDHWSys:NumDWHRSysRefs  = {
           if (LocalCompAssigned( DWHRSysRef[6] )) then  6
      else if (LocalCompAssigned( DWHRSysRef[5] )) then  5
      else if (LocalCompAssigned( DWHRSysRef[4] )) then  4
      else if (LocalCompAssigned( DWHRSysRef[3] )) then  3
      else if (LocalCompAssigned( DWHRSysRef[2] )) then  2
      else if (LocalCompAssigned( DWHRSysRef[1] )) then  1
      else   0  endif endif endif endif endif endif  }
   ; SAC 3/5/19 - added revised DWHR inputs replacing DWHRSysConfig w/ DWHRSysTakeCold & DWHRSysFeedHeater
   "Default ResDHWSys:DWHRSysTakeCold[1]"    ResDHWSys:DWHRSysTakeCold[1]  = {
         if (LocalCompAssigned( DWHRSysRef[1] )) then  ValidOr( DWHRSysShowers[1], 0 )  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysTakeCold[2]"    ResDHWSys:DWHRSysTakeCold[2]  = {
         if (LocalCompAssigned( DWHRSysRef[2] )) then  ValidOr( DWHRSysShowers[2], 0 )  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysTakeCold[3]"    ResDHWSys:DWHRSysTakeCold[3]  = {
         if (LocalCompAssigned( DWHRSysRef[3] )) then  ValidOr( DWHRSysShowers[3], 0 )  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysTakeCold[4]"    ResDHWSys:DWHRSysTakeCold[4]  = {
         if (LocalCompAssigned( DWHRSysRef[4] )) then  ValidOr( DWHRSysShowers[4], 0 )  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysTakeCold[5]"    ResDHWSys:DWHRSysTakeCold[5]  = {
         if (LocalCompAssigned( DWHRSysRef[5] )) then  ValidOr( DWHRSysShowers[5], 0 )  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysTakeCold[6]"    ResDHWSys:DWHRSysTakeCold[6]  = {
         if (LocalCompAssigned( DWHRSysRef[6] )) then  ValidOr( DWHRSysShowers[6], 0 )  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysFeedHeater[1]"  ResDHWSys:DWHRSysFeedHeater[1]  = {
         if (LocalCompAssigned( DWHRSysRef[1] )) then  0  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysFeedHeater[2]"  ResDHWSys:DWHRSysFeedHeater[2]  = {
         if (LocalCompAssigned( DWHRSysRef[2] )) then  0  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysFeedHeater[3]"  ResDHWSys:DWHRSysFeedHeater[3]  = {
         if (LocalCompAssigned( DWHRSysRef[3] )) then  0  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysFeedHeater[4]"  ResDHWSys:DWHRSysFeedHeater[4]  = {
         if (LocalCompAssigned( DWHRSysRef[4] )) then  0  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysFeedHeater[5]"  ResDHWSys:DWHRSysFeedHeater[5]  = {
         if (LocalCompAssigned( DWHRSysRef[5] )) then  0  else  UNDEFINED  endif  }
   "Default ResDHWSys:DWHRSysFeedHeater[6]"  ResDHWSys:DWHRSysFeedHeater[6]  = {
         if (LocalCompAssigned( DWHRSysRef[6] )) then  0  else  UNDEFINED  endif  }

   "Set ResDHWSys:TotDWHRSysShowers - 1"     ResDHWSys:TotDWHRSysShowers  = {
         if (LocalCompAssigned( DWHRSysRef[1] )) then  DWHRSysShowers[1]  else  0  endif  }
   "Set ResDHWSys:TotDWHRSysShowers - 2"     ResDHWSys:TotDWHRSysShowers  = {
         if (LocalCompAssigned( DWHRSysRef[2] )) then  TotDWHRSysShowers + DWHRSysShowers[2]  else  UNCHANGED  endif  }
   "Set ResDHWSys:TotDWHRSysShowers - 3"     ResDHWSys:TotDWHRSysShowers  = {
         if (LocalCompAssigned( DWHRSysRef[3] )) then  TotDWHRSysShowers + DWHRSysShowers[3]  else  UNCHANGED  endif  }
   "Set ResDHWSys:TotDWHRSysShowers - 4"     ResDHWSys:TotDWHRSysShowers  = {
         if (LocalCompAssigned( DWHRSysRef[4] )) then  TotDWHRSysShowers + DWHRSysShowers[4]  else  UNCHANGED  endif  }
   "Set ResDHWSys:TotDWHRSysShowers - 5"     ResDHWSys:TotDWHRSysShowers  = {
         if (LocalCompAssigned( DWHRSysRef[5] )) then  TotDWHRSysShowers + DWHRSysShowers[5]  else  UNCHANGED  endif  }
   "Set ResDHWSys:TotDWHRSysShowers - 6"     ResDHWSys:TotDWHRSysShowers  = {
         if (LocalCompAssigned( DWHRSysRef[6] )) then  TotDWHRSysShowers + DWHRSysShowers[6]  else  UNCHANGED  endif  }

   "Default ResDHWSys:TotShowersServed"   ResDHWSys:TotShowersServed  = {  max( 1, TotDWHRSysShowers )  }
   "Default ResDHWSys:TotBathsServed"     ResDHWSys:TotBathsServed    = {  1  }     ; SAC 4/1/19

   "Set ResDHWSys:NumDWHRSysDevices - error detection"   ResDHWSys:NumDWHRSysDevices  = {
         if (IfValidAnd( FloorAreaServed > 0 )==0) then  0   ; ignore errors in un-assigned DHWSystems
         else if (CentralDHW < 1)
         then  ; SFam or non-central MFam
               if (NumDWHRSysRefs > 0 .AND. TotShowersServed < TotDWHRSysShowers)
               then  -1
               else   0
               endif
         else  ; MFam Central systems
               0
         endif endif  }
   "Set ResDHWSys:NumDWHRSysDevices - DWHRSys 1"   ResDHWSys:NumDWHRSysDevices  = {
         if (NumDWHRSysDevices < 0 .OR. NumDWHRSysRefs < 1 .OR. IfValidAnd( FloorAreaServed > 0 )==0) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef[1]:CSARatedEff > 0 ) .AND. DWHRSysShowers[1] > 0) then  1
         else  UNCHANGED  endif endif  }
   "Set ResDHWSys:NumDWHRSysDevices - DWHRSys 2"   ResDHWSys:NumDWHRSysDevices  = {
         if (NumDWHRSysDevices < 0 .OR. NumDWHRSysRefs < 2 .OR. IfValidAnd( FloorAreaServed > 0 )==0) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef[2]:CSARatedEff > 0 ) .AND. DWHRSysShowers[2] > 0) then  NumDWHRSysDevices + 1
         else  UNCHANGED  endif endif  }
   "Set ResDHWSys:NumDWHRSysDevices - DWHRSys 3"   ResDHWSys:NumDWHRSysDevices  = {
         if (NumDWHRSysDevices < 0 .OR. NumDWHRSysRefs < 3 .OR. IfValidAnd( FloorAreaServed > 0 )==0) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef[3]:CSARatedEff > 0 ) .AND. DWHRSysShowers[3] > 0) then  NumDWHRSysDevices + 1
         else  UNCHANGED  endif endif  }
   "Set ResDHWSys:NumDWHRSysDevices - DWHRSys 4"   ResDHWSys:NumDWHRSysDevices  = {
         if (NumDWHRSysDevices < 0 .OR. NumDWHRSysRefs < 4 .OR. IfValidAnd( FloorAreaServed > 0 )==0) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef[4]:CSARatedEff > 0 ) .AND. DWHRSysShowers[4] > 0) then  NumDWHRSysDevices + 1
         else  UNCHANGED  endif endif  }
   "Set ResDHWSys:NumDWHRSysDevices - DWHRSys 5"   ResDHWSys:NumDWHRSysDevices  = {
         if (NumDWHRSysDevices < 0 .OR. NumDWHRSysRefs < 5 .OR. IfValidAnd( FloorAreaServed > 0 )==0) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef[5]:CSARatedEff > 0 ) .AND. DWHRSysShowers[5] > 0) then  NumDWHRSysDevices + 1
         else  UNCHANGED  endif endif  }
   "Set ResDHWSys:NumDWHRSysDevices - DWHRSys 6"   ResDHWSys:NumDWHRSysDevices  = {
         if (NumDWHRSysDevices < 0 .OR. NumDWHRSysRefs < 6 .OR. IfValidAnd( FloorAreaServed > 0 )==0) then  UNCHANGED
         else if (IfValidAnd( DWHRSysRef[6]:CSARatedEff > 0 ) .AND. DWHRSysShowers[6] > 0) then  NumDWHRSysDevices + 1
         else  UNCHANGED  endif endif  }

; TO DO - set based on DUT assignments ->  ResDHWSys:CntrlDWHRSysShowers,            NotInput,   0,    0,   0,    1,  1,  1 BEMP_Int,  1,   1003, "Number of showers this central DHWSys recovers heat from"
   "Set ResDHWSys:DWHRSysSummaryMsg"      ResDHWSys:DWHRSysSummaryMsg  = {
   if (IfValidAnd( CentralDHW > 0 )==0)
   then  ; SFam or non-central MFam
         if (Proj:IsComRuleset)
         then  "Describe DWHRSys devices for each DwellUnitType"
         else if (IfValidAnd( NumDWHRSysRefs > 0 )==0)
         then  "Assign DWHRSys devices below to enable shower drain heat recovery"
         else if (IfValidAnd( TotDWHRSysShowers > 0 )==0)
         then  "Specify number of shower drains below to enable shower drain ht recov"
         else if (IfValidAnd( TotShowersServed < TotDWHRSysShowers ))
         then  Format( "ERROR:  Total shower drains served by this system must be >= %.0f (number of DWHRSys showers)", TotDWHRSysShowers )
         else if (LocalCompAssigned( DWHRSysRef[1] ) .AND. IfValidAnd( DWHRSysShowers[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold[1] > DWHRSysShowers[1] ))
         then  Format( "ERROR:  System #1 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold[1], DWHRSysShowers[1] )
         else if (LocalCompAssigned( DWHRSysRef[1] ) .AND. IfValidAnd( DWHRSysShowers[1] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold[1] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater[1] > 0 )==0)
         then  Format( "ERROR:  System #1 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef[2] ) .AND. IfValidAnd( DWHRSysShowers[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold[2] > DWHRSysShowers[2] ))
         then  Format( "ERROR:  System #2 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold[2], DWHRSysShowers[2] )
         else if (LocalCompAssigned( DWHRSysRef[2] ) .AND. IfValidAnd( DWHRSysShowers[2] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold[2] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater[2] > 0 )==0)
         then  Format( "ERROR:  System #2 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef[3] ) .AND. IfValidAnd( DWHRSysShowers[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold[3] > DWHRSysShowers[3] ))
         then  Format( "ERROR:  System #3 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold[3], DWHRSysShowers[3] )
         else if (LocalCompAssigned( DWHRSysRef[3] ) .AND. IfValidAnd( DWHRSysShowers[3] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold[3] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater[3] > 0 )==0)
         then  Format( "ERROR:  System #3 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef[4] ) .AND. IfValidAnd( DWHRSysShowers[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold[4] > DWHRSysShowers[4] ))
         then  Format( "ERROR:  System #4 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold[4], DWHRSysShowers[4] )
         else if (LocalCompAssigned( DWHRSysRef[4] ) .AND. IfValidAnd( DWHRSysShowers[4] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold[4] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater[4] > 0 )==0)
         then  Format( "ERROR:  System #4 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef[5] ) .AND. IfValidAnd( DWHRSysShowers[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold[5] > DWHRSysShowers[5] ))
         then  Format( "ERROR:  System #5 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold[5], DWHRSysShowers[5] )
         else if (LocalCompAssigned( DWHRSysRef[5] ) .AND. IfValidAnd( DWHRSysShowers[5] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold[5] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater[5] > 0 )==0)
         then  Format( "ERROR:  System #5 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if (LocalCompAssigned( DWHRSysRef[6] ) .AND. IfValidAnd( DWHRSysShowers[6] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold[6] > DWHRSysShowers[6] ))
         then  Format( "ERROR:  System #6 showers (cold-side feed) (%.0f) must be <= shower drains served (%.0f).", DWHRSysTakeCold[6], DWHRSysShowers[6] )
         else if (LocalCompAssigned( DWHRSysRef[6] ) .AND. IfValidAnd( DWHRSysShowers[6] > 0 ) .AND. IfValidAnd( DWHRSysTakeCold[6] < 1 ) .AND. IfValidAnd( DWHRSysFeedHeater[6] > 0 )==0)
         then  Format( "ERROR:  System #6 must have either (or both) showers (cold-side feed) > 0 or feed water heater." )
         else if ((TotDWHRSysShowers / TotShowersServed) < 0.2)
         then  Format( "Heat being recovered from %.1f% of shower drains", (TotDWHRSysShowers * 100 / TotShowersServed) )
         else  Format( "Heat being recovered from %.0f% of shower drains", (TotDWHRSysShowers * 100 / TotShowersServed) )
         endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif
   else
         "Multifamily DWHRSys devices currently defined by DwellUnitType"
   endif  }

   "Set ResDHWSys:DWHRSysConfigDescrip"      ResDHWSys:DWHRSysConfigDescrip  = {
         if (NumDWHRSysRefs < 1) then  UNDEFINED
         else  "RTF\DWHX_Config.rtf"  endif  }

   ; SAC 1/6/19 - to facilitate multiple DHWSYs assignment UI
   "Set DwellUnitType:HaveDHWSysRef[1]"   DwellUnitType:HaveDHWSysRef[1]  = {
         if (IfValidAnd( NumDHWSysTypes >= 1 ) .AND. LocalCompAssigned( DHWSysRef[1] )) then  1  else  0  endif  }
   "Set DwellUnitType:HaveDHWSysRef[2]"   DwellUnitType:HaveDHWSysRef[2]  = {
         if (IfValidAnd( NumDHWSysTypes >= 2 ) .AND. LocalCompAssigned( DHWSysRef[2] )) then  1  else  0  endif  }
   "Set DwellUnitType:HaveDHWSysRef[3]"   DwellUnitType:HaveDHWSysRef[3]  = {
         if (IfValidAnd( NumDHWSysTypes >= 3 ) .AND. LocalCompAssigned( DHWSysRef[3] )) then  1  else  0  endif  }
   "Set DwellUnitType:HaveDHWSysRef[4]"   DwellUnitType:HaveDHWSysRef[4]  = {
         if (IfValidAnd( NumDHWSysTypes >= 4 ) .AND. LocalCompAssigned( DHWSysRef[4] )) then  1  else  0  endif  }
   "Set DwellUnitType:HaveDHWSysRef[5]"   DwellUnitType:HaveDHWSysRef[5]  = {
         if (IfValidAnd( NumDHWSysTypes >= 5 ) .AND. LocalCompAssigned( DHWSysRef[5] )) then  1  else  0  endif  }

   "Default DwellUnitType:TotBathsServed[1]"    DwellUnitType:TotBathsServed[1]  = {
         if (Proj:IsSFamResRuleset .OR. HaveDHWSysRef[1] == 0)
         then  UNDEFINED  else  1  endif  }
   "Default DwellUnitType:TotBathsServed[2]"    DwellUnitType:TotBathsServed[2]  = {
         if (Proj:IsSFamResRuleset .OR. HaveDHWSysRef[2] == 0)
         then  UNDEFINED  else  1  endif  }
   "Default DwellUnitType:TotBathsServed[3]"    DwellUnitType:TotBathsServed[3]  = {
         if (Proj:IsSFamResRuleset .OR. HaveDHWSysRef[3] == 0)
         then  UNDEFINED  else  1  endif  }
   "Default DwellUnitType:TotBathsServed[4]"    DwellUnitType:TotBathsServed[4]  = {
         if (Proj:IsSFamResRuleset .OR. HaveDHWSysRef[4] == 0)
         then  UNDEFINED  else  1  endif  }
   "Default DwellUnitType:TotBathsServed[5]"    DwellUnitType:TotBathsServed[5]  = {
         if (Proj:IsSFamResRuleset .OR. HaveDHWSysRef[5] == 0)
         then  UNDEFINED  else  1  endif  }

   "Default DwellUnitType:TotShowersServed[1]"    DwellUnitType:TotShowersServed[1]  = {
         if (Proj:IsSFamResRuleset .OR. HaveDHWSysRef[1] == 0)
         then  UNDEFINED  else  1  endif  }
   "Default DwellUnitType:TotShowersServed[2]"    DwellUnitType:TotShowersServed[2]  = {
         if (Proj:IsSFamResRuleset .OR. HaveDHWSysRef[2] == 0)
         then  UNDEFINED  else  1  endif  }
   "Default DwellUnitType:TotShowersServed[3]"    DwellUnitType:TotShowersServed[3]  = {
         if (Proj:IsSFamResRuleset .OR. HaveDHWSysRef[3] == 0)
         then  UNDEFINED  else  1  endif  }
   "Default DwellUnitType:TotShowersServed[4]"    DwellUnitType:TotShowersServed[4]  = {
         if (Proj:IsSFamResRuleset .OR. HaveDHWSysRef[4] == 0)
         then  UNDEFINED  else  1  endif  }
   "Default DwellUnitType:TotShowersServed[5]"    DwellUnitType:TotShowersServed[5]  = {
         if (Proj:IsSFamResRuleset .OR. HaveDHWSysRef[5] == 0)
         then  UNDEFINED  else  1  endif  }

   "Init DwellUnitType:HaveShowerDWHR"    DwellUnitType:HaveShowerDWHR = {  UNDEFINED  }
   "Perform DWHRSys defaulting for MFam models"    Proj:Action  = {
         if (Proj:IsComRuleset .AND. IfValidAnd( ResProj:EnergyCodeYearNum < 2019 )==0)
         then  EvalRulelist( "ProposedInput_MFam_DWHRSys" )
         else  UNCHANGED  endif  }     ; SAC 12/26/18

  ; SAC 8/6/13 - rules to set ResDHWSys:SolFracAnnRpt property
	"Set ResDHWSys:SolFracAnnRpt"		ResDHWSys:SolFracAnnRpt		= {
      switch (SolFracType)
			case  1 :	if (LocalStatus( SolFracAnn ) > 1) then  SolFracAnn  else  UNDEFINED  endif
			case  2 :	if (	LocalStatus( SolFracMon[1]  ) > 1 .AND. LocalStatus( SolFracMon[2]  ) > 1 .AND. LocalStatus( SolFracMon[3]  ) > 1 .AND. 
									LocalStatus( SolFracMon[4]  ) > 1 .AND. LocalStatus( SolFracMon[5]  ) > 1 .AND. LocalStatus( SolFracMon[6]  ) > 1 .AND. 
									LocalStatus( SolFracMon[7]  ) > 1 .AND. LocalStatus( SolFracMon[8]  ) > 1 .AND. LocalStatus( SolFracMon[9]  ) > 1 .AND. 
									LocalStatus( SolFracMon[10] ) > 1 .AND. LocalStatus( SolFracMon[11] ) > 1 .AND. LocalStatus( SolFracMon[12] ) > 1 )
							then  ( (SolFracMon[1]  * 31) + (SolFracMon[2]  * 28) + (SolFracMon[3]  * 31) + (SolFracMon[4]  * 30) +
									  (SolFracMon[5]  * 31) + (SolFracMon[6]  * 30) + (SolFracMon[7]  * 31) + (SolFracMon[8]  * 31) + 
									  (SolFracMon[9]  * 30) + (SolFracMon[10] * 31) + (SolFracMon[11] * 30) + (SolFracMon[12] * 31) ) / 365
							else  UNDEFINED  endif
			default :	UNDEFINED
		endswitch  }

   ; SAC 6/28/16 - new rule and subordinate rulelist to blast inputs to various recirculation loop inputs that are inconsistent w/ ResProj:DHWCalcMethod of "CSE*"
   ; SAC 7/29/18 - removed all logic pertaining to DHWCalcMethod (related to transition from T24DHW DLLs to CSE)
	"Blast T24DHW recirc loop settings"		ResDHWSys:Action	= {
		if (     LocalStatus( UseDefaultLoops  ) > 5 .OR. LocalStatus( RecircXtraIns    ) > 5 .OR.
					LocalStatus( RecircPipeLen[1] ) > 5 .OR. LocalStatus( RecircPipeDia[1] ) > 5 .OR.
					LocalStatus( RecircPipeLen[2] ) > 5 .OR. LocalStatus( RecircPipeDia[2] ) > 5 .OR. LocalStatus( RecircPipeLoc[2] ) > 5 .OR. 
					LocalStatus( RecircPipeLen[3] ) > 5 .OR. LocalStatus( RecircPipeDia[3] ) > 5 .OR. LocalStatus( RecircPipeLoc[3] ) > 5 .OR. 
					LocalStatus( RecircPipeLen[4] ) > 5 .OR. LocalStatus( RecircPipeDia[4] ) > 5 .OR. LocalStatus( RecircPipeLoc[4] ) > 5 .OR. 
					LocalStatus( RecircPipeLen[5] ) > 5 .OR. LocalStatus( RecircPipeDia[5] ) > 5 .OR. LocalStatus( RecircPipeLoc[5] ) > 5 .OR. 
					LocalStatus( RecircPipeLen[6] ) > 5 .OR. LocalStatus( RecircPipeDia[6] ) > 5 .OR. LocalStatus( RecircPipeLoc[6] ) > 5 )
		then	EvalRulelist( "BlastInputs_CSEDHW_RecircLoops", 1 )
		else	UNCHANGED  endif  }

   ; MJB 8/12/13 - assign default for proper UI screen display
   ; SAC 6/28/16 - revise default of ResDHWSys:UseDefaultLoops to '1' for CSE DHWCalcMethod
	"Default ResDHWSys:UseDefaultLoops"		ResDHWSys:UseDefaultLoops	= {  1  }
   ; SAC 7/29/18 - removed all logic pertaining to DHWCalcMethod (related to transition from T24DHW DLLs to CSE)
   ;   if (ResProj:DHWCalcMethod < 1) then  0  else  1  endif  }
	"Default ResDHWSys:NRecircLoops"			ResDHWSys:NRecircLoops	= {  1  }

   ; SAC 11/30/18 - 2019 CASE Compact Distribution input
   "Backward compat of old Compact Distrib option"    ResDHWSys:Action  = {
         if (SystemType == 100)
         then  EvalRulelist( "DHWSysCompactDistrib_ConvertTo2019", 1 )
         else  UNCHANGED  endif  }

   ; SAC 12/4/18 - 2019 CASE Compact Distribution input
      ; ResDHWSys:CompactDistrib  - default via enumerations
      ; ResDHWSys:CDMBathFixDist  - no default
      ; ResDHWSys:CDKitFixDist    - no default
      ; ResDHWSys:CDThirdFixDist  - no default

   "Set ResDHWSys:IsRecircSystem"      ResDHWSys:IsRecircSystem  = {
         if (CentralDHW < 1)
         then  switch (SystemType)
                  case    5248 :  1  ; "Recirculation with demand control, push button"
                  case    5504 :  1  ; "Recirculation with demand control, occupancy/motion sensor"
                  case    4992 :  1  ; "Recirculation with non-demand control (continuous pumping)"
                  case 8393856 :  1  ; "(HERS req'd) Recirculation with demand control, push button"
                  case 8394112 :  1  ; "(HERS req'd) Recirculation with demand control, occupancy/motion sensor"
                  default      :  0
               endswitch
         else  if (MFamDistType > 0)
               then  1
               else  0  endif
         endif  }    ; SAC 12/4/18

   "Set ResDHWSys:CmpctDistAllowed flag"   ; SAC 12/11/18 - per request from CEC/DT (tic #975)
      ResDHWSys:CmpctDistAllowed = {
         if (Proj:IsComRuleset .AND. CentralDHW) then  0
         else if (Proj:IsComRuleset .AND. CentralDHW = 0 .AND. IsRecircSystem) then  0
         else if (CentralDHW = 0 .AND.
                  (SystemType ==    4608 .OR.  ; "Central Parallel Piping"                
                   SystemType ==    4609 .OR.  ; "Point of use"                           
                   SystemType == 8392704 .OR.  ; "(HERS req'd) Pipe Insulation, All Lines"
                   SystemType == 8393216))     ; "(HERS req'd) Central Parallel Piping"
         then  0
         else  1  endif endif endif  }
   "Blast Compact Distrib selection for MFam, Non-Central systems w/ Recirc"   ; SAC 12/11/18 - per request from CEC/DT (tic #975)
      ResDHWSys:Action = {  if (CmpctDistAllowed .OR. CompactDistrib = 0) then  UNCHANGED
                         else if (Proj:IsComRuleset .AND. CentralDHW)
                         then  EvalRulelist( "DHWSysCompactDistrib_BlastForMFamCentral", 1 )
                         else if (Proj:IsComRuleset .AND. CentralDHW = 0 .AND. IsRecircSystem)
                         then  EvalRulelist( "DHWSysCompactDistrib_BlastForMFamNonCentralRecirc", 1 )
                         else  UNCHANGED  ; should never get here
                         endif endif endif  }

   "Perform Compact Distribution defaulting for MFam models"    Proj:Action  = {
         if (Proj:IsComRuleset)
         then  EvalRulelist( "ProposedInput_ResMFam_CompactDistribution" )
         else  UNCHANGED  endif  }     ; SAC 12/30/18

   "Set Combined Compact Distrib & DWHRSys Messages for MFam models"    Proj:Action  = {
         if (Proj:IsComRuleset)
         then  EvalRulelist( "ProposedInput_MFam_DwellUnitType_FixtSrvdDWHRMsg" )
         else  UNCHANGED  endif  }     ; SAC 1/5/19

	; SAC 10/8/15 - added defaults per BAW request
	"Default ResDHWSys:RecircPumpHP"			ResDHWSys:RecircPumpHP	= {
      if (CentralDHW < 0.5 .OR. MFamDistType < 1) then  UNDEFINED
      else	0.5  endif  }
	"Default ResDHWSys:RecircPumpEff"		ResDHWSys:RecircPumpEff	= {
      if (CentralDHW < 0.5 .OR. MFamDistType < 1) then  UNDEFINED
      else	0.6  endif  }		; 0.6 default based on MFam prototype input

   ; SAC 10/18/17 - add default of ResDHWSys:DistribSysMult via rulelist based on SystemType to allow for 2019 override in UI
   "Default of ResDHWSys:DistribSysMult if not user-defined (for code vintages < 2019)"    ResDHWSys:Action  = {
         if (LocalStatus( DistribSysMult ) > 6 .AND. IfValidAnd( ResProj:EnergyCodeYearNum < 2019 )==0) then  UNCHANGED
         else  EvalRulelist( "ForceDefault_DHWSys_DistribSysMult", 1 )  endif  }

   ; SAC 2/16/18 - (tic #983)
   ; SAC 1/5/20 - added logic for new Central HPWH system inputs (tic #862)
   ; revised logic to accommodate heaters defined as ResHVACSys and added for loop for htrs 2-6 - SAC 10/17/24 (tic #3629)
   "Set ResDHWSys:HeatersAllElec - whether all assigned DHW heaters are electric (1)"     ResDHWSys:HeatersAllElec = {
         if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  1
    else if (IfValidAnd( HeaterMultFlt[1] > 0 ) .AND. LocalCompAssigned( DHWHeater[1] ) .AND.
             ( (LocalCompAssigned( DHWHeater[1] ) == ComponentType( "ResWtrHtr"  ) .AND. IfValidAnd( DHWHeater[1]:HeaterElementType = 1 )==0) .OR.
               (LocalCompAssigned( DHWHeater[1] ) == ComponentType( "ResHVACSys" ) .AND. IfValidAnd( DHWHeater[1]:Type              = 2 )   ) )) then  1  else  0  endif endif  }
   "Set ResDHWSys:HeatersAllElec - whether all assigned DHW heaters are electric (2-6)"   for:#SYS=(2to6)   ResDHWSys:HeatersAllElec = {
         if (IfValidAnd( HeaterMultFlt[#SYS] > 0 ) .AND. LocalCompAssigned( DHWHeater[#SYS] ) .AND. CentralDHWTypeVal != 2 .AND.
             ( (LocalCompAssigned( DHWHeater[#SYS] ) == ComponentType( "ResWtrHtr"  ) .AND. IfValidAnd( DHWHeater[#SYS]:HeaterElementType = 1 )) .OR.
               (LocalCompAssigned( DHWHeater[#SYS] ) == ComponentType( "ResHVACSys" ) .AND. IfValidAnd( DHWHeater[#SYS]:Type             != 2 )) )) then  0  else  UNCHANGED  endif  }
   ;"Set ResDHWSys:HeatersAllElec - whether all assigned DHW heaters are electric (3)"     ResDHWSys:HeatersAllElec = {
   ;      if (IfValidAnd( HeaterMultFlt[3] > 0 ) .AND. LocalCompAssigned( DHWHeater[3] ) .AND. CentralDHWTypeVal != 2 .AND.
   ;          IfValidAnd( DHWHeater[3]:HeaterElementType = 1 )) then  0  else  UNCHANGED  endif  }
   ;"Set ResDHWSys:HeatersAllElec - whether all assigned DHW heaters are electric (4)"     ResDHWSys:HeatersAllElec = {
   ;      if (IfValidAnd( HeaterMultFlt[4] > 0 ) .AND. LocalCompAssigned( DHWHeater[4] ) .AND. CentralDHWTypeVal != 2 .AND.
   ;          IfValidAnd( DHWHeater[4]:HeaterElementType = 1 )) then  0  else  UNCHANGED  endif  }
   ;"Set ResDHWSys:HeatersAllElec - whether all assigned DHW heaters are electric (5)"     ResDHWSys:HeatersAllElec = {
   ;      if (IfValidAnd( HeaterMultFlt[5] > 0 ) .AND. LocalCompAssigned( DHWHeater[5] ) .AND. CentralDHWTypeVal != 2 .AND.
   ;          IfValidAnd( DHWHeater[5]:HeaterElementType = 1 )) then  0  else  UNCHANGED  endif  }
   ;"Set ResDHWSys:HeatersAllElec - whether all assigned DHW heaters are electric (6)"     ResDHWSys:HeatersAllElec = {
   ;      if (IfValidAnd( HeaterMultFlt[6] > 0 ) .AND. LocalCompAssigned( DHWHeater[6] ) .AND. CentralDHWTypeVal != 2 .AND.
   ;          IfValidAnd( DHWHeater[6]:HeaterElementType = 1 )) then  0  else  UNCHANGED  endif  }

   ; SAC 12/11/18 - HPWHSIZE
   ; revised logic to accommodate heaters defined as ResHVACSys and added for loop for htrs 2-6 - SAC 10/17/24 (tic #3629)
   "Set ResDHWSys:NumElecHeaters (1)"     ResDHWSys:NumElecHeaters = {
         if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  1
    else if (IfValidAnd( HeaterMultFlt[1] > 0 ) .AND. LocalCompAssigned( DHWHeater[1] ) .AND.
             ( (LocalCompAssigned( DHWHeater[1] ) == ComponentType( "ResWtrHtr"  ) .AND. IfValidAnd( DHWHeater[1]:HeaterElementType != 1 )) .OR.
               (LocalCompAssigned( DHWHeater[1] ) == ComponentType( "ResHVACSys" ) .AND. IfValidAnd( DHWHeater[1]:Type               = 2 )) )) then  1  else  0  endif endif  }
   "Set ResDHWSys:NumElecHeaters (2-6)"   for:#SYS=(2to6)   ResDHWSys:NumElecHeaters = {
         if (IfValidAnd( HeaterMultFlt[#SYS] > 0 ) .AND. LocalCompAssigned( DHWHeater[#SYS] ) .AND.
             ( (LocalCompAssigned( DHWHeater[#SYS] ) == ComponentType( "ResWtrHtr"  ) .AND. IfValidAnd( DHWHeater[#SYS]:HeaterElementType != 1 )) .OR.
               (LocalCompAssigned( DHWHeater[#SYS] ) == ComponentType( "ResHVACSys" ) .AND. IfValidAnd( DHWHeater[#SYS]:Type               = 2 )) )) then  NumElecHeaters + 1  else  UNCHANGED  endif  }
   ;"Set ResDHWSys:NumElecHeaters (3)"     ResDHWSys:NumElecHeaters = {
   ;      if (IfValidAnd( HeaterMultFlt[3] > 0 ) .AND. LocalCompAssigned( DHWHeater[3] ) .AND.
   ;          IfValidAnd( DHWHeater[3]:HeaterElementType != 1 )) then  NumElecHeaters + 1  else  UNCHANGED  endif  }
   ;"Set ResDHWSys:NumElecHeaters (4)"     ResDHWSys:NumElecHeaters = {
   ;      if (IfValidAnd( HeaterMultFlt[4] > 0 ) .AND. LocalCompAssigned( DHWHeater[4] ) .AND.
   ;          IfValidAnd( DHWHeater[4]:HeaterElementType != 1 )) then  NumElecHeaters + 1  else  UNCHANGED  endif  }
   ;"Set ResDHWSys:NumElecHeaters (5)"     ResDHWSys:NumElecHeaters = {
   ;      if (IfValidAnd( HeaterMultFlt[5] > 0 ) .AND. LocalCompAssigned( DHWHeater[5] ) .AND.
   ;          IfValidAnd( DHWHeater[5]:HeaterElementType != 1 )) then  NumElecHeaters + 1  else  UNCHANGED  endif  }
   ;"Set ResDHWSys:NumElecHeaters (6)"     ResDHWSys:NumElecHeaters = {
   ;      if (IfValidAnd( HeaterMultFlt[6] > 0 ) .AND. LocalCompAssigned( DHWHeater[6] ) .AND.
   ;          IfValidAnd( DHWHeater[6]:HeaterElementType != 1 )) then  NumElecHeaters + 1  else  UNCHANGED  endif  }

   "Set ResDHWSys:IsNewAssignedAWHP"      ResDHWSys:IsNewAssignedAWHP =          ; SAC 12/12/22 (Res tic #1318)   ; expand to include HeatPumpDHWCombo - SAC 09/20/24 (tic #3629)
      {  if (LocalCompAssigned( DHWHeater[1] ) == ComponentType( "ResHVACSys" ))
         then  if (IfValidAnd( DHWHeater[1]:Type  = 2 ) .AND. IfValidAnd( DHWHeater[1]:IsNew > 0 ) .AND.
                   ( IfValidAnd( DHWHeater[1]:HtPumpSysType = 34 ) .OR. IfValidAnd( DHWHeater[1]:HtPumpSysType = 35 ) ) .AND.
                   IfValidAnd( DHWHeater[1]:HtPmpFlrAreaServed[1] > 0 ))
               then  1
               else  0  endif
         else  0  endif  }

   ; to assist in error checking - ensure Fule meter/rate assigned when fuel used in building - SAC 03/06/24
   ; revised logic to accommodate heaters defined as ResHVACSys and added for loop for htrs 2-6 - SAC 10/17/24 (tic #3629)
   ; revised logic to accommodate heaters defined as ResHVACSys and added for loop for htrs 2-6 - SAC 10/17/24 (tic #3629)
   "Set ResDHWSys:NumFuelHeaters (1)"     ResDHWSys:NumFuelHeaters = {
         if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  0
    else if (IfValidAnd( HeaterMultFlt[1] > 0 ) .AND. LocalCompAssigned( DHWHeater[1] ) .AND.
             ( (LocalCompAssigned( DHWHeater[1] ) == ComponentType( "ResWtrHtr"  ) .AND. IfValidAnd( DHWHeater[1]:HeaterElementType = 1 )) .OR.
               (LocalCompAssigned( DHWHeater[1] ) == ComponentType( "ResHVACSys" ) .AND. IfValidAnd( DHWHeater[1]:Type             != 2 )) )) then  1  else  0  endif endif  }
   "Set ResDHWSys:NumFuelHeaters (2-6)"   for:#SYS=(2to6)   ResDHWSys:NumFuelHeaters = {
         if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  UNCHANGED
    else if (IfValidAnd( HeaterMultFlt[#SYS] > 0 ) .AND. LocalCompAssigned( DHWHeater[#SYS] ) .AND.
             ( (LocalCompAssigned( DHWHeater[#SYS] ) == ComponentType( "ResWtrHtr"  ) .AND. IfValidAnd( DHWHeater[#SYS]:HeaterElementType = 1 )) .OR.
               (LocalCompAssigned( DHWHeater[#SYS] ) == ComponentType( "ResHVACSys" ) .AND. IfValidAnd( DHWHeater[#SYS]:Type             != 2 )) )) then  NumFuelHeaters + 1  else  UNCHANGED  endif endif  }
   ;"Set ResDHWSys:NumFuelHeaters (3)"     ResDHWSys:NumFuelHeaters = {
   ;      if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  UNCHANGED
   ; else if (IfValidAnd( HeaterMultFlt[3] > 0 ) .AND. LocalCompAssigned( DHWHeater[3] ) .AND.
   ;          IfValidAnd( DHWHeater[3]:HeaterElementType = 1 )) then  NumFuelHeaters + 1  else  UNCHANGED  endif endif  }
   ;"Set ResDHWSys:NumFuelHeaters (4)"     ResDHWSys:NumFuelHeaters = {
   ;      if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  UNCHANGED
   ; else if (IfValidAnd( HeaterMultFlt[4] > 0 ) .AND. LocalCompAssigned( DHWHeater[4] ) .AND.
   ;          IfValidAnd( DHWHeater[4]:HeaterElementType = 1 )) then  NumFuelHeaters + 1  else  UNCHANGED  endif endif  }
   ;"Set ResDHWSys:NumFuelHeaters (5)"     ResDHWSys:NumFuelHeaters = {
   ;      if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  UNCHANGED
   ; else if (IfValidAnd( HeaterMultFlt[5] > 0 ) .AND. LocalCompAssigned( DHWHeater[5] ) .AND.
   ;          IfValidAnd( DHWHeater[5]:HeaterElementType = 1 )) then  NumFuelHeaters + 1  else  UNCHANGED  endif endif  }
   ;"Set ResDHWSys:NumFuelHeaters (6)"     ResDHWSys:NumFuelHeaters = {
   ;      if (Proj:IsComRuleset .AND. CentralDHW > 0 .AND. CentralDHWTypeVal == 2) then  UNCHANGED
   ; else if (IfValidAnd( HeaterMultFlt[6] > 0 ) .AND. LocalCompAssigned( DHWHeater[6] ) .AND.
   ;          IfValidAnd( DHWHeater[6]:HeaterElementType = 1 )) then  NumFuelHeaters + 1  else  UNCHANGED  endif endif  }

  "Look Up UEF Model Draw Variable"   ResWtrHtr:UEFModelDrawVar = {
    if( IsUEF )
    then if( HeaterElementType = 5 )
      then CAUEFConvCat:DrawVarIdx( "HeaterElementTypeIdx",HeaterElementType, 
                                  "TankTypeIdx",0 )
      else CAUEFConvCat:DrawVarIdx( "HeaterElementTypeIdx",HeaterElementType, 
                                  "TankTypeIdx",HeaterType )
      endif
    else 0
    endif }

  "Set UEF Conv Draw Pattern"   ResWtrHtr:UEFModelDrawPattern = {
    if( IfValidAnd( UEFModelDrawVar = 1 ) )
    then if ( LocalStatus( FirstHourRating ) < 1 )  then 0 else
         if ( FirstHourRating < 18 ) then 1 else
         if ( FirstHourRating < 51 ) then 2 else
         if ( FirstHourRating < 75 ) then 3 else 4
         endif endif endif endif
    else
    if( IfValidAnd( UEFModelDrawVar = 2 ) )
    then if ( LocalStatus( RatedFlow ) < 1  ) then 0 else
         if ( RatedFlow < 1.7 ) then 1 else
         if ( RatedFlow < 2.8 ) then 2 else
         if ( RatedFlow < 4 ) then 3 else 4
         endif endif endif endif
    else "na"
    endif endif }

  "Set Heat Pump UEF Model Drawn Volume" ResWtrHtr:UEFModelHPDrawnVolume = {
    if( IsUEF .AND.
        HeaterElementType = 5 )
    then switch( UEFModelDrawPattern )
      case 1:   ;VerySmall
        10
      case 2:   ;Low
        38
      case 3:   ;Medium
        55
      case 4:   ;High
        84
      default: 
        0   
      endswitch
    else 0
    endif }


  "Look Up UEFNew Coef1"  ResWtrHtr:UEFNewCoef1 = {
    if( IsUEF )
    then CAUEFConvCat:UEFNewCoef1( "HeaterElementTypeIdx",HeaterElementType, 
                                 "TankTypeIdx",HeaterType )
    else 0
    endif }

  "Look Up UEFNew Coef2"  ResWtrHtr:UEFNewCoef2 = {
    if( IsUEF )
    then CAUEFConvCat:UEFNewCoef2( "HeaterElementTypeIdx",HeaterElementType, 
                                 "TankTypeIdx",HeaterType )
    else 0
    endif }

  "Look Up UEFNew Coef3"  ResWtrHtr:UEFNewCoef3 = {
    if( IsUEF )
    then CAUEFConvCat:UEFNewCoef3( "HeaterElementTypeIdx",HeaterElementType, 
                                 "TankTypeIdx",HeaterType )
    else 0
    endif }

;"store BEMProc details"		ResWtrHtr:Action = {  if (IsUEF .AND. LocalStatus( EnergyFactor ) > 0.5 .AND. IfValidAnd( UEFNewCoef1 > 0 )==0)
;   then  StoreBEMProc( Format( "bogus UEFNewCoef1-%s-%g", ResProj:RunAbbrev, ComponentIndex() ), 0 )  else  UNCHANGED  endif  }
  "Calculate UEF Model from UEF New"  ResWtrHtr:UEFModel = {
     if( IsUEF .AND.
         LocalStatus( EnergyFactor ) > 0.5 )
     then ( EnergyFactor - UEFNewCoef2 - 
            UEFModelHPDrawnVolume * UEFNewCoef3 ) / UEFNewCoef1
     else 0
     endif }

  "Look Up UEF Model Type"   ResWtrHtr:UEFModelType = {
    if( IsUEF )
    then CAUEFConvCat:ModelTypeIdx( "HeaterElementTypeIdx",HeaterElementType, 
                                   "TankTypeIdx",HeaterType )
    else 0
    endif }

  "Look Up UEF Conv Coef 1"   ResWtrHtr:UEFModelCoef1 = {
    if( IsUEF .AND. 
        LocalStatus( UEFModelType ) > 0.5 .AND.
        LocalStatus( UEFModelDrawPattern ) > 0.5 .AND. 
        LocalStatus( HeaterElementType ) > 0.5 )
    then CAUEFModelCoef:Coef1("ModelTypeIdx",UEFModelType,
                            "DrawPatternIdx",UEFModelDrawPattern,
                            "HeaterElementTypeIdx",HeaterElementType )
    else 0
    endif }

  "Look Up UEF Conv Coef 2"   ResWtrHtr:UEFModelCoef2 = {
    if( IsUEF .AND. 
        LocalStatus( UEFModelType ) > 0.5 .AND.
        LocalStatus( UEFModelDrawPattern ) > 0.5 .AND. 
        LocalStatus( HeaterElementType ) > 0.5 )
    then CAUEFModelCoef:Coef2("ModelTypeIdx",UEFModelType,
                            "DrawPatternIdx",UEFModelDrawPattern,
                            "HeaterElementTypeIdx",HeaterElementType )
    else 0
    endif }

  "Look Up UEF Conv Coef 3"   ResWtrHtr:UEFModelCoef3 = {
    if( IsUEF .AND. 
        LocalStatus( UEFModelType ) > 0.5 .AND.
        LocalStatus( UEFModelDrawPattern ) > 0.5 .AND. 
        LocalStatus( HeaterElementType ) > 0.5 )
    then CAUEFModelCoef:Coef3("ModelTypeIdx",UEFModelType,
                            "DrawPatternIdx",UEFModelDrawPattern,
                            "HeaterElementTypeIdx",HeaterElementType )
    else 0
    endif }

  "Look Up UEF Conv Coef 4"   ResWtrHtr:UEFModelCoef4 = {
    if( IsUEF .AND. 
        LocalStatus( UEFModelType ) > 0.5 .AND.
        LocalStatus( UEFModelDrawPattern ) > 0.5 .AND. 
        LocalStatus( HeaterElementType ) > 0.5 )
    then CAUEFModelCoef:Coef4("ModelTypeIdx",UEFModelType,
                            "DrawPatternIdx",UEFModelDrawPattern,
                            "HeaterElementTypeIdx",HeaterElementType )
    else 0
    endif }

  "Calculate Energy Factor from UEFModel"  ResWtrHtr:UEFModelCalcEF = {
    if( IsUEF )
    then if( IfValidAnd( UEFModelType = 1 ) )  ;WHAM
      then switch ( HeaterElementType )
        case 0:   ;Electric Resistance
          -( ( RecovEff/100 * UEFModel * UEFModelCoef2 ) - 
             ( RecovEff/100 * RecovEff/100 * InputRatingSim*3.412 * UEFModel * UEFModelCoef1 ) ) /
           ( ( ( UEFModel - RecovEff/100 ) * UEFModelCoef4 ) + 
             ( ( RecovEff/100 * RecovEff/100 * InputRatingSim*3.412 - RecovEff/100 * InputRatingSim*3.412 * UEFModel ) * UEFModelCoef3 ) -
             ( UEFModel * UEFModelCoef2 ) + 
             ( RecovEff/100 * InputRatingSim*3.412 * UEFModel * UEFModelCoef1 ) )
        case 1:   ;Gas
          -( ( RecovEff/100 * UEFModel * UEFModelCoef2 ) - 
             ( RecovEff/100 * RecovEff/100 * InputRatingSim * UEFModel * UEFModelCoef1 ) ) /
           ( ( ( UEFModel - RecovEff/100 ) * UEFModelCoef4 ) + 
             ( ( RecovEff/100 * RecovEff/100 * InputRatingSim - RecovEff/100 * InputRatingSim * UEFModel ) * UEFModelCoef3 ) -
             ( UEFModel * UEFModelCoef2 ) + 
             ( RecovEff/100 * InputRatingSim * UEFModel * UEFModelCoef1 ) )
        default: 0
        endswitch
      else if( IfValidAnd( UEFModelType = 5 ) )  ;DV - UEF Heat Pump
        then ( EnergyFactor - UEFNewCoef2 - UEFModelHPDrawnVolume * UEFNewCoef3 ) /
             ( UEFNewCoef1 )
      else 0
      endif endif
    else 0
    endif }

  "Calculate Recovery Efficiency from UEFModel"  ResWtrHtr:UEFModelCalcRE = {
    if( IsUEF )
    then if( IfValidAnd( UEFModelType = 2 ) )  ; MODEL
      then -( UEFModel ) / ( UEFModelCoef1 * UEFModel - 1 )
      else 0
      endif
    else 0
    endif }

  "Calculate Standby Loss from UEFModel"  ResWtrHtr:UEFModelCalcSL = {
    if( IsUEF )
    then if( IfValidAnd( UEFModelType = 3 ) )  ; RD
      then -( InputRatingSim * UEFModel - InputRatingSim * RecovEff/100 ) /
            ( ( UEFModelCoef1 * UEFModelCoef2 * InputRatingSim * RecovEff/100 - UEFModelCoef1 ) * UEFModel )
      else 0
      endif
    else 0
    endif }

  "Calculate Thermal Efficiency from UEFModel"  ResWtrHtr:UEFModelCalcTE = {
    if( IsUEF )
    then if( IfValidAnd( UEFModelType = 4 ) ) ; MODEL_RD
      then -( UEFModel ) / ( UEFModelCoef1 * UEFModel - 1 )
      else 0
      endif
    else 0
    endif }

   ; SAC 10/24/19 - inputs to test new electric central DHW modeling in CSE
   ; SAC 12/30/19 - expand use of NewCentralElecModel flag to include central systems w/ new Commercial Packaged Boiler(s) (tic #862)
   ; SAC 1/5/20 - added logic to hard-wire TotNumDHWHeaters to 1 (or greater) for new Central HPWH systems (tic #862)
   "Set ResDHWSys:CentralElecDHW flag"    ResDHWSys:CentralElecDHW  =
      {  if (IfValidAnd( CentralDHW > 0 ) .AND. (IfValidAnd( HeatersAllElec > 0 ) .OR. CentralDHWTypeVal == 2)) then  1  else  0  endif  }

   ; switched logic in following two rules to represent default of '1' for ALL central models w/ recirc (regardless of heater fuel) - SAC 2/1/20
   "Force reset of NewCentralElecModel flag if not ResearchMode & pertinent"     ResDHWSys:Action  =
      {  if (IfValidAnd( Proj:EnableResearchMode > 0 ) .AND.
             IfValidAnd( Proj:AnalysisVersion > 190101 )) then  UNCHANGED  ; allow
         else  EvalRulelist( "ForceReset_DHWSys_NewCentralElecModel", 1 )  endif  }
   "default ResDHWSys:NewCentralElecModel"   ResDHWSys:NewCentralElecModel  =
      {  if (IfValidAnd( CentralDHW > 0 ) .AND. MFamDistType > 0) then  1
         else  0  endif  }

   ; ResDHWSys:CHPWHSysDescrip - not defaulted
   "CHPWH backward compatibility"      ResDHWSys:Action =      ; SAC 5/27/20
      {  if (LocalStatus( CHPWHSysDescrip ) < 5 .AND. (LocalStatus( CHPWHCompType ) > 5 .OR. LocalStatus( CHPWHPrimTankVol ) > 5))
         then  EvalRulelist( "BackwardCompat_DHWSys_CHPWH", 1 )  else  UNCHANGED  endif  }

   ; removed default - SAC 5/27/20
   ;"Default ResDHWSys:CHPWHCompType - Central HPWH compressor type"     ResDHWSys:CHPWHCompType  =    ; SAC 1/3/20 (tic #862)
   ;   {  if (CentralDHWTypeVal == 2) then  "Sanden"
   ;      else  UNDEFINED  endif  }

   "Set ResDHWSys:CHPWHCompTypeLbl"    ResDHWSys:CHPWHCompTypeLbl  =       ; SAC 6/1/20    ; SAC 02/18/21 (tic #1260)
      {  if (CentralDHWTypeVal != 2) then  UNDEFINED
         else  switch (CHPWHSysDescrip)
                  case  1 :   if (CHPWHIntegPkgType == 2)
                              then  "Commercial HPWH Product:"
                              else  "NEEA HPWH Brand/Model:"   endif
                  case  2 :  "HPWH/Compressor Model:"
                  case  3 :  "HPWH/Compressor Model:"
                  default :  UNDEFINED
               endswitch  endif  }
   "Set ResDHWSys:CHPWHNumCompLbl"     ResDHWSys:CHPWHNumCompLbl  =        ; SAC 02/18/21 (tic #1260)
      {  if (CentralDHWTypeVal != 2) then  UNDEFINED
         else  switch (CHPWHSysDescrip)
                  case  1 :   if (CHPWHIntegPkgType == 2)
                              then  "HPWH Count:"
                              else  "NEEA HPWH Count:"   endif
                  case  2 :  "Cmprsr/Heater Count:"
                  case  3 :  "Cmprsr/Heater Count:"
                  default :  UNDEFINED
               endswitch  endif  }

   "CHPWH Loop (secondary) Tank backward compat"   ResDHWSys:Action =      ; SAC 02/23/22
      {  if (LocalStatus( CHPWHLoopTankType   ) < 1 .OR.
             LocalStatus( CHPWHLoopTankConfig ) > 5) then  UNCHANGED
         else if (CHPWHLoopTankType == 8 .OR. CHPWHLoopTankType == 9)
         then  EvalRulelist( "BackwardCompat_ResDHWSys_CHPWHLoopTankType_IntegPkg", 1 )
         else if (CHPWHLoopTankType == 0)
         then  EvalRulelist( "BackwardCompat_ResDHWSys_CHPWHLoopTankType_None", 1 )
         else  EvalRulelist( "BackwardCompat_ResDHWSys_CHPWHLoopTankType_Present", 1 )
         endif endif endif  }
      ; allow enum defaulting -
      ;    "CHPWHLoopTankConfig",   BEMP_Sym,  1,  0,  0,   Opt,  "",                 0,  0,                       1003, "Presence and configuration of central HPWH secondary tank",  ""      ; SAC 02/23/22
      ;    "CHPWHLoopTankType",     BEMP_Sym,  1,  0,  0,   Opt,  "",                 0,  0,                       1003, "type of central HPWH secondary tank",  ""      ; SAC 5/27/20
      ;    "CHPWHLoopTankIntegPkgType", BEMP_Sym,  1,  0,  0,   Opt,  "",             0,  0,                       1003, "Type of integrated/packaged secondary HPWH system",  ""    ; SAC 02/23/22
   "Set ResDHWSys:CHPWHLoopTankTypeVal"      ResDHWSys:CHPWHLoopTankTypeVal =    ; SAC 02/23/22
      {  if (CHPWHLoopTankConfig < 1) then  0   ; none
         else if (CHPWHLoopTankType == 2)
         then  switch (CHPWHLoopTankIntegPkgType)
                  case  2 :  3                  ; Commercial
                  default :  2  endswitch       ; NEEA
         else  CHPWHLoopTankType                ; ElecRes (1), SinglePass (10) or MultiPass (11)
         endif endif  }

   "Set ResDHWSys:CHPWHLoopTankCompTypeLbl"    ResDHWSys:CHPWHLoopTankCompTypeLbl  =       ; SAC 6/1/20
      {  if (CentralDHWTypeVal != 2) then  UNDEFINED
         else  switch (CHPWHLoopTankTypeVal)
                  case  1 :  if (IfValidAnd( Proj:EnableResearchMode > 0 ))
                             then  "Res Control Scheme:"
                             else  UNDEFINED  endif
                  case  2 :  "NEEA HPWH Brand/Model:"
                  case  3 :  "Commercial HPWH Model:"
                  case 10 :  "HPWH/Compressor Model:"
                  case 11 :  "HPWH/Compressor Model:"
                  default :  UNDEFINED
               endswitch  endif  }
   "Set ResDHWSys:CHPWHLoopTankCompCntLbl"     ResDHWSys:CHPWHLoopTankCompCntLbl  =
      {  if (CentralDHWTypeVal != 2) then  UNDEFINED
         else  switch (CHPWHLoopTankTypeVal)
                  case  2 :  "NEEA HPWH Count:"
                  case  3 :  "Com HPWH Count:"
                  case 10 :  "Cmprsr/Heater Count:"
                  case 11 :  "Cmprsr/Heater Count:"
                  case  1 :  "Heater Count:"
                  default :  UNDEFINED
               endswitch  endif  }

   ; removed default - SAC 5/27/20
   ;"Default ResDHWSys:CHPWHLoopTankVol"   ResDHWSys:CHPWHLoopTankVol  =    ; SAC 1/5/20 - tank volumes based on table from BAW e-mailed 12/19/19 (tic #862)
   ;   {  if (CentralDHWTypeVal != 2 .OR. IfValidAnd( NumAssignedDUFracs > 0 )==0) then  UNDEFINED
   ;      else if ( NumAssignedDUFracs <=  7 ) then   40
   ;      else if ( NumAssignedDUFracs <= 11 ) then   80
   ;      else if ( NumAssignedDUFracs <= 23 ) then   96
   ;      else if ( NumAssignedDUFracs <= 47 ) then  168
   ;      else if ( NumAssignedDUFracs <= 95 ) then  288
   ;      else                                       480
   ;      endif endif endif endif endif endif  }
  ; "Default ResDHWSys:CHPWHAutosize - autosize # of HPWH compressors & prim tank vol"  ResDHWSys:CHPWHAutosize  =       - SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
  ;    {  if (CentralDHWTypeVal == 2) then  1
  ;       else  UNDEFINED  endif  }
   "Default ResDHWSys:CHPWHNumComp - Number of central HPWH compressors"   ResDHWSys:CHPWHNumComp  =
      {  UNDEFINED  }
   "Blast user-defined ResDHWSys:CHPWHNumCompFlt if EnableResearchMode not activated"   ResDHWSys:Action  =    ; SAC 3/6/20
      {  if (IfValidAnd( Proj:EnableResearchMode > 0 )==0 .AND. LocalStatus( CHPWHNumCompFlt ) > 4)
         then  EvalRulelist( "ForceDefault_DHWSys_CHPWHNumCompFlt", 1 )
         else  UNCHANGED  endif  }
   "Default ResDHWSys:CHPWHNumCompFlt"   ResDHWSys:CHPWHNumCompFlt  = {  CHPWHNumComp  }

   "Blast user-defined ResDHWSys:CHPWHLoopTankResCtrls and StdCHPWHLoopTankResCtrls if EnableResearchMode not activated"   ResDHWSys:Action  =     ; SAC 07/16/21 (tic #1275)
      {  if (IfValidAnd( Proj:EnableResearchMode > 0 )==0 .AND. IfValidAnd( ResProj:RunAbbrev == "u" ) .AND.
             (LocalStatus( CHPWHLoopTankResCtrls ) > 4 .OR. LocalStatus( StdCHPWHLoopTankResCtrls ) > 4))
         then  EvalRulelist( "ForceDefault_DHWSys_CHPWHLoopTankResCtrls", 1 )
         else  UNCHANGED  endif  }

;   ; SAC 3/5/20 - added size defaulting by CHPWHCompType, w/ new Colmac defaulting to 10x Sanden (Colmac)
;   "Default ResDHWSys:CHPWHPrimTankVol - Central HPWH primary tank volume"    ResDHWSys:CHPWHPrimTankVol  =      ; removed CHPWHPrimTankVol defaulting - SAC 5/27/20
;     ; {  if (CentralDHWTypeVal == 2 .AND. IfValidAnd( CHPWHAutosize = 0 ) .AND.           - SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
;      {  if (CentralDHWTypeVal == 2 .AND. 
;             IfValidAnd( CHPWHNumCompFlt > 0 ))
;         then  switch (CHPWHCompType)
;                  case 17 :   80 * CHPWHNumCompFlt     ; Sanden
;                  case 45 :  800 * CHPWHNumCompFlt     ; Colmac CxA20
;                  case 46 :  800 * CHPWHNumCompFlt     ; Nyle C185A external  - SAC 4/19/20
;                  case 47 :  800 * CHPWHNumCompFlt     ; Nyle C250A external  - SAC 4/19/20
;                  default :  UNDEFINED
;               endswitch
;         else  UNDEFINED  endif  }

   "Set ResDHWSys:CHPWHCompCap - comp heating cap @ 40 deg F"     ResDHWSys:CHPWHCompCap =      ; SAC 08/31/20
      {  if (CentralDHWTypeVal == 2 .AND. CHPWHSysDescrip >= 2 .AND. CHPWHCompType > 0)
         then  T24RCHPWHCompressor:OutputCap( "CHPWHCompType", CHPWHCompType )
         else  UNDEFINED  endif  }
   ; decreased min tank volume from 10* to 3* compressor size - SAC 11/17/21
   "Set ResDHWSys:CHPWHMinTotTankVol - min total CHPWH prim tank volume (across all tanks)"     ResDHWSys:CHPWHMinTotTankVol =   ; SAC 08/31/20
      {  if (CentralDHWTypeVal == 2 .AND. IfValidAnd( CHPWHCompCap > 0 ) .AND.
             IfValidAnd( CHPWHNumCompFlt > 0 ))
         then  int( (CHPWHCompCap * CHPWHNumCompFlt * 3) + 0.5 )  else  -1  endif  }

   "Set ResDHWSys:CHPWHLoopTankCompCap - loop tank comp heating cap @ 40 deg F"     ResDHWSys:CHPWHLoopTankCompCap =    ; SAC 08/31/20
      {  if (CentralDHWTypeVal == 2  .AND. CHPWHSysDescrip >= 2 .AND.
             CHPWHLoopTankTypeVal >= 10 .AND. CHPWHLoopTankCompType > 0)
         then  T24RCHPWHCompressor:OutputCap( "CHPWHCompType", CHPWHLoopTankCompType )
         else  UNDEFINED  endif  }
   ; decreased min tank volume from 10* to 3* compressor size - SAC 11/17/21
   "Set ResDHWSys:CHPWHLoopTankMinTankVol - min total CHPWH loop tank volume (across all tanks)"   ResDHWSys:CHPWHLoopTankMinTankVol =    ; SAC 08/31/20
      {  if (CentralDHWTypeVal == 2 .AND. IfValidAnd( CHPWHLoopTankCompCap > 0 ) .AND.
             IfValidAnd( CHPWHLoopTankCompCnt > 0 ))
         then  int( (CHPWHLoopTankCompCap * CHPWHLoopTankCompCnt * 3) + 0.5 )  else  -1  endif  }

   ; increase CHPWHMinTotTankVol multiplier from 2 to 6.67 to account for decrease in CHPWHMinTotTankVol (to maintain consistent default) - SAC 10/14/21
   "Set ResDHWSys:CHPWHTotTankVol for NEEA CHPWHs"    ResDHWSys:CHPWHTotTankVol =         ; SAC 6/2/20 - to enable CF1R reporting   ; SAC 08/31/20
      {  if (IfValidAnd( CentralDHWTypeVal = 2 ))
         then  if (CHPWHSysDescrip >= 2 .AND. IfValidAnd( CHPWHMinTotTankVol > 0 ))
               then  int( (CHPWHMinTotTankVol * 6.67) + 0.5 )
               else if (CHPWHSysDescrip == 1 .AND. CHPWHNEEAModel > 1)
               then  HPWHData_NEEA:TankVolume( "ModelNum", CHPWHNEEAModel ) *
                     ValidOr( CHPWHNumCompFlt, 0 )
               else  UNDEFINED  endif endif
         else  UNDEFINED  endif  }

   ; increase CHPWHLoopTankMinTankVol multiplier from 2 to 6.67 to account for decrease in CHPWHLoopTankMinTankVol (to maintain consistent default) - SAC 10/14/21
   "Set ResDHWSys:CHPWHLoopTankVol for NEEA CHPWH loop tank heaters"   ResDHWSys:CHPWHLoopTankVol =      ; SAC 6/2/20   ; SAC 08/31/20
      {  if (IfValidAnd( CentralDHWTypeVal = 2 ))
         then  if (CHPWHSysDescrip >= 2 .AND. CHPWHLoopTankTypeVal >= 10 .AND. IfValidAnd( CHPWHLoopTankMinTankVol > 0 ))
               then  int( (CHPWHLoopTankMinTankVol * 6.67) + 0.5 )
               else if (CHPWHSysDescrip > 0 .AND. CHPWHLoopTankTypeVal == 2 .AND. CHPWHLoopTankNEEAModel > 1)
               then  HPWHData_NEEA:TankVolume( "ModelNum", CHPWHLoopTankNEEAModel ) *
                     ValidOr( CHPWHLoopTankCompCnt, 0 )
               else if (CHPWHSysDescrip > 0 .AND. CHPWHLoopTankTypeVal == 3)
               then  switch (CHPWHLoopTankComModel)
                        case  110172 :  120 * ValidOr( CHPWHLoopTankCompCnt, 0 )    ; "A. O. Smith CAHP-120  (120 gal)"
                        default      :  UNDEFINED
                     endswitch
               else  UNDEFINED  endif endif endif
         else  UNDEFINED  endif  }

   ; SAC 5/28/20   ; SAC 6/23/20   ; SAC 02/18/21 (tic #1260)
   "Default ResDHWSys:CHPWHASHPType"   ResDHWSys:CHPWHASHPType  =             ; incremented CHPWH ASHPType value by 100 to avoid conflict w/ new Rheem NEEA models - SAC 12/28/22
      {  if (CentralDHWTypeVal == 2)
         then  if (CHPWHSysDescrip >= 2 .AND. CHPWHCompType > 0)
               then  mod( CHPWHCompType, 100 ) + 100
               else if (CHPWHSysDescrip == 1 .AND. CHPWHIntegPkgType == 1 .AND. CHPWHNEEAModel > 0)
               then  mod( CHPWHNEEAModel, 100 )
               else if (CHPWHSysDescrip == 1 .AND. CHPWHIntegPkgType == 2 .AND. CHPWHComModel > 0)
               then  mod( CHPWHComModel, 100 )
               else  0  endif endif endif
         else  0  endif  }

   ; SAC 5/28/20   ; SAC 6/2/20   ; SAC 6/23/20   ; SAC 02/18/21 (tic #1260)
   "Default ResDHWSys:CHPWHLoopTankASHPType"   ResDHWSys:CHPWHLoopTankASHPType  =         ; incremented CHPWH ASHPType value by 100 to avoid conflict w/ new Rheem NEEA models - SAC 12/28/22
      {  if (CentralDHWTypeVal == 2)
         then  if (CHPWHLoopTankTypeVal >= 10 .AND. CHPWHLoopTankCompType > 0)
               then  mod( CHPWHLoopTankCompType, 100 ) + 100
               else if (CHPWHLoopTankTypeVal == 2 .AND. CHPWHLoopTankNEEAModel > 0)
               then  mod( CHPWHLoopTankNEEAModel, 100 )
               else if (CHPWHLoopTankTypeVal == 3 .AND. CHPWHLoopTankComModel > 0)
               then  mod( CHPWHLoopTankComModel, 100 )
               else  0  endif endif endif
         else  0  endif  }

   "Set ResDHWSys:CHPWHLoopTankShowDtls flag"  ResDHWSys:CHPWHLoopTankShowDtls =
      {  if (IfValidAnd( CentralDHWTypeVal   = 2 )==0 .OR.
             IfValidAnd( CHPWHSysDescrip     > 0 )==0 .OR.
             IfValidAnd( CHPWHLoopTankConfig > 0 )==0) then  0
         else if (CHPWHLoopTankTypeVal > 0 .AND.                              ; Elec Res -OR- Large Comp 
                  CHPWHLoopTankTypeVal != 2 .AND. CHPWHLoopTankTypeVal != 3)  ; NOT NEEA or Commercial
         then  1  else  0  endif endif  }

   "Default ResDHWSys:CHPWHTankRVal"         ResDHWSys:CHPWHTankRVal       =     ; SAC 6/25/20
      {  if (CentralDHWTypeVal == 2 .AND. CHPWHSysDescrip >= 2 .AND. IfValidAnd( FloorAreaServed[1] > 0 )) then  16  else  UNDEFINED  endif  }
   "Default ResDHWSys:CHPWHLoopTankRVal"     ResDHWSys:CHPWHLoopTankRVal   =     ; SAC 6/25/20
      {  if (CHPWHLoopTankShowDtls > 0 .AND. IfValidAnd( FloorAreaServed[1] > 0 )) then  16  else  UNDEFINED  endif  }

   "Set ResDHWSys:CHPWHTankMinRVal"          ResDHWSys:CHPWHTankMinRVal    =     ; SAC 06/25/21
      {  if (CentralDHWTypeVal == 2 .AND. CHPWHSysDescrip >= 2 .AND.
             IfValidAnd( FloorAreaServed[1] > 0 ) .AND. IfValidAnd( Proj:EnableResearchMode > 0 )==0) then  16  else  0  endif  }
   "Set ResDHWSys:CHPWHLoopTankMinRVal"      ResDHWSys:CHPWHLoopTankMinRVal = 
      {  if (CHPWHLoopTankShowDtls > 0 .AND.
             IfValidAnd( FloorAreaServed[1] > 0 ) .AND. IfValidAnd( Proj:EnableResearchMode > 0 )==0) then  16  else  0  endif  }

   "Set ResDHWSys:CHPWHTankSetptEdit - flag indicating central HPWH tank setpoints are user editable"    ResDHWSys:CHPWHTankSetptEdit =      ; SAC 08/10/20   
      {  if (IfValidAnd( Proj:EnableResearchMode > 0.5 ) .OR. IfValidAnd( ResProj:BypassRuleLimits > 0.5 )) then  1  else  UNDEFINED  endif  }
   "Blast DHWSys CHPWH tank setpoint(s) if user-defined but not editable"     ResDHWSys:Action =         ; SAC 08/10/20
      {  if (IfValidAnd( CHPWHTankSetptEdit > 0 ) .OR.
             (LocalStatus( CHPWHTankSetpt ) < 5 .AND. LocalStatus( CHPWHLoopTankSetpt ) < 5)) then  UNCHANGED
         else  EvalRulelist( "Blast_CHPWH_TankSetpoints", 1 )  endif  }

   "Default ResDHWSys:CHPWHTankSetpt"        ResDHWSys:CHPWHTankSetpt  =         ; SAC 7/1/20
      {  if (CentralDHWTypeVal == 2 .AND. CHPWHSysDescrip >= 2 .AND. IfValidAnd( FloorAreaServed[1] > 0 )) then  140  else  UNDEFINED  endif  }
   "Default ResDHWSys:CHPWHLoopTankSetpt"    ResDHWSys:CHPWHLoopTankSetpt  =     ; SAC 7/1/20   ; updated default to 140 - SAC 08/10/20   ; updated default to 136 - SAC 07/15/21
      {  if (CHPWHLoopTankShowDtls > 0 .AND. IfValidAnd( FloorAreaServed[1] > 0 )) then  136  else  UNDEFINED  endif  }

   ; fixed error check problems (a) CHPWHTankSetpt being checked when not editable, and (b) checks on Large systems not reporting properly - SAC 08/19/20   ; more tank vol checks - SAC 08/31/20
   ; prevent certain error messages when CHPWHCompAutosizeSim flag set since autosizing will cover those data - SAC 07/05/21
   "Init ResDHWSys:CHPWHErrMsg"     ResDHWSys:CHPWHErrMsg = {  UNDEFINED  }
   "Set ResDHWSys:CHPWHErrMsg - part 1 (large)"       ResDHWSys:CHPWHErrMsg =
      {  if (IfValidAnd( CentralDHWTypeVal = 2 )==0) then  UNCHANGED
         else if (CHPWHSysDescrip < 1) then  "Central HPWH system type is missing but required"
         else if (CHPWHSysDescrip >= 2)
         then  if (CHPWHCompType < 1) then  "Central HPWH input missing:  HPWH/Compressor Type"
               else if ((Proj:EnableResearchMode < 0.5 .AND. IfValidAnd( CHPWHNumComp > 0 )==0) .OR.
                        (Proj:EnableResearchMode > 0.5 .AND. IfValidAnd( CHPWHNumCompFlt > 0 )==0))
               then  "Central HPWH input error:  Compressor/Heater Count must be > 0"
               else if (IfValidAnd( CHPWHTankSetpt  > 0 )==0 .AND. IfValidAnd( CHPWHTankSetptEdit > 0 )) then  "Central HPWH input error:  Tank Setpoint must be > 0"
               else if (IfValidAnd( CHPWHTankCount  > 0 )==0 .AND. IfValidAnd( CHPWHCompAutosizeSim > 0 )==0) then  "Central HPWH input error:  Tank Count must be > 0"
               else if (IfValidAnd( CHPWHTotTankVol > 0 )==0) then  "Central HPWH input error:  Total Tank Volume must be > 0"
               else if (IfValidAnd( CHPWHTotTankVol >= CHPWHMinTotTankVol )==0) then  Format( "Central HPWH input error:  Total Tank Volume must be >= %g", ValidOr( CHPWHMinTotTankVol, 0 ) )
               else if (IfValidAnd( CHPWHTankRVal   >= CHPWHTankMinRVal   )==0) then  Format( "Central HPWH input error:  Tank R-Value must be >= %g", CHPWHTankMinRVal )
               else if (IfValidAnd( CHPWHTankLoc    > 0 )==0) then  "Central HPWH input error:  Tank Location selection missing"
               else if (IfValidAnd( CHPWHTankLoc    = 2 ) .AND. LocalCompAssigned( CHPWHTankZone ) < 1) then  "Central HPWH input error:  Tank Zone (location) selection missing"
               else if (IfValidAnd( CHPWHSrcAirLoc  > 0 )==0) then  "Central HPWH input error:  Source Air From selection missing"
               else if (IfValidAnd( CHPWHSrcAirLoc  = 2 ) .AND. LocalCompAssigned( CHPWHSrcAirZone ) < 1) then  "Central HPWH input error:  Source Air Zone (location) selection missing"
               else  UNCHANGED  endif endif endif endif endif endif endif endif endif endif endif
         else  UNCHANGED  endif endif endif  }
   "Set ResDHWSys:CHPWHErrMsg - part 2 (NEEA)"        ResDHWSys:CHPWHErrMsg =
      {  if (LocalStatus( CHPWHErrMsg ) < 1 .AND. CHPWHSysDescrip == 1 .AND. CHPWHIntegPkgType == 1)
         then  if (     CHPWHNEEABrand <= 1) then  "Central HPWH input missing:  NEEA HPWH brand"
               else if (CHPWHNEEAModel <= 1) then  "Central HPWH input missing:  NEEA HPWH model"
               else if ((Proj:EnableResearchMode < 0.5 .AND. IfValidAnd( CHPWHNumComp > 0 )==0) .OR.
                        (Proj:EnableResearchMode > 0.5 .AND. IfValidAnd( CHPWHNumCompFlt > 0 )==0))
               then  "Central HPWH input error:  NEEA HPWH Count must be > 0"
               else if (IfValidAnd( CHPWHTankSetpt  > 0 )==0 .AND. IfValidAnd( CHPWHTankSetptEdit > 0 )) then  "Central HPWH input error:  Tank Setpoint must be > 0"
               else if (IfValidAnd( CHPWHTankLoc    = 2 ) .AND. LocalCompAssigned( CHPWHTankZone ) < 1) then  "Central HPWH input error:  Tank Zone (location) selection missing"
               else if (IfValidAnd( CHPWHSrcAirLoc  > 0 )==0) then  "Central HPWH input error:  Source Air From selection missing"
               else if (IfValidAnd( CHPWHSrcAirLoc  = 2 ) .AND. LocalCompAssigned( CHPWHSrcAirZone ) < 1) then  "Central HPWH input error:  Source Air Zone (location) selection missing"
               else  UNCHANGED  endif endif endif endif endif endif endif
         else  UNCHANGED  endif  }
   "Set ResDHWSys:CHPWHErrMsg - part 3 (Integ Com)"   ResDHWSys:CHPWHErrMsg =
      {  if (LocalStatus( CHPWHErrMsg ) < 1 .AND. CHPWHSysDescrip == 1 .AND. CHPWHIntegPkgType == 2)
         then  if (CHPWHComModel <= 1) then  "Central HPWH input missing:  Commercial (integrated, packaged) HPWH model"
               else if ((Proj:EnableResearchMode < 0.5 .AND. IfValidAnd( CHPWHNumComp > 0 )==0) .OR.
                        (Proj:EnableResearchMode > 0.5 .AND. IfValidAnd( CHPWHNumCompFlt > 0 )==0))
               then  "Central HPWH input error:  Commercial HPWH Count must be > 0"
               else if (IfValidAnd( CHPWHTankSetpt  > 0 )==0 .AND. IfValidAnd( CHPWHTankSetptEdit > 0 )) then  "Central HPWH input error:  Tank Setpoint must be > 0"
               else if (IfValidAnd( CHPWHTankLoc    = 2 ) .AND. LocalCompAssigned( CHPWHTankZone ) < 1) then  "Central HPWH input error:  Tank Zone (location) selection missing"
               else if (IfValidAnd( CHPWHSrcAirLoc  > 0 )==0) then  "Central HPWH input error:  Source Air From selection missing"
               else if (IfValidAnd( CHPWHSrcAirLoc  = 2 ) .AND. LocalCompAssigned( CHPWHSrcAirZone ) < 1) then  "Central HPWH input error:  Source Air Zone (location) selection missing"
               else  UNCHANGED  endif endif endif endif endif endif
         else  UNCHANGED  endif  }

   "Set ResDHWSys:CHPWHErrMsg - part 4 (TankZone)"    ResDHWSys:CHPWHErrMsg =
      {  if (LocalStatus( CHPWHErrMsg ) < 1 .AND. CHPWHSysDescrip > 0 .AND.
             IfValidAnd( CHPWHTankLoc = 2 ) .AND. LocalCompAssigned( CHPWHTankZone ) > 0)
         then  if (LocalCompAssigned( CHPWHTankZone ) == ComponentType( "ResZn" ) .OR.
                   LocalCompAssigned( CHPWHTankZone ) == ComponentType( "ResAttic" ))
               then  if (IfValidAnd( CHPWHTankZone:FloorArea > 0 )==0) then  "Central HPWH input error:  Tank Zone (location) selection invalid"
                     else  UNCHANGED  endif
               else if (LocalCompAssigned( CHPWHTankZone ) == ComponentType( "ResGarage" ) .OR.
                        LocalCompAssigned( CHPWHTankZone ) == ComponentType( "ResCrawlSpc" ) .OR.
                        LocalCompAssigned( CHPWHTankZone ) == ComponentType( "ResOtherZn" ))
               then  if (IfValidAnd( CHPWHTankZone:Area > 0 )==0) then  "Central HPWH input error:  Tank Zone (location) selection invalid"
                     else  UNCHANGED  endif
               else  "Central HPWH input error:  Tank Zone (location) selection invalid"
               endif endif
         else  UNCHANGED  endif  }
   "Set ResDHWSys:CHPWHErrMsg - part 5 (AirSource)"   ResDHWSys:CHPWHErrMsg =
      {  if (LocalStatus( CHPWHErrMsg ) < 1 .AND. CHPWHSysDescrip > 0 .AND.
             IfValidAnd( CHPWHSrcAirLoc = 2 ) .AND. LocalCompAssigned( CHPWHSrcAirZone ) > 0)
         then  if (LocalCompAssigned( CHPWHSrcAirZone ) == ComponentType( "ResZn" ) .OR.
                   LocalCompAssigned( CHPWHSrcAirZone ) == ComponentType( "ResAttic" ))
               then  if (IfValidAnd( CHPWHSrcAirZone:FloorArea > 0 )==0) then  "Central HPWH input error:  Source Air Zone (location) selection invalid"
                     else  UNCHANGED  endif
               else if (LocalCompAssigned( CHPWHSrcAirZone ) == ComponentType( "ResGarage" ) .OR.
                        LocalCompAssigned( CHPWHSrcAirZone ) == ComponentType( "ResCrawlSpc" ) .OR.
                        LocalCompAssigned( CHPWHSrcAirZone ) == ComponentType( "ResOtherZn" ))
               then  if (IfValidAnd( CHPWHSrcAirZone:Area > 0 )==0) then  "Central HPWH input error:  Source Air Zone (location) selection invalid"
                     else  UNCHANGED  endif
               else  "Central HPWH input error:  Source Air Zone (location) selection invalid"
               endif endif
         else  UNCHANGED  endif  }

   "Set ResDHWSys:CHPWHErrMsg - part 6 (LpTank-Elec)" ResDHWSys:CHPWHErrMsg =
      {  if (LocalStatus( CHPWHErrMsg ) < 1 .AND. CHPWHSysDescrip > 0 .AND.
             CHPWHLoopTankTypeVal = 1)       ; elec res loop tank heater
         then  if (     IfValidAnd( CHPWHLoopTankCompCnt > 0 )==0) then  "CHPWH Loop Tank input error:  Heater Count must be > 0"
               else if (IfValidAnd( CHPWHLoopTankSetpt   > 0 )==0 .AND. IfValidAnd( CHPWHTankSetptEdit > 0 )) then  "CHPWH Loop Tank input error:  Tank Setpoint must be > 0"
               else if (IfValidAnd( CHPWHLoopTankTankCnt > 0 )==0) then  "CHPWH Loop Tank input error:  Tank Count must be > 0"
               else if (IfValidAnd( CHPWHLoopTankVol     > 0 )==0) then  "CHPWH Loop Tank input error:  Total Tank Volume must be > 0"
               else if (IfValidAnd( CHPWHLoopTankVol  >= CHPWHLoopTankMinTankVol )==0) then  Format( "CHPWH Loop Tank input error:  Total Tank Volume must be >= %g", ValidOr( CHPWHLoopTankMinTankVol, 0 ) )
               else if (IfValidAnd( CHPWHLoopTankRVal >= CHPWHLoopTankMinRVal    )==0) then  Format( "CHPWH Loop Tank input error:  Tank R-Value must be >= %g", CHPWHLoopTankMinRVal )
               else if (IfValidAnd( CHPWHLoopTankLoc     > 0 )==0) then  "CHPWH Loop Tank input error:  Tank Location selection missing"
               else if (IfValidAnd( CHPWHLoopTankLoc     = 2 ) .AND. LocalCompAssigned( CHPWHLoopTankZone   ) < 1) then  "CHPWH Loop Tank input error:  Tank Zone (location) selection missing"
               else  UNDEFINED  endif endif endif endif endif endif endif endif 
         else  UNCHANGED  endif  }
   "Set ResDHWSys:CHPWHErrMsg - part 7 (LpTank-Lrg)"  ResDHWSys:CHPWHErrMsg =
      {  if (LocalStatus( CHPWHErrMsg ) < 1 .AND. CHPWHSysDescrip > 0 .AND.
             CHPWHLoopTankTypeVal >= 10)      ; large HPWH loop tank heater
         then  if (CHPWHLoopTankCompType < 1) then  "CHPWH Loop Tank input missing:  HPWH/Compressor Type"
               else if (IfValidAnd( CHPWHLoopTankCompCnt > 0 )==0) then  "CHPWH Loop Tank input error:  Compressor/Heater Count must be > 0"
               else if (IfValidAnd( CHPWHLoopTankSetpt   > 0 )==0 .AND. IfValidAnd( CHPWHTankSetptEdit > 0 )) then  "CHPWH Loop Tank input error:  Tank Setpoint must be > 0"
               else if (IfValidAnd( CHPWHLoopTankTankCnt > 0 )==0) then  "CHPWH Loop Tank input error:  Tank Count must be > 0"
               else if (IfValidAnd( CHPWHLoopTankVol     > 0 )==0) then  "CHPWH Loop Tank input error:  Total Tank Volume must be > 0"
               else if (IfValidAnd( CHPWHLoopTankVol  >= CHPWHLoopTankMinTankVol )==0) then  Format( "CHPWH Loop Tank input error:  Total Tank Volume must be >= %g", ValidOr( CHPWHLoopTankMinTankVol, 0 ) )
               else if (IfValidAnd( CHPWHLoopTankRVal >= CHPWHLoopTankMinRVal    )==0) then  Format( "CHPWH Loop Tank input error:  Tank R-Value must be >= %g", CHPWHLoopTankMinRVal )
               else if (IfValidAnd( CHPWHLoopTankLoc     > 0 )==0) then  "CHPWH Loop Tank input error:  Tank Location selection missing"
               else if (IfValidAnd( CHPWHLoopTankLoc     = 2 ) .AND. LocalCompAssigned( CHPWHLoopTankZone   ) < 1) then  "CHPWH Loop Tank input error:  Tank Zone (location) selection missing"
               else if (IfValidAnd( CHPWHLoopTankSrcAirLoc  > 0 )==0) then  "CHPWH Loop Tank input error:  Source Air From selection missing"
               else if (IfValidAnd( CHPWHLoopTankSrcAirLoc  = 2 ) .AND. LocalCompAssigned( CHPWHLoopTankSrcAirZone ) < 1) then  "CHPWH Loop Tank input error:  Source Air Zone (location) selection missing"
               else  UNDEFINED  endif endif endif endif endif endif endif endif endif endif endif
         else  UNCHANGED  endif  }
   "Set ResDHWSys:CHPWHErrMsg - part 8 (LpTank-HPWH)" ResDHWSys:CHPWHErrMsg =
      {  if (LocalStatus( CHPWHErrMsg ) < 1 .AND. CHPWHSysDescrip > 0 .AND.
             (CHPWHLoopTankTypeVal = 2 .OR. CHPWHLoopTankTypeVal = 3))     ; NEEA or Com HPWH loop tank heater
         then  if (     CHPWHLoopTankTypeVal = 2 .AND. CHPWHLoopTankNEEABrand <= 1) then  "CHPWH Loop Tank input missing:  NEEA HPWH brand"
               else if (CHPWHLoopTankTypeVal = 2 .AND. CHPWHLoopTankNEEAModel <= 1) then  "CHPWH Loop Tank input missing:  NEEA HPWH model"
               else if (CHPWHLoopTankTypeVal = 3 .AND. CHPWHLoopTankComModel  <= 1) then  "CHPWH Loop Tank input missing:  Commercial HPWH model"
               else if (IfValidAnd( CHPWHLoopTankCompCnt > 0 )==0) then  "CHPWH Loop Tank input error:  HPWH/Heater Count must be > 0"
               else if (IfValidAnd( CHPWHLoopTankSetpt   > 0 )==0 .AND. IfValidAnd( CHPWHTankSetptEdit > 0 )) then  "CHPWH Loop Tank input error:  Tank Setpoint must be > 0"
               else if (CHPWHLoopTankShowDtls > 0 .AND. IfValidAnd( CHPWHLoopTankVol     > 0 )==0) then  "CHPWH Loop Tank input error:  Total Tank Volume must be > 0"
               else if (CHPWHLoopTankShowDtls > 0 .AND. IfValidAnd( CHPWHLoopTankTankCnt > 0 )==0) then  "CHPWH Loop Tank input error:  Tank Count must be > 0"
               else if (CHPWHLoopTankShowDtls > 0 .AND. IfValidAnd( CHPWHLoopTankRVal  >= CHPWHLoopTankMinRVal )==0) then  Format( "CHPWH Loop Tank input error:  Tank R-Value must be >= %g", CHPWHLoopTankMinRVal )
               else if (IfValidAnd( CHPWHLoopTankLoc     > 0 )==0) then  "CHPWH Loop Tank input error:  Tank Location selection missing"
               else if (IfValidAnd( CHPWHLoopTankLoc     = 2 ) .AND. LocalCompAssigned( CHPWHLoopTankZone ) < 1) then  "CHPWH Loop Tank input error:  Tank Zone (location) selection missing"
               else if (IfValidAnd( CHPWHLoopTankSrcAirLoc  > 0 )==0) then  "CHPWH Loop Tank input error:  Source Air From selection missing"
               else if (IfValidAnd( CHPWHLoopTankSrcAirLoc  = 2 ) .AND.
                        LocalCompAssigned( CHPWHLoopTankSrcAirZone ) < 1) then  "CHPWH Loop Tank input error:  Source Air Zone (location) selection missing"
               else  UNDEFINED  endif endif endif endif endif endif endif endif endif endif endif endif
         else  UNCHANGED  endif  }

;   CTRL, "CHPWHSysDescrip",          30250, TDCT_Combo,  215, 130, 250, 250, 25, FNT_STD, "Central HPWH System Type:",          TA_LEFT,  -195, 4,  0, TA_LEFT, 0, 0,  None,   CentralDHWTypeVal = 2,   -147,  0,  "Type of central HPWH system"   ; SAC 5/27/20
;   CTRL, "CHPWHIntegPkgType",        30289, TDCT_Combo,  215, 160, 480, 300, 25, FNT_STD, "Integrated, Packaged Type:",         TA_LEFT,  -175, 4,  0, TA_LEFT, 0, 0,  None,   CentralDHWTypeVal = 2 And CHPWHSysDescrip = 1,   0,  0,  "Central HPWH/compressor type"   ; SAC 1/3/20 (tic #862)
;   CTRL, "CHPWHCompTypeLbl",         30262, TDCT_Label,   40, 194,  18, 174, -1, FNT_STD, "",                                   TA_LEFT,     0, 0,  0, TA_LEFT, 0, 0,  None,   CentralDHWTypeVal = 2 And CHPWHSysDescrip > 0,   0,  0,  ""     ; SAC 6/1/20
;   CTRL, "CHPWHCompType",            30251, TDCT_Combo,  215, 190, 480, 300, 25, FNT_STD, "",                                   TA_LEFT,    -1, 4,  0, TA_LEFT, 0, 0,  None,   CentralDHWTypeVal = 2 And CHPWHSysDescrip = 2,   0,  0,  "Central HPWH/compressor type"   ; SAC 1/3/20 (tic #862)
;   CTRL, "CHPWHComModel",            30290, TDCT_Combo,  215, 190, 480, 300, 25, FNT_STD, "",                                   TA_LEFT,    -1, 4,  0, TA_LEFT, 0, 0,  None,   CentralDHWTypeVal = 2 And CHPWHSysDescrip = 1 And CHPWHIntegPkgType = 2,   0,  0,  "Central HPWH commercial product"   ; SAC 02/18/21 (tic #1260)
;   CTRL, "CHPWHNEEABrand",           30252, TDCT_Combo,  215, 190, 350, 115, 25, FNT_STD, "",                                   TA_LEFT,    -1, 4,  0, TA_LEFT, 0, 0,  None,   CentralDHWTypeVal = 2 And CHPWHSysDescrip = 1 And CHPWHIntegPkgType = 1,   0,  0,  "Brand of NEEA heat pump water heater"   ; SAC 6/1/20
;   CTRL, "CHPWHNEEAModel",           30253, TDCT_Combo,  340, 190, 350, 225, 25, FNT_STD, "",                                   TA_LEFT,    -1, 4,  0, TA_LEFT, 0, 0,  None,   CentralDHWTypeVal = 2 And CHPWHSysDescrip = 1 And CHPWHIntegPkgType = 1 And CHPWHNEEABrand > 1,   0,  0,  "Model of NEEA heat pump water heater" 

   "Set ResDHWSys:CHPWHErrMsg - part 9 (LpTank Loc)"     ResDHWSys:CHPWHErrMsg =
      {  if (LocalStatus( CHPWHErrMsg ) < 1 .AND. CHPWHSysDescrip > 0 .AND. CHPWHLoopTankTypeVal > 0 .AND.
             IfValidAnd( CHPWHLoopTankLoc = 2 ) .AND. LocalCompAssigned( CHPWHLoopTankZone ) > 0)
         then  if (LocalCompAssigned( CHPWHLoopTankZone ) == ComponentType( "ResZn" ) .OR.
                   LocalCompAssigned( CHPWHLoopTankZone ) == ComponentType( "ResAttic" ))
               then  if (IfValidAnd( CHPWHLoopTankZone:FloorArea > 0 )==0) then  "CHPWH Loop Tank input error:  Tank Zone (location) selection invalid"
                     else  UNCHANGED  endif
               else if (LocalCompAssigned( CHPWHLoopTankZone ) == ComponentType( "ResGarage" ) .OR.
                        LocalCompAssigned( CHPWHLoopTankZone ) == ComponentType( "ResCrawlSpc" ) .OR.
                        LocalCompAssigned( CHPWHLoopTankZone ) == ComponentType( "ResOtherZn" ))
               then  if (IfValidAnd( CHPWHLoopTankZone:Area > 0 )==0) then  "CHPWH Loop Tank input error:  Tank Zone (location) selection invalid"
                     else  UNCHANGED  endif
               else  "CHPWH Loop Tank input error:  Tank Zone (location) selection invalid"
               endif endif
         else  UNCHANGED  endif  }
   "Set ResDHWSys:CHPWHErrMsg - part 10 (LpTank ASrc)"   ResDHWSys:CHPWHErrMsg =
      {  if (LocalStatus( CHPWHErrMsg ) < 1 .AND. CHPWHSysDescrip > 0 .AND. CHPWHLoopTankTypeVal > 0 .AND.
             IfValidAnd( CHPWHLoopTankSrcAirLoc = 2 ) .AND. LocalCompAssigned( CHPWHLoopTankSrcAirZone ) > 0)
         then  if (LocalCompAssigned( CHPWHLoopTankSrcAirZone ) == ComponentType( "ResZn" ) .OR.
                   LocalCompAssigned( CHPWHLoopTankSrcAirZone ) == ComponentType( "ResAttic" ))
               then  if (IfValidAnd( CHPWHLoopTankSrcAirZone:FloorArea > 0 )==0) then  "CHPWH Loop Tank input error:  Source Air Zone (location) selection invalid"
                     else  UNCHANGED  endif
               else if (LocalCompAssigned( CHPWHLoopTankSrcAirZone ) == ComponentType( "ResGarage" ) .OR.
                        LocalCompAssigned( CHPWHLoopTankSrcAirZone ) == ComponentType( "ResCrawlSpc" ) .OR.
                        LocalCompAssigned( CHPWHLoopTankSrcAirZone ) == ComponentType( "ResOtherZn" ))
               then  if (IfValidAnd( CHPWHLoopTankSrcAirZone:Area > 0 )==0) then  "CHPWH Loop Tank input error:  Source Air Zone (location) selection invalid"
                     else  UNCHANGED  endif
               else  "CHPWH Loop Tank input error:  Source Air Zone (location) selection invalid"
               endif endif
         else  UNCHANGED  endif  }
;"dbg" ResDHWSys:Action = { if (LocalStatus( CHPWHErrMsg ) < 1) then  PostMessageToLog( "   DHWSys '%s', run %s, CHPWHErrMsg undefined", Name, ResProj:RunAbbrev )
;   else  PostMessageToLog( "   DHWSys '%s', run %s, CHPWHErrMsg = %s", Name, ResProj:RunAbbrev, CHPWHErrMsg )  endif  }

   "Set ResDHWSys:CHPWHTankRValReqd"         ResDHWSys:CHPWHTankRValReqd      =     ; SAC 6/24/20
      {  if (CentralDHWTypeVal == 2 .AND. CHPWHSysDescrip >= 2 .AND. IfValidAnd( FloorAreaServed[1] > 0 )) then  1  else  UNDEFINED  endif  }
   "Set ResDHWSys:CHPWHLoopTankRValReqd"     ResDHWSys:CHPWHLoopTankRValReqd  =
      {  if (CHPWHLoopTankShowDtls > 0 .AND. IfValidAnd( FloorAreaServed[1] > 0 )) then  1  else  UNDEFINED  endif  }

   "Set ResDHWSys:ValidAnalysisCHPWH"     ResDHWSys:ValidAnalysisCHPWH  =        ; SAC 2/4/20 (tic #1197)
      {  if (CentralDHWTypeVal == 2 .AND. IfValidAnd( CHPWHNumCompFlt > 0 ) .AND.
             IfValidAnd( FloorAreaServed[1] > 0 ) .AND. LocalStatus( CHPWHErrMsg ) < 1)
         then  1  else  UNDEFINED  endif  }


   ; ----- DEMAND RESPONSE HPWHs -----
   "Set ResWtrHtr:DemRespCompat"    ResWtrHtr:DemRespCompat  =       ; SAC 12/04/20
      {  if (HPWH_NEEARated .AND. HPWHModel > 100000)
         then  HPWHData_NEEA:JA13( "ModelNum", HPWHModel )
         else  0  endif  }

   "Set ResDHWSys:DemRespCompat"       ResDHWSys:DemRespCompat  =          ; SAC 12/04/20    ; prevent Std & DRtg run use - SAC 01/11/21
      {  if (IfValidAnd( ResProj:RunAbbrev == "s" ) .OR. Proj:RunAbbrev == "zb" .OR.
             IfValidAnd( ResProj:RunAbbrev == "smf" ) .OR. IfValidAnd( ResProj:RunAbbrev == "dr" )) then  0
         else if (IfValidAnd( ValidAnalysisCHPWH > 0 ))
         then  if (CHPWHSysDescrip == 1)        ; Integrated, Packaged System
               then  if (CHPWHLoopTankNEEAModel > 100000)
                     then  HPWHData_NEEA:JA13( "ModelNum", CHPWHLoopTankNEEAModel )
                     else  0  endif
               else if (CHPWHSysDescrip >= 2)   ; Single Pass Primary -or- Multi Pass Primary
               then  0   ; ResDHWSys:CHPWHCompType compatibility??
               else  0  endif endif
         else if (CentralDHWTypeVal == 2) then  0   ; central HPWH but not valid inputs
         else if (NumDHWHeaters >= 1 .AND. IfValidAnd( DHWHeater[1]:DemRespCompat > 0 ) .AND. IfValidAnd( HeaterMult[1] > 0 )) then  1
         else if (NumDHWHeaters >= 2 .AND. IfValidAnd( DHWHeater[2]:DemRespCompat > 0 ) .AND. IfValidAnd( HeaterMult[2] > 0 )) then  1
         else if (NumDHWHeaters >= 3 .AND. IfValidAnd( DHWHeater[3]:DemRespCompat > 0 ) .AND. IfValidAnd( HeaterMult[3] > 0 )) then  1
         else if (NumDHWHeaters >= 4 .AND. IfValidAnd( DHWHeater[4]:DemRespCompat > 0 ) .AND. IfValidAnd( HeaterMult[4] > 0 )) then  1
         else if (NumDHWHeaters >= 5 .AND. IfValidAnd( DHWHeater[5]:DemRespCompat > 0 ) .AND. IfValidAnd( HeaterMult[5] > 0 )) then  1
         else if (NumDHWHeaters >= 6 .AND. IfValidAnd( DHWHeater[6]:DemRespCompat > 0 ) .AND. IfValidAnd( HeaterMult[6] > 0 )) then  1
         else  0  endif endif endif endif endif endif endif endif endif  }
   "reset ResDHWSys:DemResponsive if user-defined and not research mode"   ResDHWSys:Action =
      {  if (LocalStatus( DemResponsive ) > 5 .AND. IfValidAnd( Proj:EnableResearchMode > 0 )==0)
         then  EvalRulelist( "DHWSys_Blast_DemResponsive", 1 )  else  UNCHANGED  endif  }
   "Set ResDHWSys:DemResponsive"          ResDHWSys:DemResponsive  = {  DemRespCompat  }
   ;ResDHWSys:DemRespControl  - allow to default via Enums
   "Set ResDHWSys:DemRespValid"           ResDHWSys:DemRespValid  =
      {  if (DemRespCompat > 0 .AND. DemResponsive > 0 .AND. DemRespControl > 0)
         then  1  else  UNDEFINED  endif  }


   ; SAC 12/2/19 - DHWSys num heaters defaulting
   ; SAC 1/5/20 - added logic to force reset if the flag is OFF but needs to be toggled ON (for new Central HPWH modeling) (tic #862)  - SAC 1/6/20 - further tweaks to ensure reset when ON but should be OFF
   "Force ResDHWSys:UseMaxDurNumHtrs off if system not Electric Central"      ResDHWSys:Action  =     ; SAC 12/2/19
     ; {  if (LocalStatus( UseMaxDurNumHtrs ) > 5 .AND. CentralElecDHW > 0 .AND. CentralDHWTypeVal == 2 .AND.        - SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
     ;        ( (IfValidAnd( UseMaxDurNumHtrs == 0 ) .AND. IfValidAnd( CHPWHAutosize > 0 )) .OR.
     ;          (IfValidAnd( UseMaxDurNumHtrs >  0 ) .AND. IfValidAnd( CHPWHAutosize < 1 )) ))
      {  if (LocalStatus( UseMaxDurNumHtrs ) > 5 .AND. CentralElecDHW > 0 .AND. CentralDHWTypeVal == 2 .AND.
             IfValidAnd( UseMaxDurNumHtrs > 0 ))
         then  EvalRulelist( "ForceReset_DHWSys_UseMaxDurNumHtrs", 1 )
         else if (IfValidAnd( UseMaxDurNumHtrs > 0 )==0) then  UNCHANGED
         else if (CentralElecDHW .AND. IfValidAnd( Proj:AnalysisVersion > 190101 )) then  UNCHANGED  ; allow
         else  EvalRulelist( "ForceReset_DHWSys_UseMaxDurNumHtrs", 1 )  endif endif endif  }
   "Default ResDHWSys:UseMaxDurNumHtrs - Flag indicating whether or not to use Prerun and wsLoadMaxDur & wsDrawMaxDur to calculate # of heaters"   ; SAC 12/2/19
      ResDHWSys:UseMaxDurNumHtrs  =
         {  0  }
        ; {  if (CentralElecDHW > 0 .AND. CentralDHWTypeVal == 2 .AND. IfValidAnd( CHPWHAutosize > 0 )) then  1      - SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
        ;    else  0  endif  }
   "Default ResDHWSys:LoadMaxNumHrs - # of hours for tracking the maximum load (default = 12) (maps to cseResDHWSys:wsLoadMaxDur)"   ; SAC 12/2/19
      ResDHWSys:LoadMaxNumHrs     = {  12  }
   "Default ResDHWSys:DrawMaxNumHrs - # of hours for tracking the maximum draw (default = 4) (maps to cseResDHWSys:wsDrawMaxDur)"
      ResDHWSys:DrawMaxNumHrs     = {  4  }

   ; SAC 12/30/19 - removed dependence on CentralElecDHW (tic #862)
   "Default ResDHWSys:BranchLossModel - CSE model used to simulate DHW branch losses"     ; SAC 11/06/19   ; set to hot water draws only if DUs assigned - SAC 03/17/23 (tic #3418)
      ResDHWSys:BranchLossModel  = {
         if (Proj:IsComRuleset .AND. IfValidAnd( ResProj:EnergyCodeYearNum < 2019 )==0 .AND. 
             NewCentralElecModel .AND. IfValidAnd( NumDUsServed > 0 ))
         then  1  ; Attached to Hot Water Draws
         else  0  ; Scheduled (independent of draws)
         endif  }

      ; SAC 3/9/20 - remove dependence on EnableResearchMode in following rules
   "Default ResDHWSys:ShwrFaucWasteRat - ratio of shower/faucet water waste"     ; SAC 11/06/19
      ResDHWSys:ShwrFaucWasteRat  = {
         if (Proj:IsComRuleset .AND. IfValidAnd( ResProj:EnergyCodeYearNum < 2019 )==0 .AND. BranchLossModel == 1)
         then  3
         else  UNDEFINED  endif  }
   "Default ResDHWSys:NumBranchVolsWasted - expression describing the number of branch volumes discarded per day"     ; SAC 11/06/19
      ResDHWSys:NumBranchVolsWasted  = {
         if (Proj:IsComRuleset .AND. IfValidAnd( ResProj:EnergyCodeYearNum < 2019 )==0 .AND. BranchLossModel == 1)
         then  "1.4 * 19.84 * exp( -0.554 * #Flrs/2)"
         else  UNDEFINED  endif  }

   "Default ResDHWSys:RecircPumpPwr"      ResDHWSys:RecircPumpPwr  =    ; NumResOtherZnsServed - SAC 03/24/23 (tic #3418)
      {  if (IfValidAnd( MFamDistType > 0 ) .AND. IfValidAnd( CentralDHW > 0 ) .AND.
             IfValidAnd( NewCentralElecModel > 0 ))
         then  4 + ((ValidOr( NumAssignedDUFracs, 0 ) + ValidOr( NumResOtherZnsServed, 0 )) * 0.5)
         else  UNDEFINED  endif  }

   "Set ResDHWSys:RecircPumpPwrUnits"     ResDHWSys:RecircPumpPwrUnits  =
      {  if (IfValidAnd( MFamDistType > 0 ) .AND. IfValidAnd( CentralDHW > 0 ))
         then  if (IfValidAnd( NewCentralElecModel > 0 )) then  "Watts"
               else  "bhp"  endif
         else  UNDEFINED  endif  }

   ;   "LoopHeater",   BEMP_Obj,  1,  0,  0, "",                 0,  2, "DHWHeater", 12, "TankType",  "DHWHeater", 13, "TankType",    1003, "Loop Water Heater - must be electric resistance storage"    
   "Set ResDHWSys:LoopHeaterAssigned"     ResDHWSys:LoopHeaterAssigned  =
      {  if (NewCentralElecModel > 0 .AND. LocalCompAssigned( LoopHeater )) then 1  else  0  endif  }
   "Default ResDHWSys:LoopHeaterMult"     ResDHWSys:LoopHeaterMult  =
      {  if (LocalCompAssigned( LoopHeater )) then  1  else  UNDEFINED  endif  }

   ; ResWtrHtr:NonStdTankVolume, Prescribed,  0,    1,   1,    1,  1,  1

   "blast ResWtrHtr:IsLoopHeaterTank"  ResWtrHtr:IsLoopHeaterTank  = {  UNDEFINED  }
;   "Set ResWtrHtr:IsLoopHeaterTank"    ResDHWSys:LoopHeater:IsLoopHeaterTank  =
;      {  if (IfValidAnd( MFamDistType > 0 ) .AND. IfValidAnd( CentralDHW > 0 ) .AND.
;             IfValidAnd( NewCentralElecModel > 0 )) then  1
;         else  UNCHANGED  endif  }

   "blast ResWtrHtr:IsElecCentralHtr"     ResWtrHtr:IsElecCentralHtr  = {  UNDEFINED  }
   "Set ResWtrHtr:IsElecCentralHtr - 1"   ResDHWSys:DHWHeater[1]:IsElecCentralHtr  =
      {  if (IfValidAnd( MFamDistType > 0 ) .AND. IfValidAnd( HeaterMultFlt[1] > 0 ) .AND.
             IfValidAnd( CentralDHW > 0 ) .AND. IfValidAnd( NewCentralElecModel > 0 )) then  1
         else  UNCHANGED  endif  }
   "Set ResWtrHtr:IsElecCentralHtr - 2"   ResDHWSys:DHWHeater[2]:IsElecCentralHtr  =
      {  if (IfValidAnd( MFamDistType > 0 ) .AND. IfValidAnd( HeaterMultFlt[2] > 0 ) .AND.
             IfValidAnd( CentralDHW > 0 ) .AND. IfValidAnd( NewCentralElecModel > 0 )) then  1
         else  UNCHANGED  endif  }
   "Set ResWtrHtr:IsElecCentralHtr - 3"   ResDHWSys:DHWHeater[3]:IsElecCentralHtr  =
      {  if (IfValidAnd( MFamDistType > 0 ) .AND. IfValidAnd( HeaterMultFlt[3] > 0 ) .AND.
             IfValidAnd( CentralDHW > 0 ) .AND. IfValidAnd( NewCentralElecModel > 0 )) then  1
         else  UNCHANGED  endif  }
   "Set ResWtrHtr:IsElecCentralHtr - 4"   ResDHWSys:DHWHeater[4]:IsElecCentralHtr  =
      {  if (IfValidAnd( MFamDistType > 0 ) .AND. IfValidAnd( HeaterMultFlt[4] > 0 ) .AND.
             IfValidAnd( CentralDHW > 0 ) .AND. IfValidAnd( NewCentralElecModel > 0 )) then  1
         else  UNCHANGED  endif  }
   "Set ResWtrHtr:IsElecCentralHtr - 5"   ResDHWSys:DHWHeater[5]:IsElecCentralHtr  =
      {  if (IfValidAnd( MFamDistType > 0 ) .AND. IfValidAnd( HeaterMultFlt[5] > 0 ) .AND.
             IfValidAnd( CentralDHW > 0 ) .AND. IfValidAnd( NewCentralElecModel > 0 )) then  1
         else  UNCHANGED  endif  }
   "Set ResWtrHtr:IsElecCentralHtr - 6"   ResDHWSys:DHWHeater[6]:IsElecCentralHtr  =
      {  if (IfValidAnd( MFamDistType > 0 ) .AND. IfValidAnd( HeaterMultFlt[6] > 0 ) .AND.
             IfValidAnd( CentralDHW > 0 ) .AND. IfValidAnd( NewCentralElecModel > 0 )) then  1
         else  UNCHANGED  endif  }


   "Set ResWtrHtr:TypeAbbrevStr"    ResWtrHtr:TypeAbbrevStr  =          ; SAC 6/27/20   ; SAC 02/20/21 (tic #1260)
      {  switch (HeaterElementType)
            case  1 :  ; Gas
                        switch (TankType)
                           case  0 :  "Boiler"        ; "Boiler"    
                           case  1 :  "Indir"         ; "Indirect"  
                           case  2 :  "ExLrgInst"     ; "Large Instantaneous (existing only)"
                           case  3 :  "ExLrgStor"     ; "Large Storage (existing only)"      
                           case  5 :  "ExSmlInst"     ; "Small Instantaneous (existing only)"
                           case  6 :  "ExSmlStor"     ; "Small Storage (existing only)"
                           case 10 :  "ConsInst-UEF"        ; "Consumer Instantaneous (UEF)" 
                           case 11 :  "CommInst-TE"         ; "Commercial Instantaneous (TE)"
                           case 12 :  "ConsStor-UEF"        ; "Consumer Storage (UEF)"       
                           case 13 :  "CommStor-TE"         ; "Commercial Storage (TE & SBL)"
                           case 14 :  "ResDutyCommStor-UEF" ; "Residential-Duty Commercial Storage (UEF)"
                           case 16 :  "CommPkgdBlr"         ; "Commercial Packaged Boiler"
                           default :  "unrecognized type"
                        endswitch
            case  0 :  ; Electric Resistance
                        switch (TankType)
                           case  2 :  "ExLrgInst"     ; "Large Instantaneous (existing only)"
                           case  3 :  "ExLrgStor"     ; "Large Storage (existing only)"      
                           case  5 :  "ExSmlInst"     ; "Small Instantaneous (existing only)"
                           case  6 :  "ExSmlStor"     ; "Small Storage (existing only)"      
                           case 10 :  "ConsInst-UEF"           ; "Consumer Instantaneous (UEF)"       
                           case 11 :  "CommInst-TE"            ; "Commercial Instantaneous (TE)"      
                           case 12 :  "ConsStor-UEF"           ; "Consumer Storage (UEF)"             
                           case 13 :  "CommStor-TE"            ; "Commercial Storage (TE & SBL)"      
                           case 15 :  "ResDutyCommInst-UEF"    ; "Residential-Duty Commercial Instantaneous (UEF)"
                           default :  "unrecognized type"
                        endswitch
            case  5 :  ; Heat Pump
                        if (IfValidAnd( HPWH_NEEARated > 0 )) then  "HPWH-NEEA"
                        else if (IfValidAnd( HPWH_ComProduct > 0 )) then  "HPWH-Com"
                        else if (IfValidAnd( IsUEFHtPump > 0 )) then  "HPWH-UEF"
                        else  "HPWH-EF"
                        endif endif endif
            default :  "unrecognized type"
         endswitch  }
   ; added 'JA13' - SAC 02/02/21   ; added rptg of NRes area served - SAC 02/24/23 (tic #3418)
   "Set ResWtrHtr:TreeDescrip"      ResWtrHtr:TreeDescrip  =            ; added reporting of new AssignedCommonArea - SAC 10/09/24 (tic #3630)
      {  if (HeaterElementType == 5 .AND. HPWHCategory == 1 .AND. IfValidAnd( DemRespCompat > 0 ))
         then  if (Proj:IsComRuleset)
               then  if (IfValidAnd( NumAssignedDUFracs > 0 ) .AND. IfValidAnd( AssignedCommonArea > 1 ))
                     then  Format( "%s, JA13, serving %.0f dwelling unit(s), %s ft2 common area and/or other zones", TypeAbbrevStr, NumAssignedDUFracs, FltToStr( AssignedCommonArea ) )
                     else if (IfValidAnd( NumAssignedDUFracs > 0 ))
                     then  Format( "%s, JA13, serving %.0f dwelling unit(s) and/or other zones", TypeAbbrevStr, NumAssignedDUFracs )
                     else if (IfValidAnd( AssignedCommonArea > 1 ))
                     then  Format( "%s, JA13, serving %s ft2 common area and/or other zones", TypeAbbrevStr, FltToStr( AssignedCommonArea ) )
                     else if (IfValidAnd( FloorAreaServed > 0 ))
                     then  Format( "%s, JA13, %s SqFt assigned", TypeAbbrevStr, FltToStr( FloorAreaServed ) )
                     else  Format( "%s, JA13, not assigned", TypeAbbrevStr )
                     endif endif endif endif
               else  if (IfValidAnd( FloorAreaServed > 1 ))
                     then  Format( "%s, JA13, %s SqFt assigned", TypeAbbrevStr, FltToStr( FloorAreaServed ) )
                     else  Format( "%s, JA13, not assigned", TypeAbbrevStr )
                     endif
               endif
         else  if (Proj:IsComRuleset)
               then  if (IfValidAnd( NumAssignedDUFracs > 0 ) .AND. IfValidAnd( AssignedCommonArea > 1 ))
                     then  Format( "%s, serving %.0f dwelling unit(s), %s ft2 common area and/or other zones", TypeAbbrevStr, NumAssignedDUFracs, FltToStr( AssignedCommonArea ) )
                     else if (IfValidAnd( NumAssignedDUFracs > 0 ))
                     then  Format( "%s, serving %.0f dwelling unit(s) and/or other zones", TypeAbbrevStr, NumAssignedDUFracs )
                     else if (IfValidAnd( AssignedCommonArea > 1 ))
                     then  Format( "%s, serving %s ft2 common area and/or other zones", TypeAbbrevStr, FltToStr( AssignedCommonArea ) )
                     else if (IfValidAnd( FloorAreaServed > 0 ))
                     then  Format( "%s, %s SqFt assigned", TypeAbbrevStr, FltToStr( FloorAreaServed ) )
                     else  Format( "%s, not assigned", TypeAbbrevStr )
                     endif endif endif endif
               else  if (IfValidAnd( FloorAreaServed > 1 ))
                     then  Format( "%s, %s SqFt assigned", TypeAbbrevStr, FltToStr( FloorAreaServed ) )
                     else  Format( "%s, not assigned", TypeAbbrevStr )
                     endif
               endif
         endif  }

   ; SAC 11/14/19 - defaulting of new DHWLoopTankHeater properties
;1,           "whType",            BEMP_Sym,  1,  0,  1, "",                 0,  0,                          3201, "Type of water heater" 
;1,           "whHeatSrc",         BEMP_Sym,  1,  0,  1, "",                 0,  0,                          3201, "Fuel source for water heater" 
   "Default ResLpTankHtr:whEF"          ResLpTankHtr:whEF        = {  0.97   }
   "Default ResLpTankHtr:whResHtPwr"    ResLpTankHtr:whResHtPwr  = {  20000  }
   "Default ResLpTankHtr:whVol"         ResLpTankHtr:whVol       = {  300    }  

	"Default ResLpTankHtr:TankOutside"   ResLpTankHtr:TankOutside	=     ; SAC 11/19/19
   {  if (IfValidAnd( ResProj:StdsVersionYr >= 2020 ) .AND. ComponentCount( ResGarage ) < 1 .AND.
          T24RClimateZoneCodeBase:HPWHLocWhenNoGarage( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) == "Outdoor")
      then  1
      else if (ComponentCount( ResGarage ) < 1 .AND. ComponentCount( ResZn ) < 1 .AND.
               ComponentCount( ResOtherZn ) < 1)
      then  1
      else  0
      endif endif  }
	"Default ResLpTankHtr:TankZone"		ResLpTankHtr:TankZone		=        ; added ResOtherZn parking area - SAC 02/06/22 (MFam)
   {  if (IfValidAnd( TankOutside > 0 )) then  UNDEFINED
		else if (ComponentCount( ResGarage ) > 0) then  MaxAllComp( ResGarage:Area )
		else if (MaxAll( ResOtherZn:AreaParking ) > 0) then  MaxAllComp( ResOtherZn:AreaParking )
		else if (GlobalCompAssigned( ResProj:DfltMFamLaundryZn ) > 0) then  ResProj:DfltMFamLaundryZn
		else if (ComponentCount( ResCrawlSpc ) > 0) then  MaxAllComp( ResCrawlSpc:Area )
		else if (ComponentCount( ResAttic ) > 0) then  MaxAllComp( ResAttic:FloorArea )
		else  UNDEFINED  endif endif endif endif endif endif  }

   ; for input guidance and to document demand responsiveness - SAC 02/02/21
   "Set ResWtrHtr:UserMsg"    ResWtrHtr:UserMsg =     ; expanded message to include info re: taking small elec res DHW exception - SAC 05/23/22 (tic #1332)
      {  if (HeaterElementType == 5 .AND. HPWHCategory == 1 .AND. HPWHBrand < 2)
         then  "NEEA HPWH Brand must be selected"
         else if (HeaterElementType == 5 .AND. HPWHCategory == 1 .AND. HPWHModel < 2)
         then  "NEEA HPWH Model must be selected"
         else if (HeaterElementType == 5 .AND. HPWHCategory == 2 .AND. HPWHComModel < 2)
         then  "Commercial HPWH Model must be selected"
         else if (HeaterElementType == 5 .AND. HPWHCategory == 1 .AND. IfValidAnd( DemRespCompat > 0 ))
         then  "JA13 Compliant (demand responsive)"
         else  UNDEFINED
         endif endif endif endif  }
      ;   else if (HeaterElementType == 0 .AND. TankType == 12 .AND. SumRevRef( ResDHWSys:DHWHeater[1], ResDHWSys:ShowNewSmConsInstElecExcept ) .AND.
      ;            SumRevRef( ResDHWSys:DHWHeater[1], ResDHWSys:NewSmConsInstElecExcept ) .AND. IfValidAnd( TankVolume > 20 ))
      ;   then  ; this htr is elec res consumer Storage and part of system that is taking small home elec res DHW exception => restrict tank vol to 20 gal - SAC 05/23/22 (tic #1332)
      ;         "Tank Volume limited to 20 gallons"
         ;      "Tank Volume is limited to 20 gallons (small home electric resistance DHW exception)"
END
;*************************************************************************


;************************************************************************* - SAC 1/5/20 (tic #862)
RULELIST "PostProposedInput_CentralHPWH" 1 0 1 0
;*************************************************************************
   "Blast ResDHWSys:DHWHeater[6]"   ResDHWSys:DHWHeater[6]  = {  UNDEFINED  }
   "Blast ResDHWSys:DHWHeater[5]"   ResDHWSys:DHWHeater[5]  = {  UNDEFINED  }
   "Blast ResDHWSys:DHWHeater[4]"   ResDHWSys:DHWHeater[4]  = {  UNDEFINED  }
   "Blast ResDHWSys:DHWHeater[3]"   ResDHWSys:DHWHeater[3]  = {  UNDEFINED  }
   "Blast ResDHWSys:DHWHeater[2]"   ResDHWSys:DHWHeater[2]  = {  UNDEFINED  }
   "Setup Central HPWH"    ResDHWSys:Action =      ; SAC 6/1/20
      {  if (CHPWHSysDescrip == 1)
         then  EvalRulelist( "PostProposedInput_CentralHPWH_Small", 1 )
         else  EvalRulelist( "PostProposedInput_CentralHPWH_Large", 1 )  endif  }
END
;************************************************************************* - SAC 1/5/20 (tic #862)
RULELIST "PostProposedInput_CentralHPWH_Large" 1 0 1 0

   "Import ResDHWSys:DHWHeater[1] from library"   ResDHWSys:DHWHeater[1]  =
      {  RuleLibrary( DHWHeater, "t24-CHPWH", 1 )  }

; all subsequent rules re-defined for new CHPWH inputs - SAC 5/28/20
   "Set ResDHWSys:DHWHeater[1]:CentralHPWHCprsrType"     ResDHWSys:DHWHeater[1]:CentralHPWHCprsrType  =     ; SAC 3/9/20 (Colmac)
      {  CHPWHCompType  }
   "Set ResDHWSys:DHWHeater[1]:IsBuiltUp flag"     ResDHWSys:DHWHeater[1]:IsBuiltUp  = {  1  }              ; SAC 5/28/20

   ; SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
   ; SAC 4/29/20 - revised rule to divide CHPWHTotTankVol by CHPWHNumCompFlt so that NonStdTankVolume represents tank volumer PER compressor, which is how CSE uses/interprets it (tic #862)
   "Set ResDHWSys:DHWHeater[1]:NonStdTankVolume (if specified)"   ResDHWSys:DHWHeater[1]:NonStdTankVolume  =
      {  if (IfValidAnd( CHPWHTotTankVol > 0 ) .AND. IfValidAnd( CHPWHNumCompFlt > 0 ))
         then  CHPWHTotTankVol / CHPWHNumCompFlt
         else  UNCHANGED  endif  }
;   "Set ResDHWSys:DHWHeater[1]:TankZone to '- none -'"   ResDHWSys:DHWHeater[1]:TankZone  =
;      {  NONE  }     ; should cause simulated location to be UnCond (avg of DBT & 70)

   "Set ResDHWSys:DHWHeater[1]:TankCountSim (tanks per htr/compressor)"    ResDHWSys:DHWHeater[1]:TankCountSim  =       ; SAC 5/28/20   ; prevent undef error when autosizing - SAC 03/02/22
      {  if (CHPWHSysDescrip >= 2)
         then  if (IfValidAnd( DHWHeater[1]:ASHPAutoSize > 0 ) .OR.
                   IfValidAnd( CHPWHTankCount  > 0 )==0 .OR.
                   IfValidAnd( CHPWHNumCompFlt > 0 )==0) then  UNDEFINED 
               else  CHPWHTankCount / CHPWHNumCompFlt
               endif
         else  UNDEFINED  endif  }
   "Set ResDHWSys:DHWHeater[1]:InsulRValSim"             ResDHWSys:DHWHeater[1]:InsulRValSim  =       ; SAC 5/28/20
      {  if (CHPWHSysDescrip >= 2)
         then  CHPWHTankRVal
         else  UNDEFINED  endif  }

; not valid for BuiltUp ASHPX - which is always the case here - SAC 6/1/20
;   "Set ResDHWSys:DHWHeater[1]:ResHtPwrSim[1]-upper"     ResDHWSys:DHWHeater[1]:ResHtPwrSim[1] =
;      {  if (IfValidAnd( CHPWHTotTankVol > 0 ) .AND. IfValidAnd( CHPWHNumCompFlt > 0 ))
;         then  1000 * DHWHeater[1]:NonStdTankVolume / 10
;         else  UNDEFINED  endif  }
;   "Set ResDHWSys:DHWHeater[1]:ResHtPwrSim[2]-lower"     ResDHWSys:DHWHeater[1]:ResHtPwrSim[2] = {  DHWHeater[1]:ResHtPwrSim[1]  }

; PRIOR CHPWH rules - SAC 5/28/20
;   "Set ResDHWSys:DHWHeater[1]:CentralHPWHCprsrType"     ResDHWSys:DHWHeater[1]:CentralHPWHCprsrType  =     ; SAC 3/9/20 (Colmac)
;      {  CHPWHCompType  }
;
;   ; SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
;   ; SAC 4/29/20 - revised rule to divide CHPWHTotTankVol by CHPWHNumCompFlt so that NonStdTankVolume represents tank volumer PER compressor, which is how CSE uses/interprets it (tic #862)
;   "Set ResDHWSys:DHWHeater[1]:NonStdTankVolume (if specified)"   ResDHWSys:DHWHeater[1]:NonStdTankVolume  =
;      {  if (IfValidAnd( CHPWHTotTankVol > 0 ) .AND. IfValidAnd( CHPWHNumCompFlt > 0 ))
;         then  CHPWHTotTankVol / CHPWHNumCompFlt
;         else  UNCHANGED  endif  }
;   "Set ResDHWSys:DHWHeater[1]:TankZone to '- none -'"   ResDHWSys:DHWHeater[1]:TankZone  =
;      {  NONE  }     ; should cause simulated location to be UnCond (avg of DBT & 70)
;
;   ; SAC 3/9/20 - revised following rules to set EITHER ResDHWSys:HeaterMultFlt[1] OR HeaterMult[1] based on EnableResearchMode
;   "Set ResDHWSys:HeaterMultFlt[1]"    ResDHWSys:HeaterMultFlt[1]  =
;     ; {  if (IfValidAnd( CHPWHAutosize = 0 )==0 .OR.          - SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
;     ;        IfValidAnd( CHPWHNumCompFlt  > 0 )==0) then  1
;      {  if (IfValidAnd( Proj:EnableResearchMode > 0 )==0) then  UNDEFINED
;         else if (IfValidAnd( CHPWHNumCompFlt  > 0 )==0) then  1
;         else  CHPWHNumCompFlt  endif endif  }
;   "Set ResDHWSys:HeaterMult[1]"       ResDHWSys:HeaterMult[1]  =
;      {  if (IfValidAnd( Proj:EnableResearchMode > 0 )) then  UNDEFINED
;         else if (IfValidAnd( CHPWHNumComp  > 0 )==0) then  1
;         else  CHPWHNumComp  endif endif  }
;
;   "Import ResDHWSys:LoopHeater from library"   ResDHWSys:LoopHeater  =
;      {  RuleLibrary( DHWLoopTankHeater, "t24-LpTankHtr", 1 )  }
;   "Set ResDHWSys:LoopHeater:whVol (if valid)"   ResDHWSys:LoopHeater:whVol  =
;      {  if (IfValidAnd( CHPWHLoopTankVol > 0 )) then  CHPWHLoopTankVol
;         else  UNCHANGED  endif  }
;   "Set ResDHWSys:LoopHeater:TankZone to '- none -'"     ResDHWSys:LoopHeater:TankZone  =
;      {  NONE  }     ; should cause simulated location to be UnCond (avg of DBT & 70)

   "call subordinate rulelist to set remaining DHWHeater properties"    ResDHWSys:Action =
      {  EvalRulelist( "PostProposedInput_CentralHPWH_LargeAndSmall", 1 )  }
END
;************************************************************************* - SAC 6/1/20
RULELIST "PostProposedInput_CentralHPWH_Small" 1 0 1 0

   "Import ResDHWSys:DHWHeater[1] from library"   ResDHWSys:DHWHeater[1]  =
      {  if (CHPWHIntegPkgType == 1)
         then  RuleLibrary( DHWHeater, "t24-CHPWH-NEEA", 1 )
         else  RuleLibrary( DHWHeater, "t24-CHPWH-Com",  1 )  endif  }

   "Set ResDHWSys:DHWHeater[1]:HPWHBrand"       ResDHWSys:DHWHeater[1]:HPWHBrand  =
      {  if (CHPWHIntegPkgType == 1) then  CHPWHNEEABrand
         else  UNCHANGED  endif  }
   "Set ResDHWSys:DHWHeater[1]:HPWHModel"       ResDHWSys:DHWHeater[1]:HPWHModel  =
      {  if (CHPWHIntegPkgType == 1) then  CHPWHNEEAModel
         else  UNCHANGED  endif  }
   "Set ResDHWSys:DHWHeater[1]:HPWHComModel"    ResDHWSys:DHWHeater[1]:HPWHComModel  =
      {  if (CHPWHIntegPkgType == 2) then  CHPWHComModel
         else  UNCHANGED  endif  }

;   ; SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
;   ; SAC 4/29/20 - revised rule to divide CHPWHTotTankVol by CHPWHNumCompFlt so that NonStdTankVolume represents tank volumer PER compressor, which is how CSE uses/interprets it (tic #862)
;   "Set ResDHWSys:DHWHeater[1]:NonStdTankVolume (if specified)"   ResDHWSys:DHWHeater[1]:NonStdTankVolume  =
;      {  if (IfValidAnd( CHPWHTotTankVol > 0 ) .AND. IfValidAnd( CHPWHNumCompFlt > 0 ))
;         then  CHPWHTotTankVol / CHPWHNumCompFlt
;         else  UNCHANGED  endif  }
;   "Set ResDHWSys:DHWHeater[1]:TankZone to '- none -'"   ResDHWSys:DHWHeater[1]:TankZone  =
;      {  NONE  }     ; should cause simulated location to be UnCond (avg of DBT & 70)

;   "Set ResDHWSys:DHWHeater[1]:TankCountSim (tanks per htr/compressor)"    ResDHWSys:DHWHeater[1]:TankCountSim  =       ; SAC 5/28/20
;      {  if (CHPWHSysDescrip >= 2)
;         then  CHPWHTankCount / CHPWHNumCompFlt
;         else  UNDEFINED  endif  }
;   "Set ResDHWSys:DHWHeater[1]:InsulRValSim"             ResDHWSys:DHWHeater[1]:InsulRValSim  =       ; SAC 5/28/20
;      {  if (CHPWHSysDescrip >= 2)
;         then  CHPWHTankRVal
;         else  UNDEFINED  endif  }

   "call subordinate rulelist to set remaining DHWHeater properties"    ResDHWSys:Action =
      {  EvalRulelist( "PostProposedInput_CentralHPWH_LargeAndSmall", 1 )  }
END
;*************************************************************************  SAC 6/3/20
RULELIST "PostProposedInput_CentralHPWH_LargeAndSmall" 1 0 1 0

   ; SAC 3/9/20 - revised following rules to set EITHER ResDHWSys:HeaterMultFlt[1] OR HeaterMult[1] based on EnableResearchMode
   "Set ResDHWSys:HeaterMultFlt[1]"    ResDHWSys:HeaterMultFlt[1]  =
     ; {  if (IfValidAnd( CHPWHAutosize = 0 )==0 .OR.          - SAC 2/4/20 - CHPWHAutosize removed (tic #1197)
     ;        IfValidAnd( CHPWHNumCompFlt  > 0 )==0) then  1
      {  if (IfValidAnd( Proj:EnableResearchMode > 0 )==0) then  UNDEFINED
         else if (IfValidAnd( CHPWHNumCompFlt  > 0 )==0) then  1
         else  CHPWHNumCompFlt  endif endif  }
   "Set ResDHWSys:HeaterMult[1]"       ResDHWSys:HeaterMult[1]  =
      {  if (IfValidAnd( Proj:EnableResearchMode > 0 )) then  UNDEFINED
         else if (IfValidAnd( CHPWHNumComp  > 0 )==0) then  1
         else  CHPWHNumComp  endif endif  }
   "Set ResDHWSys:CntrlHtrMultFlt[1]"     ResDHWSys:CntrlHtrMultFlt[1]  =           ; SAC 6/14/20 (tic #185)
      {  HeaterMultFlt[1]  }

   "Set ResDHWSys:DHWHeater[1]:ShowTankLocation"   ResDHWSys:DHWHeater[1]:ShowTankLocation = { 1 }       ; SAC 07/11/21 (tic #1275)
   ; rules to setup both tank & air source locations - SAC 6/3/20
   "Set ResDHWSys:DHWHeater[1]:IsCentralHPWH flag"    ResDHWSys:DHWHeater[1]:IsCentralHPWH  = {  1  }              ; SAC 6/3/20
   "Set ResDHWSys:DHWHeater[1]:TankOutside"     ResDHWSys:DHWHeater[1]:TankOutside =
      {  if (CHPWHTankLoc == 1) then  1  else  0  endif  }
   "Set ResDHWSys:DHWHeater[1]:TankZone"        ResDHWSys:DHWHeater[1]:TankZone =
      {  if (CHPWHTankLoc == 2 .AND. LocalCompAssigned( CHPWHTankZone ) > 0)
         then  CHPWHTankZone  else  UNDEFINED  endif  } 
   "Set ResDHWSys:DHWHeater[1]:ASHPTSrcOutside"     ResDHWSys:DHWHeater[1]:ASHPTSrcOutside =
      {  if (CHPWHSrcAirLoc == 1) then  1  else  0  endif  }
;   "Set ResDHWSys:DHWHeater[1]:ASHPSplit"       ResDHWSys:DHWHeater[1]:ASHPSplit = {  1  }   ; hardwire for CHPWHs  - no effect
   "Set ResDHWSys:DHWHeater[1]:ASHPTSrcZone"    ResDHWSys:DHWHeater[1]:ASHPTSrcZone =
      {  if (CHPWHSrcAirLoc == 2 .AND. LocalCompAssigned( CHPWHSrcAirZone ) > 0)
         then  CHPWHSrcAirZone  else  UNDEFINED  endif  } 
END
;*************************************************************************


;************************************************************************* SAC 01/30/21 (tic #1260)
RULELIST  "DHWHeater_Default_HPWHFlags" 0 0 0 0
   "Reset old NEEA & UEF HPWH flags if needed"     ResWtrHtr:Action =
      {  if ((LocalStatus( HPWH_NEEARated ) > 5 .OR. LocalStatus( IsUEFHtPump ) > 5) .AND.
             LocalStatus( HPWHCategory ) > 5)
         then  EvalRulelist( "DHWHeater_HPWHFlagIssue", 1 )
         else if (LocalStatus( HPWH_NEEARated ) > 5 .OR. LocalStatus( IsUEFHtPump ) > 5)
         then  EvalRulelist( "DHWHeater_Force_HPWHCategory_FromHPWHFlags", 1 )
         else  UNCHANGED  endif endif  }
   ; default via enums - ResWtrHtr:HPWHCategory
   "Default ResWtrHtr:HPWH_NEEARated"	ResWtrHtr:HPWH_NEEARated =
      {  if (HeaterElementType == 5 .AND. HPWHCategory == 1) then  1  else  0  endif  }
   "Default ResWtrHtr:IsUEFHtPump - Whether or not DHW heater is a UEF-rated heat pump"   ResWtrHtr:IsUEFHtPump =
      {  if (HeaterElementType == 5 .AND. HPWHCategory == 3) then  1  else  0  endif  }
   "Default ResWtrHtr:HPWH_ComProduct"	ResWtrHtr:HPWH_ComProduct =
      {  if (HeaterElementType == 5 .AND. HPWHCategory == 2) then  1  else  0  endif  }
   "Reset HPWHBrand if not applicable"    ResWtrHtr:Action =            ; SAC 02/18/21
      {  if (LocalStatus( HPWHBrand ) > 5 .AND. HPWHBrand > 0 .AND.
             (HeaterElementType != 5 .OR. HPWH_NEEARated < 1))
         then  EvalRulelist( "DHWHeater_Force_HPWHBrand_NA", 1 )
         else  UNCHANGED  endif  }
END
RULELIST  "DHWHeater_HPWHFlagIssue"  1 0 0 0
   "Post msg to log"    ResWtrHtr:Action = {  PostMessageToLog( "DHWHeater '%s' Error - HPWHCategory and either/both HPWH_NEEARated and IsUEFHtPump user-specified. HPWHCategory selection of '%s' will override other settings.", Name, EnumString( HPWHCategory ) )  }
   "Reset HPWH flags"   ResWtrHtr:Action = {  EvalRulelist( "DHWHeater_Force_HPWHFlagReset", 1 )  }
END
RULELIST  "DHWHeater_Force_HPWHCategory_FromHPWHFlags"  1 0 1 1
   "Set ResWtrHtr:HPWHCategory based on HPWH flags"      ResWtrHtr:HPWHCategory =            ; SAC 02/01/21 (tic #1260)
      {  if (IfValidAnd( HPWH_NEEARated > 0 ) .AND. LocalStatus( HPWH_NEEARated ) > 5) then  "Residential (NEEA rated) Product"
         else if (IfValidAnd( IsUEFHtPump > 0 ) .AND. LocalStatus( IsUEFHtPump ) > 5) then   "UEF Rated"
         else  "Non-UEF Rated"
         endif endif  }
   "Reset HPWH flags"   ResWtrHtr:Action = {  EvalRulelist( "DHWHeater_Force_HPWHFlagReset", 1 )  }
END
RULELIST  "DHWHeater_Force_HPWHFlagReset"  1 0 0 0
   "Blast ResWtrHtr:HPWH_NEEARated"	ResWtrHtr:HPWH_NEEARated = {  UNDEFINED  }
   "Blast ResWtrHtr:IsUEFHtPump"    ResWtrHtr:IsUEFHtPump    = {  UNDEFINED  }
END
RULELIST  "DHWHeater_Default_HPWHFlags_Before190200" 0 0 0 0
   "Default ResWtrHtr:HPWH_NEEARated"	ResWtrHtr:HPWH_NEEARated	=     ; SAC 6/1/16 - switched default to selected (tic #660) / SAC 1/14/19 - switched AGAIN to selected (??)
      {  if (HeaterElementType == 5) then  1  else  0  endif  }         ; SAC 1/17/19 - revised defaulting again to be selected only when HtrElemType = HP
   "Default ResWtrHtr:IsUEFHtPump - Whether or not DHW heater is a UEF-rated heat pump"   
      ResWtrHtr:IsUEFHtPump  = {
         if (HPWH_NEEARated .OR. HeaterElementType != 5) then  0  else  1  endif  }    ; SAC 1/14/19 - switched default from '0' to '1' for Non-NEEA HPWHs  / SAC 1/21/19 - revised again to ensure set '1' only for HPs
   "Default ResWtrHtr:HPWH_ComProduct"	ResWtrHtr:HPWH_ComProduct = {  0  }             ; wasn't available prior to 2019.2.0 - SAC 01/30/21 (tic #1260)
END
RULELIST  "DHWHeater_Force_HPWHBrand_NA"  1 0 0 1
   "Set ResWtrHtr:HPWHBrand to n/a"    ResWtrHtr:HPWHBrand = {  0  }    ; SAC 02/18/21
END
;*************************************************************************


;************************************************************************* split out (from above) into separate rulelist - SAC 1/27/20
RULELIST "Default_DHWSolarSys" 0 0 0 0
   ; SAC 6/11/20 (tic #1210)
;           "RatingProgram",     BEMP_Sym,  1,  0,  0, "",                 0,  0,                           1003, "Rating program defining system/collector performance"     ; SAC 6/11/20 (tic #1210)
;           "SystemName",        BEMP_Str,  1,  0,  0, "",                 0,  0,                           1003, "OG-300 system name"                                 ; SAC 6/11/20 (tic #1210)
;           "RatedSSF",          BEMP_Flt,  1,  0,  0, "frac",             0,  0,                           1003, "OG-300 rated annual solar savings fraction"         ; SAC 6/11/20 (tic #1210)

   ; SAC 1/7/20 - DHWSolarSys (tic #1013)
      ; allow conditional enumerations to handle Manufac/Brand/Model
      ;     DHWSolSys:Manufacturer
      ;     DHWSolSys:Brand
      ;     DHWSolSys:Model
   "Set DHWSolSys:CertID"      DHWSolSys:CertID  =
      {  if (Manufacturer > 0 .AND. Brand > 0 .AND. Model > 0) 
         then  SolarThermalCollectors:SRCC_IAPMOnumber( "Manufacturer", EnumString( Manufacturer ),
                       "BrandName", EnumString( Brand ), "ModelNumber", EnumString( Model ) )
         else  UNDEFINED  endif  }

   ; revised/added rules to ensure that only one valid collector count exists - SAC 4/3/20
   "Default DHWSolSys:Count (possibly from CountFlt) if Not research mode"  DHWSolSys:Count =
      {  if (IfValidAnd( Proj:EnableResearchMode > 0 )) then  UNDEFINED
         else  if (LocalStatus( CountFlt ) > 5)
               then  if (CountFlt < 1) then  1
                     else  int( CountFlt+0.5 )  endif
               else  1  endif  endif  }
   ; "dbg" DHWSolSys:Action = { PostMessageToLog( "   chkg to blast CountFlt for DHWSolSys '%s':  Proj:EnableResearchMode %g | CountFlt status %g", Name, Proj:EnableResearchMode, LocalStatus( CountFlt ) ) }
   ; remove following rule to never blast Count or CountFlt - allow BOTH to be present in project file, but only USE 1 based on EnableResearchMode - SAC 04/06/22
   ;"Blast DHWSolSys:Count/CountFlt if user-defined and IS/NOT research mode"     DHWSolSys:Action =
   ;   {  if (     IfValidAnd( Proj:EnableResearchMode > 0 )    .AND. LocalStatus( Count ) > 0)
   ;      then  EvalRulelist( "BlastInputs_DHWSolarSys_Count", 1 )
   ;      else if (IfValidAnd( Proj:EnableResearchMode > 0 )==0 .AND. LocalStatus( CountFlt ) > 5)
   ;      then  EvalRulelist( "BlastInputs_DHWSolarSys_CountFlt", 1 )
   ;      else  UNCHANGED  endif endif  }
   "Default DHWSolSys:CountFlt"   DHWSolSys:CountFlt  =       ; SAC 1/25/20 - added only for EnableResearchMode (per BAW request)
      {  if (IfValidAnd( Count > 0 )) then  Count
         else  1  endif  }
   "Set DHWSolSys:CountUse"   DHWSolSys:CountUse  =      ; SAC 04/06/22
      {  if (IfValidAnd( Proj:EnableResearchMode > 0 ))
         then  CountFlt  else  Count  endif  }

   "Set DHWSolSys:Area"           DHWSolSys:Area  =     ; converted area from m2 to ft2 - SAC 1/22/20
      {  if (Manufacturer > 0 .AND. Brand > 0 .AND. Model > 0) 
         then  SolarThermalCollectors:Area( "Manufacturer", EnumString( Manufacturer ),
                       "BrandName", EnumString( Brand ), "ModelNumber", EnumString( Model ) ) * 10.7639
         else  UNDEFINED  endif  }
   "Set DHWSolSys:EffCurveYInt"   DHWSolSys:EffCurveYInt  =
      {  if (Manufacturer > 0 .AND. Brand > 0 .AND. Model > 0) 
         then  SolarThermalCollectors:YIntercept( "Manufacturer", EnumString( Manufacturer ),
                       "BrandName", EnumString( Brand ), "ModelNumber", EnumString( Model ) )
         else  UNDEFINED  endif  }
   "Set DHWSolSys:EffCurveSlope"  DHWSolSys:EffCurveSlope  =
      {  if (Manufacturer > 0 .AND. Brand > 0 .AND. Model > 0) 
         then  SolarThermalCollectors:Slope( "Manufacturer", EnumString( Manufacturer ),
                       "BrandName", EnumString( Brand ), "ModelNumber", EnumString( Model ) )
         else  UNDEFINED  endif  }

      ; no defaults
      ;     DHWSolSys:Azimuth
      ;     DHWSolSys:Tilt

   "Default DHWSolSys:TankVolume"    DHWSolSys:TankVolume  =     ; SAC 2/3/20
      {  if (IfValidAnd( Area > 0 ) .AND. IfValidAnd( CountUse > 0 ))
         then  int( (1.5 * Area * CountUse)+0.5 )
         else  UNDEFINED  endif  }

   ; DHWSolSys:CalculatedSSF   ??

   ; SAC 1/28/20 - removed check on TankVolume - leaving blank allows CSE to default  ; SAC 2/3/20 - restored TankVolume check
   ; SAC 6/29/20 - OG-300 mods: removed requirement for SystemName and added disallowed for MFam models (tic #1210)
   "Set DHWSolSys:ErrID (1-99: can't simulate / >=100: code restriction (allow when EnableReseachMode activated))"    DHWSolSys:ErrID  =
      {  if (RatingProgram == 1)    ; SRCC OG-100 (solar collectors)
         then  if (IfValidAnd(      Azimuth >= 0 )==0) then  2
               else if (IfValidAnd( Tilt    >= 0 )==0) then  3
               else if (Manufacturer < 1) then  4
               else if (Brand        < 1) then  5
               else if (Model        < 1) then  6
               else if (IfValidAnd( TankVolume >= 0 )==0) then  1
               else if (LocalStatus( CertID ) > 0 .AND. IfValidAnd( Area > 0 ) .AND.
                        LocalStatus( EffCurveYInt ) > 0 .AND. LocalStatus( EffCurveSlope ) > 0) then  0
               else  7  endif endif endif endif endif endif endif
         else if (RatingProgram == 3)     ; SRCC OG-300 (entire system)   - SAC 6/11/20 (tic #1210)
         then  if (IfValidAnd(      RatedSSF > 0 )==0) then  31
               else if (Proj:IsComRuleset            ) then  100
               else  0  endif endif
         else  99  endif endif  }
            ;   else if (LocalStatus( SystemName ) < 1) then  32
   "Set DHWSolSys:ErrMsg"   DHWSolSys:ErrMsg  =
      {  switch (ErrID)
            case   1 :  "TankVolume must be entered (>=0)"
            case   2 :  "Azimuth must be entered (>=0)"
            case   3 :  "Tilt must be entered (>=0)"
            case   4 :  "Collector Manufacturer must be specified"
            case   5 :  "Collector Brand must be specified"
            case   6 :  "Collector Model must be specified"
            case   7 :  "Error retrieving collector data from lookup table"
            case  31 :  "Rated system annual SSF must be entered (>0 & <1)"
            case  32 :  "System name must be entered"   ; no longer req'd
            case  99 :  "unrecognized Rating Program selection"
            case 100 :  "OG-300 systems not allowed in Multifamily models"
            default  :  UNDEFINED
         endswitch  }
   "Set DHWSolSys:CSESimValid"    DHWSolSys:CSESimValid  = {  UNDEFINED  }
END
;*************************************************************************


;*************************************************************************  - SAC 1/8/19
RULELIST "ProposedInput_DHWCompactDistribution_Blast" 1 0 0 1
;   "Blast ResDHWSys:CompactFactor"     ResDHWSys:CompactFactor    = {  UNDEFINED  }
;   "Blast ResDHWSys:CmpctDistBtnLbl"   ResDHWSys:CmpctDistBtnLbl  = {  UNDEFINED  }
   "Blast ResDHWSys:CDDistMessage"     ResDHWSys:CDDistMessage    = {  UNDEFINED  }
END
;*************************************************************************

; SAC 12/4/18 - rules needed to process DHW Compact Distribution qualification
;*************************************************************************
RULELIST "ProposedInput_DHWCompactDistribution" 0 0 0 0
;*************************************************************************

   ; ResProj:NumStories & ResZn:Top should already be set in ProposedInput_HVAC rules
   ; mods to ensure non-DHW Zones & OtherZones not included in floors served calcs - SAC 08/30/20 (MFamProto)
   ; updated logic to handle scenario where model is primarily or entirely ResOtherZn - SAC 10/11/24 (tic #3630)
   "Set ResProj:AvgFloorHeight"
      ResProj:AvgFloorHeight = {
         if (SumAll( ResDHWSys:NResFloorAreaServed ) > (SumAll( ResDHWSys:FloorAreaServed[1] ) * 0.5))
         then  if ( max( MaxAll( ResZn:Top_HasDHW    ), MaxAcrossIf( ResOtherZn:Top,    ResOtherZn:HotWtrUseDUEquiv > 0 ) ) > 0 .AND.
                    min( MinAll( ResZn:Bottom_HasDHW ), MinAcrossIf( ResOtherZn:Bottom, ResOtherZn:HotWtrUseDUEquiv > 0 ) ) > -1000 .AND.
                   IfValidAnd( NumStories_HasDHW > 0 ) )
               then  ( max( MaxAll( ResZn:Top_HasDHW    ), MaxAcrossIf( ResOtherZn:Top,    ResOtherZn:HotWtrUseDUEquiv > 0 ) ) -
                       min( MinAll( ResZn:Bottom_HasDHW ), MinAcrossIf( ResOtherZn:Bottom, ResOtherZn:HotWtrUseDUEquiv > 0 ) ) ) / max( NumStories_HasDHW, 1 )
               else   1  endif    ; error
         else  if (MaxAll( ResZn:Top_HasDHW ) > 0 .AND.
                   MinAll( ResZn:Bottom_HasDHW ) > -1000 .AND.
                   IfValidAnd( NumStories_HasDHW > 0 ) )
               then  ( MaxAll( ResZn:Top_HasDHW ) - MinAll( ResZn:Bottom_HasDHW ) ) / max( NumStories_HasDHW, 1 )
               else   1      ; error
               endif  endif  }
   "Set ResZn:BottomFlrEstimate - Z-level of the lowest floor in this zone"            ; Mult - SAC 04-27-23 (tic #3392)
      ResZn:BottomFlrEstimate  = {
         if (IfValidAnd( Top_HasDHW > -100 ))
         then  if (IfValidAnd( FloorHeight > 6 ))
               then  Top_HasDHW - (           FloorHeight * ValidOr( NumStories, 1 )) - ((Mult-1) *            FloorHeight)
               else  Top_HasDHW - (ResProj:AvgFloorHeight * ValidOr( NumStories, 1 )) - ((Mult-1) * ResProj:AvgFloorHeight)  endif
         else  999  endif  }
   "Set ResOtherZn:BottomFlrEstimate - Z-level of the lowest floor in this zone"       ; SAC 9/20/19 - OtherZone (MFamProto)  ; Mult - SAC 04-27-23 (tic #3392)
      ResOtherZn:BottomFlrEstimate  = {
         if (IfValidAnd( Top_HasDHW > -100 ))
         then  if (IfValidAnd( FloorHeight > 6 ))
               then  Top_HasDHW - (           FloorHeight * ValidOr( NumStories, 1 )) - ((Mult-1) *            FloorHeight)
               else  Top_HasDHW - (ResProj:AvgFloorHeight * ValidOr( NumStories, 1 )) - ((Mult-1) * ResProj:AvgFloorHeight)  endif
         else  999  endif  }

   "Set DwellUnit:TopZEstimate - top Z of highest floor in parent zone (for central DHWSys)"    ; Mult - SAC 04-27-23 (tic #3392)
      DwellUnit:TopZEstimate[1]     = {   ParentRef( Top ) + ((Parent( Mult )-1) * Parent( FloorHeight )/2)  }
   "Set DwellUnit:BottomZEstimate - bot Z of lowest floor in parent zone (for central DHWSys)"
      DwellUnit:BottomZEstimate[1]  = {   ResZn:BottomFlrEstimate  }
   "Set DwellUnitType:TopZEstimate - top Z of highest floor in referencing DwellUnits (ctrl DHWSys)"
      DwellUnitType:TopZEstimate    = { MaxRevRef( DwellUnit:DwellUnitTypeRef, DwellUnit:TopZEstimate ) }
   "Set DwellUnitType:TopZEstimate[2]"     DwellUnitType:TopZEstimate[2]     = {  TopZEstimate[1]  }
   "Set DwellUnitType:TopZEstimate[3]"     DwellUnitType:TopZEstimate[3]     = {  TopZEstimate[1]  }
   "Set DwellUnitType:TopZEstimate[4]"     DwellUnitType:TopZEstimate[4]     = {  TopZEstimate[1]  }
   "Set DwellUnitType:TopZEstimate[5]"     DwellUnitType:TopZEstimate[5]     = {  TopZEstimate[1]  }
   "Set DwellUnitType:BottomZEstimate - bot Z of lowest floor in referencing DwellUnits (ctrl DHWSys piping)"
      DwellUnitType:BottomZEstimate = { MinRevRef( DwellUnit:DwellUnitTypeRef, DwellUnit:BottomZEstimate ) }
   "Set DwellUnitType:BottomZEstimate[2]"  DwellUnitType:BottomZEstimate[2]  = {  BottomZEstimate[1]  }
   "Set DwellUnitType:BottomZEstimate[3]"  DwellUnitType:BottomZEstimate[3]  = {  BottomZEstimate[1]  }
   "Set DwellUnitType:BottomZEstimate[4]"  DwellUnitType:BottomZEstimate[4]  = {  BottomZEstimate[1]  }
   "Set DwellUnitType:BottomZEstimate[5]"  DwellUnitType:BottomZEstimate[5]  = {  BottomZEstimate[1]  }

   "Set DwellUnitType:CondFlrAreaArr[1] - array of CondFlrArea"   DwellUnitType:CondFlrAreaArr[1]  = {  DwellUnitType:CondFlrArea  }   ; SAC 1/3/20 (tic #862)
   "Set DwellUnitType:CondFlrAreaArr[2] - array of CondFlrArea"   DwellUnitType:CondFlrAreaArr[2]  = {  DwellUnitType:CondFlrArea  }
   "Set DwellUnitType:CondFlrAreaArr[3] - array of CondFlrArea"   DwellUnitType:CondFlrAreaArr[3]  = {  DwellUnitType:CondFlrArea  }
   "Set DwellUnitType:CondFlrAreaArr[4] - array of CondFlrArea"   DwellUnitType:CondFlrAreaArr[4]  = {  DwellUnitType:CondFlrArea  }
   "Set DwellUnitType:CondFlrAreaArr[5] - array of CondFlrArea"   DwellUnitType:CondFlrAreaArr[5]  = {  DwellUnitType:CondFlrArea  }

   "Set ResDHWSys:FloorZRange - top minus bottom Z of all floors served by this system"      ; SAC 9/20/19 - OtherZone (MFamProto)   ; SAC 10/3/19 - fix for when OtherZones present but not assigned (MFamProto)
      ResDHWSys:FloorZRange   =     ; incorporated updated logic referencing Spc (Htl/Mtl) levels - SAC 03/01/22
      {  if (Proj:IsComRuleset)
         then  if (SumRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:HasDHWUse ) > 0 .AND.
                   SumRevRef( Spc:ResDHWSysRef,    Spc:IsHotelMotelGuestRm  ) > 0 .AND.
                   SumRevRef( DwellUnitType:DHWSysRef, DwellUnitType:TopZEstimate,
                                                       DwellUnitType:NumDHWSysTypes ) > 0)
               then  max( MaxRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:Top_HasDHW ),
                     max( MaxRevRef( Spc:ResDHWSysRef,    Spc:MaxZ ),
                          MaxRevRef( DwellUnitType:DHWSysRef, DwellUnitType:TopZEstimate,
                                                              DwellUnitType:NumDHWSysTypes ) ) ) -
                     min( MinRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:BottomFlrEstimate ),
                     min( MinRevRef( Spc:ResDHWSysRef,    Spc:FlrZ ),
                          MinRevRef( DwellUnitType:DHWSysRef, DwellUnitType:BottomZEstimate,
                                                              DwellUnitType:NumDHWSysTypes ) ) )
               else if (SumRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:HasDHWUse ) > 0 .AND.
                        SumRevRef( Spc:ResDHWSysRef,    Spc:IsHotelMotelGuestRm  ) > 0)
               then  max( MaxRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:Top_HasDHW ),
                          MaxRevRef( Spc:ResDHWSysRef,    Spc:MaxZ ) ) -
                     min( MinRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:BottomFlrEstimate ),
                          MinRevRef( Spc:ResDHWSysRef,    Spc:FlrZ ) )
               else if (SumRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:HasDHWUse ) > 0 .AND.
                        SumRevRef( DwellUnitType:DHWSysRef, DwellUnitType:TopZEstimate,
                                                            DwellUnitType:NumDHWSysTypes ) > 0)
               then  max( MaxRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:Top_HasDHW ),
                          MaxRevRef( DwellUnitType:DHWSysRef, DwellUnitType:TopZEstimate,
                                                              DwellUnitType:NumDHWSysTypes ) ) -
                     min( MinRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:BottomFlrEstimate ),
                          MinRevRef( DwellUnitType:DHWSysRef, DwellUnitType:BottomZEstimate,
                                                              DwellUnitType:NumDHWSysTypes ) )
               else if (SumRevRef( Spc:ResDHWSysRef,    Spc:IsHotelMotelGuestRm  ) > 0 .AND.
                        SumRevRef( DwellUnitType:DHWSysRef, DwellUnitType:TopZEstimate,
                                                            DwellUnitType:NumDHWSysTypes ) > 0)
               then  max( MaxRevRef( Spc:ResDHWSysRef,    Spc:MaxZ ),
                          MaxRevRef( DwellUnitType:DHWSysRef, DwellUnitType:TopZEstimate,
                                                              DwellUnitType:NumDHWSysTypes ) ) -
                     min( MinRevRef( Spc:ResDHWSysRef,    Spc:FlrZ ),
                          MinRevRef( DwellUnitType:DHWSysRef, DwellUnitType:BottomZEstimate,
                                                              DwellUnitType:NumDHWSysTypes ) )
               else if (SumRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:HasDHWUse ) > 0)
               then       MaxRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:Top_HasDHW ) -
                          MinRevRef( ResOtherZn:ActiveDHWSystem, ResOtherZn:BottomFlrEstimate )
               else if (SumRevRef( Spc:ResDHWSysRef,    Spc:IsHotelMotelGuestRm  ) > 0)
               then       MaxRevRef( Spc:ResDHWSysRef,    Spc:MaxZ ) -
                          MinRevRef( Spc:ResDHWSysRef,    Spc:FlrZ )
               else if (SumRevRef( DwellUnitType:DHWSysRef, DwellUnitType:TopZEstimate,
                                                            DwellUnitType:NumDHWSysTypes ) > 0)
               then       MaxRevRef( DwellUnitType:DHWSysRef, DwellUnitType:TopZEstimate,
                                                              DwellUnitType:NumDHWSysTypes ) -
                          MinRevRef( DwellUnitType:DHWSysRef, DwellUnitType:BottomZEstimate,
                                                              DwellUnitType:NumDHWSysTypes )
               else  ValidOr( Proj:AvgFlrHgt, 9 ) * max( 1, (Bldg:AboveGrdStoryCnt / ComponentCount( ResDHWSys )) )
               endif endif endif endif endif endif endif 
         else  switch (Status)
                  case  1 :   if (MaxRevRef( ResZn:exDHWSys1, ResZn:DHWSys1ExCondFloorArea ) > 0 .AND.
                                  MaxRevRef( ResZn:exDHWSys2, ResZn:DHWSys2ExCondFloorArea ) > 0)
                              then  max( MaxRevRef( ResZn:exDHWSys1, ResZn:Top ), MaxRevRef( ResZn:exDHWSys2, ResZn:Top ) ) -
                                    min( MinRevRef( ResZn:exDHWSys1, ResZn:BottomFlrEstimate ), MinRevRef( ResZn:exDHWSys2, ResZn:BottomFlrEstimate ) )
                              else if (MaxRevRef( ResZn:exDHWSys1, ResZn:DHWSys1ExCondFloorArea ) > 0)
                              then  MaxRevRef( ResZn:exDHWSys1, ResZn:Top ) - MinRevRef( ResZn:exDHWSys1, ResZn:BottomFlrEstimate )
                              else if (MaxRevRef( ResZn:exDHWSys2, ResZn:DHWSys2ExCondFloorArea ) > 0)
                              then  MaxRevRef( ResZn:exDHWSys2, ResZn:Top ) - MinRevRef( ResZn:exDHWSys2, ResZn:BottomFlrEstimate )
                              else  0  endif endif endif
                  case  2 :   if (MaxRevRef( ResZn:AltDHWSys1, ResZn:DHWSys1AltCondFloorArea ) > 0 .AND.
                                  MaxRevRef( ResZn:AltDHWSys2, ResZn:DHWSys2AltCondFloorArea ) > 0)
                              then  max( MaxRevRef( ResZn:AltDHWSys1, ResZn:Top ), MaxRevRef( ResZn:AltDHWSys2, ResZn:Top ) ) -
                                    min( MinRevRef( ResZn:AltDHWSys1, ResZn:BottomFlrEstimate ), MinRevRef( ResZn:AltDHWSys2, ResZn:BottomFlrEstimate ) )
                              else if (MaxRevRef( ResZn:AltDHWSys1, ResZn:DHWSys1AltCondFloorArea ) > 0)
                              then  MaxRevRef( ResZn:AltDHWSys1, ResZn:Top ) - MinRevRef( ResZn:AltDHWSys1, ResZn:BottomFlrEstimate )
                              else if (MaxRevRef( ResZn:AltDHWSys2, ResZn:DHWSys2AltCondFloorArea ) > 0)
                              then  MaxRevRef( ResZn:AltDHWSys2, ResZn:Top ) - MinRevRef( ResZn:AltDHWSys2, ResZn:BottomFlrEstimate )
                              else  0  endif endif endif
                  default :   if (MaxRevRef( ResZn:DHWSys1, ResZn:DHWSys1NewCondFloorArea ) > 0 .AND.
                                  MaxRevRef( ResZn:DHWSys2, ResZn:DHWSys2NewCondFloorArea ) > 0)
                              then  max( MaxRevRef( ResZn:DHWSys1, ResZn:Top ), MaxRevRef( ResZn:DHWSys2, ResZn:Top ) ) -
                                    min( MinRevRef( ResZn:DHWSys1, ResZn:BottomFlrEstimate ), MinRevRef( ResZn:DHWSys2, ResZn:BottomFlrEstimate ) )
                              else if (MaxRevRef( ResZn:DHWSys1, ResZn:DHWSys1NewCondFloorArea ) > 0)
                              then  MaxRevRef( ResZn:DHWSys1, ResZn:Top ) - MinRevRef( ResZn:DHWSys1, ResZn:BottomFlrEstimate )
                              else if (MaxRevRef( ResZn:DHWSys2, ResZn:DHWSys2NewCondFloorArea ) > 0)
                              then  MaxRevRef( ResZn:DHWSys2, ResZn:Top ) - MinRevRef( ResZn:DHWSys2, ResZn:BottomFlrEstimate )
                              else  0  endif endif endif
               endswitch
         endif  }
   ; include reference to new Proj:AvgFlrHgt - SAC 03/01/22
   "Set ResDHWSys:NumFloorsServed - # of floors served by this DHW system"       ; revise to ensure minimum return value of 1 - SAC 09/23/24
      ResDHWSys:NumFloorsServed  = { 
         if (IfValidAnd( FloorZRange > 0 ) .AND. IfValidAnd( Proj:AvgFlrHgt > 0 ))
         then  max( 1, int( (FloorZRange / Proj:AvgFlrHgt) + 0.5 ) )
         else if (IfValidAnd( FloorZRange > 0 ) .AND. IfValidAnd( ResProj:AvgFloorHeight > 0 ))
         then  max( 1, int( (FloorZRange / ResProj:AvgFloorHeight) + 0.5 ) )
         else  1     ; ERROR
         endif endif  }
   ;"Set ResDHWSys:AvgFlrHtServed - Avg height of flrs served by this DHW sys"
   ;   ResDHWSys:AvgFlrHtServed   = {
   ;      if (IfValidAnd( FloorZRange > 0 ) .AND. IfValidAnd( NumFloorsServed > 0 ))
   ;      then  FloorZRange / NumFloorsServed
   ;      else  ResProj:AvgFloorHeight     ; ERROR
   ;      endif  }

   "Setup remaining SFam/MFam Compact Distrib data"   Proj:Action  = {
         if (IsSFamResRuleset)
         then  EvalRulelist( "ProposedInput_DHWCompactDistribution_SFam" )
         else  UNCHANGED  endif  }
END

;*************************************************************************  - SAC 3/26/19
RULELIST "ProposedInput_DHWCompactDistribution_SFam" 0 0 0 0
;*************************************************************************
   "Set ResProj:SFamCmpctDistDescrip"    ResProj:SFamCmpctDistDescrip  = {
         switch (SFamCompactDistrib)
            case  1 :  "RTF\DHW_CD_Basic.rtf"
            case  2 :  "RTF\DHW_CD_Exp.rtf"
            default :  UNDEFINED
         endswitch  }

   "Default ResProj:SFamCDSpecFixDists"   ResProj:SFamCDSpecFixDists  = {  0  }     ; SAC 09/29/21 (tic #1277)

   "Default ResDHWSys:CDServesMBathFix"   ResDHWSys:CDServesMBathFix  = {  1  }
   "Default ResDHWSys:CDServesKitFix"     ResDHWSys:CDServesKitFix    = {  1  }
   "Default ResDHWSys:CDServesThirdFix"   ResDHWSys:CDServesThirdFix  = {  1  }

   "Set ResDHWSys:CDUseMBathFix"   ResDHWSys:CDUseMBathFix  = {
         if (IfValidAnd( CmpctDistAllowed > 0 ) .AND. CDServesMBathFix > 0 .AND. IfValidAnd( CDMBathFixDist > 0 ))
         then  CDMBathFixDist  else  0  endif  }
   "Set ResDHWSys:CDUseKitFix"     ResDHWSys:CDUseKitFix    = {
         if (IfValidAnd( CmpctDistAllowed > 0 ) .AND. CDServesKitFix   > 0 .AND. IfValidAnd( CDKitFixDist   > 0 ))
         then  CDKitFixDist    else  0  endif  }
   "Set ResDHWSys:CDHaveThirdFix"  ResDHWSys:CDHaveThirdFix = {
         if (IfValidAnd( CmpctDistAllowed > 0 ) .AND. CDServesThirdFix > 0 .AND. IfValidAnd( CDThirdFixDist > 0 ))
         then  1  else  0  endif  }
   "Set ResDHWSys:CDUseThirdFix"   ResDHWSys:CDUseThirdFix  = {
         if (CDHaveThirdFix) then  CDThirdFixDist  else  0  endif  }
   "Set ResDHWSys:CDHaveRecircThird"  ResDHWSys:CDHaveRecircThird = {
         if (IsRecircSystem .AND. CDHaveThirdFix)
         then  1  else  0  endif  }
   "Set ResDHWSys:CDRecircThirdFix"    ResDHWSys:CDRecircThirdFix  = {
         if (CDHaveRecircThird) then  CDThirdFixDist
         else  0  endif  }

   "Set ResProj:SFamCDMBathFixDist"    ResProj:SFamCDMBathFixDist  = {  MaxAll( ResDHWSys:CDUseMBathFix )  }
   "Set ResProj:SFamCDKitFixDist"      ResProj:SFamCDKitFixDist    = {  MaxAll( ResDHWSys:CDUseKitFix   )  }
   "Set ResProj:SFamCDThirdFixDist"    ResProj:SFamCDThirdFixDist  = {
         if (SumAll( ResDHWSys:CDHaveThirdFix ) < 1) then  0
         else  SumAll( ResDHWSys:CDUseThirdFix ) / SumAll( ResDHWSys:CDHaveThirdFix )
         endif  }

   "Set ResDHWSys:CDNumFlrsSrvd"    ResDHWSys:CDNumFlrsSrvd  = {
         if (CDUseMBathFix > 0 .OR. CDUseKitFix > 0 .OR. CDHaveThirdFix)
         then  NumFloorsServed
         else  UNDEFINED  endif  }
   "Set ResDHWSys:CDRecircNumFlrsSrvd"    ResDHWSys:CDRecircNumFlrsSrvd  = {
         if (IsRecircSystem .AND. IfValidAnd( CDNumFlrsSrvd > 0 ))
         then  CDNumFlrsSrvd
         else  UNDEFINED  endif  }

   ; added new scenario 10004 for when fixture distances are not entered - SAC 09/29/21
   "Set ResProj:SFamCDWeightedDist"    ResProj:SFamCDWeightedDist  = {
         if (IsMultiFamily > 0.5) then  10003
         else if (SFamCompactDistrib < 1) then  10000
         else if (SFamCDSpecFixDists < 1) then  10004
         else if (SumAll( ResDHWSys:CDHaveRecircThird ) > 0)
         then  if (SumAll( ResDHWSys:CDRecircThirdFix ) == 0)
               then  10001
               else  SumAll( ResDHWSys:CDRecircThirdFix ) / SumAll( ResDHWSys:CDHaveRecircThird )
               endif
         else  if (IfValidAnd( SFamCDMBathFixDist >  0 )==0 .OR. IfValidAnd( SFamCDKitFixDist > 0 )==0 .OR.
                   IfValidAnd( SFamCDThirdFixDist >= 0 )==0)
               then  10002
               else  (SFamCDMBathFixDist * 0.4) +
                     (SFamCDKitFixDist   * 0.4) +
                     (SFamCDThirdFixDist * 0.2)    endif
         endif endif endif endif  }    ; SAC 3/22/19 - updated logic for ResProject-wide calcs

   "Set ResProj:SFamCDNumFloorsServed"    ResProj:SFamCDNumFloorsServed  = {
         if (SumAll( ResDHWSys:CDHaveRecircThird ) > 0)
         then  if (SumAll( ResDHWSys:CDRecircNumFlrsSrvd ) > 0)
               then  MaxAll( ResDHWSys:CDRecircNumFlrsSrvd )
               else  1  ; error?
               endif
         else  ; NON-recirc
               if (SumAll( ResDHWSys:CDNumFlrsSrvd ) > 0)
               then  MaxAll( ResDHWSys:CDNumFlrsSrvd )
               else  1  ; error?
               endif
         endif  }
   "Set ResProj:SFamCDFloorAreaServed"    ResProj:SFamCDFloorAreaServed  = {
         SumAcrossIf( ResDHWSys:FloorAreaServed, ResDHWSys:CDNumFlrsSrvd > 0 )  }
   "Set ResProj:SFamCDTotNumDHWHeaters"   ResProj:SFamCDTotNumDHWHeaters = {
         SumAcrossIf( ResDHWSys:TotNumDHWHeaters, ResDHWSys:CDNumFlrsSrvd > 0 )  }

   ; SAC 12/11/18 - modified following rule to prevent calc of CDQualifyDist for MFam, Non-Central, Recirc systems per request from CEC/DT (tic #975)
   ; SAC 3/28/19 - updated SFam, Non-recirc, 2 story Coef B from 0.0048 to 0.0045 - per e-mail from CEC/TF (inconsistent w/ CASE reoprt)
   "Set ResProj:SFamCDQualifyDist"    ResProj:SFamCDQualifyDist  = {
         if (SFamCompactDistrib < 1 .OR. IsMultiFamily > 0.5 .OR.
             IfValidAnd( SFamCDTotNumDHWHeaters > 0 )==0) then  0
         else if (SumAll( ResDHWSys:CDHaveRecircThird ) > 0)
         then  if (SFamCDNumFloorsServed <= 1)
               then  (22.7 + (0.0099 * SFamCDFloorAreaServed)) / SFamCDTotNumDHWHeaters
               else if (SFamCDNumFloorsServed <= 2)
               then  (11.5 + (0.0095 * SFamCDFloorAreaServed)) / SFamCDTotNumDHWHeaters
               else  ( 0.5 + (0.0014 * SFamCDFloorAreaServed)) / SFamCDTotNumDHWHeaters
               endif endif
         else  ; not recirc
               if (SFamCDNumFloorsServed <= 1)
               then  (10 + (0.0095 * SFamCDFloorAreaServed)) / SFamCDTotNumDHWHeaters
               else if (SFamCDNumFloorsServed <= 2)
               then  (15 + (0.0045 * SFamCDFloorAreaServed)) / SFamCDTotNumDHWHeaters
               else  (10 + (0.0030 * SFamCDFloorAreaServed)) / SFamCDTotNumDHWHeaters
               endif endif
         endif endif  }

; ignore - SAC 09/29/21 (tic #1277)
;   "Default ResProj:SFamUserSpecCmpctDist - whether or not user is specifying a custom Compactness Factor"  ; SAC 1/11/19
;      ResProj:SFamUserSpecCmpctDist  = {  if (LocalStatus( SFamUserSpecCmpctDist ) < 1) then  0  else  UNCHANGED  endif  }
   "Default ResProj:SFamUserCompactFactor"  ; SAC 1/12/19
      ResProj:SFamUserCompactFactor  = {
         switch (SFamCompactDistrib)
            case  1 :  0.7
            case  2 :  0.6
            default :  UNDEFINED
         endswitch  }
      ; replaced old rule (below) w/ above - SAC 09/29/21 (tic #1277)
      ;   if (IfValidAnd( SFamUserSpecCmpctDist > 0 ) .AND. SFamCompactDistrib == 1) then  0.7
      ;   else  UNCHANGED  endif  }

   "Set ResProj:SFamCompactFactor"    ResProj:SFamCompactFactor  =      ; removed reference to SFamUserSpecCmpctDist and added SFamCDSpecFixDists - SAC 09/29/21 (tic #1277)
      {  if (SFamCompactDistrib > 0 .AND.
             IfValidAnd( SFamCDSpecFixDists < 1 ))
         then  if (SFamCompactDistrib == 1) then  0.7
               else if (IfValidAnd( SFamUserCompactFactor > 0 ))
               then  SFamUserCompactFactor
               else  1  endif endif
         else if (SFamCDWeightedDist >= 10000) then  1
         else if (IfValidAnd( SFamCDWeightedDist <= SFamCDQualifyDist )==0) then  10
         else if (SFamCompactDistrib == 1) then  0.7
         else  0.3 + (0.4 * SFamCDWeightedDist / SFamCDQualifyDist)
         endif endif endif endif  }

   ; added logic to keep CDModelCredit unchanged for Altered and Existing DHW systems - SAC 09/02/20 (tic #1187)
   ; removed reference to SFamUserSpecCmpctDist and added SFamCDSpecFixDists - SAC 09/29/21 (tic #1277)
   "Set ResDHWSys:CDModelCredit"    ResDHWSys:CDModelCredit  = {
         if (IfValidAnd( ResProj:SFamCompactDistrib < 1 ) .OR. IfValidAnd( CmpctDistAllowed > 0 )==0) then  0
         else if ((IfValidAnd( ResProj:RunAbbrev == "s" ) .OR. IfValidAnd( ResProj:RunAbbrev == "zb" ) .OR. IfValidAnd( ResProj:RunAbbrev == "smf" ) .OR. IfValidAnd( ResProj:RunAbbrev == "dr" )) .AND.
                  IfValidAnd( Status = 3 )==0) then  UNCHANGED
         else if (IfValidAnd( ResProj:RunAbbrev == "s" )==0 .AND. IfValidAnd( ResProj:RunAbbrev == "zb" )==0 .AND. IfValidAnd( ResProj:RunAbbrev == "smf" )==0 .AND. IfValidAnd( ResProj:RunAbbrev == "dr" )==0 .AND.
                  IfValidAnd( ResProj:SFamCDSpecFixDists < 1 ) .AND. IfValidAnd( ResProj:SFamUserCompactFactor > 0 )) then  1
         else if (IsRecircSystem .AND. CDHaveThirdFix) then  1
         else if (IsRecircSystem < 1 .AND. (CDUseMBathFix > 0 .OR. CDUseKitFix > 0 .OR. CDHaveThirdFix)) then  1
         else  0  endif endif endif endif endif  }

   ; removed reference to SFamUserSpecCmpctDist and added SFamCDSpecFixDists - SAC 09/29/21 (tic #1277)
   "Set ResDHWSys:CDDistMessage"       ResDHWSys:CDDistMessage  = {
         if (Proj:IsComRuleset .AND. CentralDHW)
         then  "Compact Distribution Credit not available for central DHW systems"
         else if (Proj:IsComRuleset .AND. IsRecircSystem)
         then  "Compact Distribution Credit not available for DHW systems with recirculation in multifamily models"
         else if (Proj:IsComRuleset)
         then  "Compact Distribution Credit fixture distances entered by DwellingUnitType"
         else if (CentralDHW = 0 .AND.
                  (SystemType ==    4608 .OR.  ; "Central Parallel Piping"                
                   SystemType ==    4609 .OR.  ; "Point of use"                           
                   SystemType == 8392704 .OR.  ; "(HERS req'd) Pipe Insulation, All Lines"
                   SystemType == 8393216))     ; "(HERS req'd) Central Parallel Piping"
         then  "Compact Distribution Credit not available for the selected Dwelling Unit Distribution"
         else if (ResProj:SFamCompactDistrib < 1)
         then  "Compact Distribution is selectable on Appliances/DHW tab of the ResProject dialog"
         else if (IfValidAnd( ResProj:SFamCDSpecFixDists < 1 ) .AND.
                  IfValidAnd( ResProj:SFamCompactFactor < 1 ))
         then  Format( "Compact Distribution:  Compactness factor %g (from Appliances/DHW tab of ResProject dialog)", ResProj:SFamCompactFactor )
         else if (IfValidAnd( ResProj:SFamCDWeightedDist > 10000 ))
         then  "No Compact Distribution Credit:  All fixture distances must be specified"
         else if (ResProj:SFamCompactFactor == 10)
         then  Format( "Doesn't Qualify for Compact Distribution:  weighted dist. %.1f must be <= qual. dist. %.1f", ResProj:SFamCDWeightedDist, ResProj:SFamCDQualifyDist )
         else if (ResProj:SFamCompactDistrib == 1)
         then  Format( "Basic Compact Distribution credit:  Qualifies with compactness factor of %.2f", ResProj:SFamCompactFactor )
         else  Format( "Expanded Compact Distribution credit:  Qualifies with compactness factor of %.2f", ResProj:SFamCompactFactor )
         endif endif endif endif endif endif endif endif endif  }

   ; removed reference to SFamUserSpecCmpctDist and added SFamCDSpecFixDists - SAC 09/29/21 (tic #1277)
   "Set ResProj:SFamCDDistMessage"       ResProj:SFamCDDistMessage  = {
         if (IsMultiFamily > 0.5 .OR. SFamCompactDistrib < 1)
         then  UNDEFINED
         else if (IfValidAnd( ResProj:SFamCDSpecFixDists < 1 ))
         then  UNDEFINED
         else if (IfValidAnd( SFamCDWeightedDist = 10001 ) .OR. IfValidAnd( SFamCDWeightedDist = 10002 ))
         then  "Distances from water heater(s) to served fixtures must be specified for each DHW system"
         else if (IfValidAnd( SFamCompactFactor = 10 ))
         then  Format( "Doesn't Qualify for Compact Distribution:  weighted dist. %.1f must be <= qual. dist. %.1f", SFamCDWeightedDist, SFamCDQualifyDist )
         else if (SFamCompactDistrib == 1)
         then  Format( "Basic Compact Distribution credit:  Qualifies with compactness factor of %.2f", SFamCompactFactor )
         else  Format( "Expanded Compact Distribution credit:  Qualifies with compactness factor of %.2f", SFamCompactFactor )
         endif endif endif endif endif  }
END
;*************************************************************************
; SAC 12/4/18 - rules to switch from prior to new 2019 Compact Distribution option - flags to always evaluate, flag data as user-defined & bypass resets
RULELIST "DHWSysCompactDistrib_ConvertTo2019" 1 0 1 1
   "Switch from prior Compact Distrib to Std"   ResDHWSys:SystemType      = {  3840  }  ; "Standard"
;   "Flag system as Basic Compact"               ResDHWSys:CompactDistrib  = {    1   }  ; "Basic Credit"
END
;*************************************************************************
; SAC 12/11/18 - added for consistency w/ rulelist that blasts CompactDistrib for MFam, Non-Central, Recirc systems (tic #975)
RULELIST "DHWSysCompactDistrib_BlastForMFamCentral" 1 0 1 1
;   "Log reason for blasting Compact Distrib selection"  ResDHWSys:Action = {
;         PostMessageToLog( "Removing DHWSys '%s' Compact Distribution selection - incompatible with Multifamily, Central systems", Name )  }
;   "Blast Compact Distrib selection"      ResDHWSys:CompactDistrib  = {  0  }
;   "Blast ResDHWSys:CompactFactor"           ResDHWSys:CompactFactor   = {  UNDEFINED  }
END
; SAC 12/11/18 - per request from CEC/DT - blast CompactDistrib for MFam, Non-Central, Recirc systems (tic #975)
RULELIST "DHWSysCompactDistrib_BlastForMFamNonCentralRecirc" 1 0 1 1
;   "Log reason for blasting Compact Distrib selection"  ResDHWSys:Action = {
;         PostMessageToLog( "Removing DHWSys '%s' Compact Distribution selection - incompatible with Multifamily, Non-Central systems with Recirculation", Name )  }
;   "Blast Compact Distrib selection"      ResDHWSys:CompactDistrib  = {  0  }
;   "Blast ResDHWSys:CompactFactor"           ResDHWSys:CompactFactor   = {  UNDEFINED  }
END
;*************************************************************************

; SAC 10/24/16 - new rulelist to default project-wide DHWSys assignments and areas by category
;*************************************************************************
RULELIST  "ProposedInput_DHW_ResProject" 0 0 0 0
;*************************************************************************
   "Refresh DHWSolarSys FloorArea/DUs/BRs served properties"      DHWSolSys:Action  =      ; SAC 1/27/20 (StdSolarSys)
      {  EvalRulelist( "Refresh_DHWSolarSys_ServedAreaDUsBRs", 1 )  }

; old demand response implementaiton replaced w/ new - SAC 12/11/20
;   ; SAC 4/17/17 - determine status of demand response across all assigned DHW heaters
;   "Set ResDHWSys:DemandResponseFlag - 1"    ResDHWSys:DemandResponseFlag  = {
;         if (FloorAreaServed > 0.5 .AND. LocalCompAssigned( DHWHeater[1] ) .AND. IfValidAnd( HeaterMultFlt[1] > 0.001 ))
;         then  if (LocalCompAssigned( DHWHeater[1] ) != ComponentType( "ResWtrHtr" )) then  0
;               else if (DHWHeater[1]:IsDemandResponse = 0) then  0
;               else  2  endif endif
;         else  -1  endif  }
; etc.
;   "Set ResDHWSys:DemandResponseMsg"      ResDHWSys:DemandResponseMsg  = {
;         switch (DemandResponseFlag)
;            case  1 :  "Error: Mixture of demand-response and non-DR HPWHs assigned to system"
;            case  2 :  "Demand Response setpoint schedule activated"
;            default :  UNDEFINED
;         endswitch  }
;   ; SAC 4/17/17 - added default demand response HPWH setpoint schedule from BAW 4/14/17
;   "Set ResDHWSys:TSetpoint_x - Expression used to simulate HPWH temperature setpoint in CSE"
;      ResDHWSys:TSetpoint_x  = {
;         if (DemandResponseFlag != 2) then  UNDEFINED
;         else  "select( $dsDay==1, 125, $dsDay==2, 125, @Weather.tdvElecAvg<10, 125, @Weather.tdvElec>10, 100,default hourval(125,125,125,125,125,125,125,125,140,140,140,140,140,140,140,140,125,125,125,125,125,125,125,125))"
;         endif  }

	; SAC 10/12/15 - added to ensure only one New DHWSys in standard design model
	; SAC 10/24/15 - split into central and non-central DHWSys assignments
	"Set ResProj:MaxNewCntrlDHWSys"		ResProj:MaxNewCntrlDHWSys	= {
		if (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "S" .OR. ResProj:RunAbbrev == "smf" .OR. RunAbbrev == "dr" .OR. RunScope != 1) then  UNCHANGED
		else	MaxAllComp( ResDHWSys:NewCntrlAreaServed )  endif  }
	"Set ResProj:MaxNewNCntrlDHWSys"		ResProj:MaxNewNCntrlDHWSys	= {
		if (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "S" .OR. ResProj:RunAbbrev == "smf" .OR. ResProj:RunAbbrev == "dr" .OR. RunScope != 1) then  UNCHANGED
		else	MaxAllComp( ResDHWSys:AreaServedDetails[1] )  endif  }		; SAC 2/25/16 - previously summed ResDHWSys:NewNCntrlAreaServed[1]
	; SAC 2/24/16 - additions to address ticket #607 - EAA DHW assignments
	"Set ResProj:SFamAreaByDHWCateg[1] - New"			ResProj:SFamAreaByDHWCateg[1]	= {
		if (ResProj:IsMultiFamily > 0.5)	then  0
		else	SumAll( ResZn:DHWSys1NewCondFloorArea ) + SumAll( ResZn:DHWSys2NewCondFloorArea )  endif  }
	"Set ResProj:SFamAreaByDHWCateg[2] - Altered"	ResProj:SFamAreaByDHWCateg[2]	= {
		if (ResProj:IsMultiFamily > 0.5)	then  0
		else	SumAll( ResZn:DHWSys1AltCondFloorArea ) + SumAll( ResZn:DHWSys2AltCondFloorArea )  endif  }
	"Set ResProj:SFamAreaByDHWCateg[3] - Existing"	ResProj:SFamAreaByDHWCateg[3]	= {
		if (ResProj:IsMultiFamily > 0.5)	then  0
		else	SumAll( ResZn:DHWSys1ExCondFloorArea  ) + SumAll( ResZn:DHWSys2ExCondFloorArea  )  endif  }
	"Set ResProj:MaxDHWSysByCateg[1] - New, Non-central"			ResProj:MaxDHWSysByCateg[1]	= {
		if (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "S" .OR. ResProj:RunAbbrev == "smf" .OR. RunAbbrev == "dr") then  UNCHANGED
		else if (MaxAll( ResDHWSys:AreaServedDetails[1] ) > 0.5)
		then  MaxAllComp( ResDHWSys:AreaServedDetails[1] )  else  UNDEFINED  endif endif  }
	"Set ResProj:MaxDHWSysByCateg[2] - Altered, Non-central"		ResProj:MaxDHWSysByCateg[2]	= {
		if (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "S" .OR. ResProj:RunAbbrev == "smf" .OR. RunAbbrev == "dr") then  UNCHANGED
		else if (MaxAll( ResDHWSys:AreaServedDetails[2] ) > 0.5)
		then  MaxAllComp( ResDHWSys:AreaServedDetails[2] )  else  UNDEFINED  endif endif  }
	"Set ResProj:MaxDHWSysByCateg[3] - Existing, Non-central"	ResProj:MaxDHWSysByCateg[3]	= {
		if (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "S" .OR. ResProj:RunAbbrev == "smf" .OR. RunAbbrev == "dr") then  UNCHANGED
		else if (MaxAll( ResDHWSys:AreaServedDetails[3] ) > 0.5)
		then  MaxAllComp( ResDHWSys:AreaServedDetails[3] )  else  UNDEFINED  endif endif  }
	"Set ResProj:MaxDHWSysByCateg[4] - New, Central"				ResProj:MaxDHWSysByCateg[4]	= {
		if (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "S" .OR. ResProj:RunAbbrev == "smf" .OR. RunAbbrev == "dr") then  UNCHANGED
		else if (MaxAll( ResDHWSys:AreaServedDetails[4] ) > 0.5)
		then  MaxAllComp( ResDHWSys:AreaServedDetails[4] )  else  UNDEFINED  endif endif  }
	"Set ResProj:MaxDHWSysByCateg[5] - Altered, Central"			ResProj:MaxDHWSysByCateg[5]	= {
		if (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "S" .OR. ResProj:RunAbbrev == "smf" .OR. RunAbbrev == "dr") then  UNCHANGED
		else if (MaxAll( ResDHWSys:AreaServedDetails[5] ) > 0.5)
		then  MaxAllComp( ResDHWSys:AreaServedDetails[5] )  else  UNDEFINED  endif endif  }
	"Set ResProj:MaxDHWSysByCateg[6] - Existing, Central"			ResProj:MaxDHWSysByCateg[6]	= {
		if (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. ResProj:RunAbbrev == "S" .OR. ResProj:RunAbbrev == "smf" .OR. RunAbbrev == "dr") then  UNCHANGED
		else if (MaxAll( ResDHWSys:AreaServedDetails[6] ) > 0.5)
		then  MaxAllComp( ResDHWSys:AreaServedDetails[6] )  else  UNDEFINED  endif endif  }

; SAC 12/12/13 - new flag indicating whether or not to SIMULATE Standard design DHW systems/heaters (expected only for E+A+A scenarios)
; SAC 7/1/14 - revised logic to prevent resetting SimulateStdDHW to zero after having set it to '1' for E+A+A standard design run
	"Set Proj:SimulateStdDHW - (0/1) indicating whether or not to simulate DHW systems in the Standard design model (to support E+A+A - 0 for New, 1 for EAA)"
		Proj:SimulateStdDHW	= {
		   if ((IfValidAnd( ResProj:RunAbbrev == "s" ) .OR. Proj:RunAbbrev == "zb" .OR. IfValidAnd( ResProj:RunAbbrev == "S" ) .OR.
              IfValidAnd( ResProj:RunAbbrev == "smf" ) .OR. IfValidAnd( ResProj:RunAbbrev == "dr" )) .AND. LocalStatus( SimulateStdDHW ) > 5)
			then	UNCHANGED  else  0  endif  }
END
;*************************************************************************


;*************************************************************************  SAC 1/27/20 (StdSolarSys)
RULELIST  "Refresh_DHWSolarSys_ServedAreaDUsBRs" 1 0 0 0
   "Set DHWSolSys:FloorAreaServed"   DHWSolSys:FloorAreaServed  =      ; SAC 1/7/20 - DHWSolarSys (tic #1013)
      {  SumRevRef( ResDHWSys:DHWSolarSysRef, ResDHWSys:FloorAreaServed[1] )  }
   "Set DHWSolSys:NResFloorAreaServed"  DHWSolSys:NResFloorAreaServed  =   ; SAC 11/02/23
      {  SumRevRef( ResDHWSys:DHWSolarSysRef, ResDHWSys:NResFloorAreaServed )  }
   "Set DHWSolSys:DwellUnitsServed"  DHWSolSys:DwellUnitsServed  =     ; SAC 1/27/20 (StdSolarSys)
      {  SumRevRef( ResDHWSys:DHWSolarSysRef, ResDHWSys:NumAssignedDUFracs )  }
   "Set DHWSolSys:BedroomsServed"    DHWSolSys:BedroomsServed  =  
      {  SumRevRef( ResDHWSys:DHWSolarSysRef, ResDHWSys:NumAssignedBRFracs )  }
   "Set DHWSolSys:DHWSysAssigned flag"     DHWSolSys:DHWSysAssigned  =    ; SAC 2/3/20
      {  if (FloorAreaServed > 1 .OR. BedroomsServed > 0) then  1  else  0  endif  }
   "Set DHWSolarSys:GuestRoomsServed"  DHWSolarSys:GuestRoomsServed  =     ; SAC 05/04/21  ; SAC 03/07/22 (MFam)
      {  SumRevRef( ResDHWSys:DHWSolarSysRef, ResDHWSys:NumHtlMtlUnitsServed )  }     
END
;*************************************************************************


;*************************************************************************  - SAC 5/18/16
RULELIST  "ForceDefault_DHWHeater_ASHPType"  1 0 1 1
	"Force ResWtrHtr:HeaterElementType to 'Heat Pump'"					ResWtrHtr:HeaterElementType	= {	5  }
	"Force ResWtrHtr:HPWH_NEEARated to 0 w/out resetting HP perf"	ResWtrHtr:HPWH_NEEARated		= {	0  }
   "Blast ResWtrHtr:CentralHPWHCprsrType"     ResWtrHtr:CentralHPWHCprsrType  = {  UNDEFINED  }
   "Blast ResWtrHtr:HPWHBrand"     ResWtrHtr:HPWHBrand  = {  UNDEFINED  }
   "Blast ResWtrHtr:HPWHModel"     ResWtrHtr:HPWHModel  = {  UNDEFINED  }
	"Blast ResWtrHtr:ASHPType (w/out resetting dependencies)"		ResWtrHtr:ASHPType  = {  UNDEFINED  }
END
;*************************************************************************  - SAC 5/18/16
RULELIST  "BackwardCompat_DHWHeater_ASHPType"  1 0 1 1
	"Force ResWtrHtr:HPWH_NEEARated to 1 w/out resetting HP perf"	ResWtrHtr:HPWH_NEEARated	= {	1  }
END
;*************************************************************************
RULELIST  "BackwardCompat_ASHPType_to_HPWHModel"  1 0 1 1
;   "Set ResWtrHtr:HPWHBrand"     ResWtrHtr:HPWHBrand  = {  2  }  ; "- simulation type -"
;   "Set ResWtrHtr:HPWHModel"     ResWtrHtr:HPWHModel  = {  ASHPType  }
;   "Blast ResWtrHtr:ASHPType"    ResWtrHtr:ASHPType   = {  UNDEFINED  }
   "Set ResWtrHtr:HPWHBrand"     ResWtrHtr:HPWHBrand  = {
      switch (ASHPType)
         case  11 :  11  ; "AO Smith PHPT 60" -> "A. O. Smith"    
         case  12 :  11  ; "AO Smith PHPT 80" -> "A. O. Smith"    
         case  13 :  11  ; "AO Smith HPTU 50" -> "A. O. Smith"    
         case  14 :  11  ; "AO Smith HPTU 66" -> "A. O. Smith"    
         case  15 :  11  ; "AO Smith HPTU 80" -> "A. O. Smith"    
         case  32 :  26  ; "AO Smith SHPT 50"  -> "Whirlpool"    
         case  33 :  11  ; "AO Smith SHPT 66"  -> "A. O. Smith"    
         case  34 :  26  ; "AO Smith SHPT 80"  -> "Whirlpool"    
         case  19 :  15  ; "GE2014 50" -> "GE"
         case  23 :  15  ; "GE2014 80" -> "GE"
         case  21 :  19  ; "Rheem HB 50" -> "Rheem"          
         case  16 :  22  ; "Sanden 40" -> "Sanden"
         case  17 :  22  ; "Sanden 80" -> "Sanden"
         case  22 :  24  ; "Stiebel 220E" -> "Stiebel Eltron" 
         default  :   1  ; -> "- select Brand -"
      endswitch  }
   "Set ResWtrHtr:HPWHModel"     ResWtrHtr:HPWHModel  = {
      switch (ASHPType)
         case  11 :  111311  ; "AO Smith PHPT 60" -> "PHPT 60  (60 gal)"                 
         case  12 :  111412  ; "AO Smith PHPT 80" -> "PHPT 80  (80 gal)"                 
         case  13 :  110713  ; "AO Smith HPTU 50" -> "HPTU 50 120  (50 gal)"             
         case  14 :  110914  ; "AO Smith HPTU 66" -> "HPTU 66 120  (66 gal)"             
         case  15 :  111115  ; "AO Smith HPTU 80" -> "HPTU 80 120  (80 gal)"             
         case  32 :  261032  ; "AO Smith SHPT 50" -> "HPSE2K50HD045V 100 (WP)  (50 gal)" 
         case  33 :  110914  ; "AO Smith SHPT 66" -> "HPTU 66 120  (66 gal)"             
         case  34 :  261212  ; "AO Smith SHPT 80" -> "HPSE2K80HD045V  (80 gal)"          
         case  19 :  150319  ; "GE2014 50"        -> "GEH50DEEJSC  (50 gal)"             
         case  23 :  150723  ; "GE2014 80"        -> "GEH80DEEJSC  (80 gal)"             
         case  21 :  190121  ; "Rheem HB 50"      -> "HB50RH  (50 gal)"                  
         case  16 :  220116  ; "Sanden 40"        -> "GUS-A45HPA & GAUS-160QTA  (43 gal)"
         case  17 :  220217  ; "Sanden 80"        -> "GUS-A45HPA & GAUS-315QTD  (83 gal)"
         case  22 :  240122  ; "Stiebel 220E"     -> "Accelera 220 E  (58 gal)"          
         default  :     1    ; -> "- select Brand -"
      endswitch  }
   "Blast ResWtrHtr:ASHPType"    ResWtrHtr:ASHPType   = {  UNDEFINED  }
END
;*************************************************************************
RULELIST  "BackwardCompat_SimTypeHPWHModel_to_BrandHPWHModel"  1 0 1 1
   "Set ResWtrHtr:HPWHBrand"     ResWtrHtr:HPWHBrand  = {
      switch (HPWHModel)
         case  11 :  11  ; "AO Smith PHPT 60" -> "A. O. Smith"    
         case  12 :  11  ; "AO Smith PHPT 80" -> "A. O. Smith"    
         case  13 :  11  ; "AO Smith HPTU 50" -> "A. O. Smith"    
         case  14 :  11  ; "AO Smith HPTU 66" -> "A. O. Smith"    
         case  15 :  11  ; "AO Smith HPTU 80" -> "A. O. Smith"    
         case  32 :  26  ; "AO Smith SHPT 50"  -> "Whirlpool"    
         case  33 :  11  ; "AO Smith SHPT 66"  -> "A. O. Smith"    
         case  34 :  26  ; "AO Smith SHPT 80"  -> "Whirlpool"    
         case  19 :  15  ; "GE2014 50" -> "GE"
         case  23 :  15  ; "GE2014 80" -> "GE"
         case  21 :  19  ; "Rheem HB 50" -> "Rheem"          
         case  16 :  22  ; "Sanden 40" -> "Sanden"
         case  17 :  22  ; "Sanden 80" -> "Sanden"
         case  22 :  24  ; "Stiebel 220E" -> "Stiebel Eltron" 
         default  :   1  ; -> "- select Brand -"
      endswitch  }
   "Set ResWtrHtr:HPWHModel"     ResWtrHtr:HPWHModel  = {
      switch (HPWHModel)
         case  11 :  111311  ; "AO Smith PHPT 60" -> "PHPT 60  (60 gal)"                 
         case  12 :  111412  ; "AO Smith PHPT 80" -> "PHPT 80  (80 gal)"                 
         case  13 :  110713  ; "AO Smith HPTU 50" -> "HPTU 50 120  (50 gal)"             
         case  14 :  110914  ; "AO Smith HPTU 66" -> "HPTU 66 120  (66 gal)"             
         case  15 :  111115  ; "AO Smith HPTU 80" -> "HPTU 80 120  (80 gal)"             
         case  32 :  261032  ; "AO Smith SHPT 50" -> "HPSE2K50HD045V 100 (WP)  (50 gal)" 
         case  33 :  110914  ; "AO Smith SHPT 66" -> "HPTU 66 120  (66 gal)"             
         case  34 :  261212  ; "AO Smith SHPT 80" -> "HPSE2K80HD045V  (80 gal)"          
         case  19 :  150319  ; "GE2014 50"        -> "GEH50DEEJSC  (50 gal)"             
         case  23 :  150723  ; "GE2014 80"        -> "GEH80DEEJSC  (80 gal)"             
         case  21 :  190121  ; "Rheem HB 50"      -> "HB50RH  (50 gal)"                  
         case  16 :  220116  ; "Sanden 40"        -> "GUS-A45HPA & GAUS-160QTA  (43 gal)"
         case  17 :  220217  ; "Sanden 80"        -> "GUS-A45HPA & GAUS-315QTD  (83 gal)"
         case  22 :  240122  ; "Stiebel 220E"     -> "Accelera 220 E  (58 gal)"          
         default  :     1    ; -> "- select Brand -"
      endswitch  }
END
;*************************************************************************


;************************************************************************* SAC 4/14/16
RULELIST  "Force_ASHPTankOutside_to_TankOutside" 1 0 1 1
;*************************************************************************
	"Set ResWtrHtr:TankOutside"			ResWtrHtr:TankOutside		= {	ASHPTankOutside  }
	"Set ResWtrHtr:ASHPTankOutside"		ResWtrHtr:ASHPTankOutside	= {	UNDEFINED  }
END
;************************************************************************* SAC 4/14/16
RULELIST  "Force_ASHPTankZone_to_TankZone" 1 0 1 1
;*************************************************************************
	"Set ResWtrHtr:TankZone"			ResWtrHtr:TankZone		= {	ASHPTankZone  }
	"Set ResWtrHtr:ASHPTankZone"		ResWtrHtr:ASHPTankZone	= {	UNDEFINED  }
END
;*************************************************************************


; SAC 6/28/16 - rulelist to blast inputs to various recirculation loop inputs that are inconsistent w/ ResProj:DHWCalcMethod of "CSE*"
;*************************************************************************
RULELIST  "BlastInputs_CSEDHW_RecircLoops" 1 0 0 0
	"Blast ResDHWSys:UseDefaultLoops"	ResDHWSys:UseDefaultLoops  = { UNDEFINED }
	"Blast ResDHWSys:RecircXtraIns"		ResDHWSys:RecircXtraIns    = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeLen[1]"	ResDHWSys:RecircPipeLen[1] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeDia[1]"	ResDHWSys:RecircPipeDia[1] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeLen[2]"	ResDHWSys:RecircPipeLen[2] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeDia[2]"	ResDHWSys:RecircPipeDia[2] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeLoc[2]"	ResDHWSys:RecircPipeLoc[2] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeLen[3]"	ResDHWSys:RecircPipeLen[3] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeDia[3]"	ResDHWSys:RecircPipeDia[3] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeLoc[3]"	ResDHWSys:RecircPipeLoc[3] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeLen[4]"	ResDHWSys:RecircPipeLen[4] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeDia[4]"	ResDHWSys:RecircPipeDia[4] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeLoc[4]"	ResDHWSys:RecircPipeLoc[4] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeLen[5]"	ResDHWSys:RecircPipeLen[5] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeDia[5]"	ResDHWSys:RecircPipeDia[5] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeLoc[5]"	ResDHWSys:RecircPipeLoc[5] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeLen[6]"	ResDHWSys:RecircPipeLen[6] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeDia[6]"	ResDHWSys:RecircPipeDia[6] = { UNDEFINED }
	"Blast ResDHWSys:RecircPipeLoc[6]"	ResDHWSys:RecircPipeLoc[6] = { UNDEFINED }
END
;*************************************************************************

;************************************************************************* - SAC 1/12/19
RULELIST  "BlastInputs_OldShwrDrnHtRecov" 1 0 0 0
	"Blast Proj:HaveShwrDrnHtRecov"	Proj:HaveShwrDrnHtRecov = { UNDEFINED }
	"Blast Proj:ShwrDRAINHREFF"	   Proj:ShwrDRAINHREFF     = { UNDEFINED }
END
;*************************************************************************

;************************************************************************* - SAC 10/30/19
RULELIST  "Blast_DHWSys_CSEWaterUseWasteFactor"  1 0 0 1
   "Blast ResDHWSys:CSEWaterUseWasteFactor"  ResDHWSys:CSEWaterUseWasteFactor  = {  UNDEFINED  }
   "Blast ResDHWSys:CSEFaucetDrawWaste"      ResDHWSys:CSEFaucetDrawWaste      = {  UNDEFINED  }
   "Blast ResDHWSys:CSEShowerDrawWaste"      ResDHWSys:CSEShowerDrawWaste      = {  UNDEFINED  }
   "Blast ResDHWSys:CSEBathDrawWaste"        ResDHWSys:CSEBathDrawWaste        = {  UNDEFINED  }
   "Blast ResDHWSys:CSECWashrDrawWaste"      ResDHWSys:CSECWashrDrawWaste      = {  UNDEFINED  }
   "Blast ResDHWSys:CSEDWashrDrawWaste"      ResDHWSys:CSEDWashrDrawWaste      = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************   - SAC 10/18/17
RULELIST  "ForceDefault_DHWSys_DistribSysMult" 1 0 0 1
	; SAC 9/1/15 - updated DSMs for single family recirculation systems per Marc Hoeschle 22 October 2013     ;
	; Recirculation non-demand control                      9.00   was 7.0                              ;
	; Recirculation demand control, push button             1.60   was 1.15                             ;
	; Recirculation demand control, occupancy/motion        2.40   was 1.3                              ;
	; Recirculation demand control, push button HERS        1.45   was 1.05                             ;
	; Recirculation demand control, occupancy/motion HERS   2.20   was 1.2                              ;
	; SAC 2/15/18 - added 0.7 setting for new '2019 Basic Compact Distribution System' system (tic #983)
	"Set ResDHWSys:DistribSysMult - Distribution system multiplier (ACM App R, Table B-2)"
						ResDHWSys:DistribSysMult	= {	switch (SystemType)
																	case     3840 :	1.0	; "Standard"                                                    ; %WHDIST2013_STD =       
														;			case     4096 :	0.9	; "Pipe Insulation, All Lines"                                  ; %WHDIST2013_PIA =      - mods made to wsSDLM sim input to address benefit of pipe insul for what we now refer to as 'Standard' distr type 
														;			case     4352 :	1.4	; "Insulated and Protected Pipe Below Grade"                    ; %WHDIST2013_IPBG =      
																	case     4608 :	1.10	; "Parallel Piping"                                             ; %WHDIST2013_PP =        
														   		case     4609 :	0.3	; "Point of use"                                                ; SAC 8/27/16 - (tic #736)
																	case     4992 :	9.8	; "Recirculation, Non-Demand Control"                           ; %WHDIST2013_RND =       
																	case     5248 :	1.75	; "Recirculation, Demand Control Push Button"                   ; %WHDIST2013_RDMan =     
																	case     5504 :	2.6	; "Recirculation, Demand Control Occupancy/Motion"              ; %WHDIST2013_RDAuto =    
                                          ;         case      100 :   0.7   ; "2019 Basic Compact Distribution System"    ; new option for 2019 std design HPWH systems   - SAC 12/5/18 - removed as part of 2019 Compact Distrib (tic #975)
														;			case  8388608 :	0.0	; ""                                                            ; %HERS_REQUIRED =        
																	case  8392704 :	0.85	; "(HERS req'd) Pipe Insulation, All Lines"                     ; %WHDIST2013_HERSPIA =   
														;			case  8392960 :	0.0	; "(HERS req'd) Insulated and Protected Pipe Below Grade"       ; %WHDIST2013_HERSIPBG =  
																	case  8393216 :	1.0	; "(HERS req'd) Parallel Piping"                                ; %WHDIST2013_HERSPP =    
														;			case  8393600 :	0.0	; "(HERS req'd) Recirculation, Non-Demand Control"              ; %WHDIST2013_HERSRND =   
																	case  8393856 :	1.6	; "(HERS req'd) Recirculation, Demand Control Push Button"      ; %WHDIST2013_HERSRDMan = 
																	case  8394112 :	2.4	; "(HERS req'd) Recirculation, Demand Control Occupancy/Motion" ; %WHDIST2013_HERSRDAuto =
																	case  8394240 :	0.3	; "(HERS req'd) Point of Use"                                   ; %WHDIST2013_HERSPOU =   
																	case  8394496 :	0.7	; "(HERS req'd) Compact Distribution System"                    ; %WHDIST2013_HERSCDS =   
														;			case     5056 :	0.0	; "Multi-Family Central Recirc Non-Demand Control"              ; %WHDIST2013_CRND =      
														;			case     6336 :	0.0	; "Multi-Family Central Recirc Monitoring"                      ; %WHDIST2013_CRM =       
														;			case     6592 :	0.0	; "Multi-Family Central Demand Recirc (new cons std design)"    ; %WHDIST2013_CRD =       
																	default       :	1.0
																endswitch  }
                           ; SAC 6/29/17 - replaced following w/ above to implement proposed 2017 DSM (tic #737)
									;								case     3840 :	1.0	; "Standard"                                                    ; %WHDIST2013_STD =       
									;								case     4096 :	0.9	; "Pipe Insulation, All Lines"                                  ; %WHDIST2013_PIA =       
									;					;			case     4352 :	1.4	; "Insulated and Protected Pipe Below Grade"                    ; %WHDIST2013_IPBG =      
									;								case     4608 :	1.05	; "Parallel Piping"                                             ; %WHDIST2013_PP =        
									;					   		case     4609 :	0.3	; "Point of use"                                                ; SAC 8/27/16 - (tic #736)
									;								case     4992 :	9.0	; "Recirculation, Non-Demand Control"                           ; %WHDIST2013_RND =       
									;								case     5248 :	1.6	; "Recirculation, Demand Control Push Button"                   ; %WHDIST2013_RDMan =     
									;								case     5504 :	2.4	; "Recirculation, Demand Control Occupancy/Motion"              ; %WHDIST2013_RDAuto =    
									;					;			case  8388608 :	0.0	; ""                                                            ; %HERS_REQUIRED =        
									;								case  8392704 :	0.8	; "(HERS req'd) Pipe Insulation, All Lines"                     ; %WHDIST2013_HERSPIA =   
									;					;			case  8392960 :	0.0	; "(HERS req'd) Insulated and Protected Pipe Below Grade"       ; %WHDIST2013_HERSIPBG =  
									;								case  8393216 :	0.95	; "(HERS req'd) Parallel Piping"                                ; %WHDIST2013_HERSPP =    
									;					;			case  8393600 :	0.0	; "(HERS req'd) Recirculation, Non-Demand Control"              ; %WHDIST2013_HERSRND =   
									;								case  8393856 :	1.45	; "(HERS req'd) Recirculation, Demand Control Push Button"      ; %WHDIST2013_HERSRDMan = 
									;								case  8394112 :	2.2	; "(HERS req'd) Recirculation, Demand Control Occupancy/Motion" ; %WHDIST2013_HERSRDAuto =
									;								case  8394240 :	0.3	; "(HERS req'd) Point of Use"                                   ; %WHDIST2013_HERSPOU =   
									;								case  8394496 :	0.7	; "(HERS req'd) Compact Distribution System"                    ; %WHDIST2013_HERSCDS =   
									;					;			case     5056 :	0.0	; "Multi-Family Central Recirc Non-Demand Control"              ; %WHDIST2013_CRND =      
									;					;			case     6336 :	0.0	; "Multi-Family Central Recirc Monitoring"                      ; %WHDIST2013_CRM =       
									;					;			case     6592 :	0.0	; "Multi-Family Central Demand Recirc (new cons std design)"    ; %WHDIST2013_CRD =       
									;								default       :	1.0
									;							endswitch  }
END
;*************************************************************************

;*************************************************************************   - SAC 10/18/17
;RULELIST  "ForceDefault_Proj_ShwrDRAINHREFF" 1 0 0 1
;;	"Default Proj:ShwrDRAINHREFF"			Proj:ShwrDRAINHREFF			= {	0    }
;   ; SAC 2/16/18 - added logic to implement std design ShwrDRAINHREFF when one or more stsd design HPWN DHW systems installed (tic #978)
;   "Default Proj:HaveShwrDrnHtRecov"      Proj:HaveShwrDrnHtRecov  = {
;         if (SumAll( ResDHWSys:IsStdDesignElec ) > 0)
;         then  if (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovEff( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) > 0)
;               then  1  else  0  endif
;         else if (LocalStatus( HaveShwrDrnHtRecov ) > 6) then  UNCHANGED
;         else  0  endif endif  }
;   "Default Proj:ShwrDRAINHREFF"    Proj:ShwrDRAINHREFF  = {
;         if (HaveShwrDrnHtRecov > 0)
;         then  max( 0.42, T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovEff( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) )
;         else  0  endif  }
;END
; SAC 1/12/19 - replaced original DWHR default/std design rules (above) w/ updated version for 2019
RULELIST  "ForceDefault_ShowerDrainHeatRecov_SFam" 1 0 1 1
   ; incorporated StdDesignDrnWtrHtRecYear into table look-ups - SAC 01/22/21
   "Blast Proj:ShwrDRAINHREFF"   Proj:ShwrDRAINHREFF  = {  0  }

   "Set std design ResDHWSys:TotShowersServed"  ResDHWSys:TotShowersServed  = {  1 + int( (ValidOr( ResProj:NumBedrooms, 1 )+1)/2.5 )  }
   "Set std design ResDHWSys:DWHRSysRef[1]"     ResDHWSys:DWHRSysRef[1]  = {
         if (IfValidAnd( IsStdDesignElec > 0 )==0) then  UNCHANGED
         else  Proj:StdElecDWHRSysRef[1]  endif  }
   "Set std design ResDHWSys:DWHRSysShowers[1]" ResDHWSys:DWHRSysShowers[1]  = {  TotShowersServed *
         T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovShwrSrvd( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ) / 100  }
;   "Set std design ResDHWSys:DWHRSysConfig[1]"  ResDHWSys:DWHRSysConfig[1]  = {
;         T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr )  }
; SAC 3/5/19 - replaced setting of DWHRSysConfig w/ eval of rulelists to setup new DWHR details (tic #1072)
   "Call subordinate rulelist to setup ElecDHWDrnWtrHtRecov details"    ResDHWSys:Action  = {
         switch (T24RClimateZoneCodeBase:ElecDHWDrnWtrHtRecovConfig( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignDrnWtrHtRecYear, "BldgType", Proj:BldgTypeTblStr ))
            case "Equal Flow"             :  EvalRulelist( "ForceDefault_ShowerDrainHeatRecov_SFam_Equal", 1 )
            case "Unequal - Water Heater" :  EvalRulelist( "ForceDefault_ShowerDrainHeatRecov_SFam_UneqWHtr", 1 )
            case "Unequal - Shower"       :  EvalRulelist( "ForceDefault_ShowerDrainHeatRecov_SFam_UneqShwr", 1 )
            default  :  EvalRulelist( "ForceDefault_ShowerDrainHeatRecov_SFam_None", 1 )
         endswitch  }
   "Blast std design ResDHWSys:DWHRSysRef[2]"   ResDHWSys:DWHRSysRef[2]  = {
         if (IfValidAnd( IsStdDesignElec > 0 )==0) then  UNCHANGED  else  UNDEFINED  endif  }
   "Blast std design ResDHWSys:DWHRSysRef[3]"   ResDHWSys:DWHRSysRef[3]  = {
         if (IfValidAnd( IsStdDesignElec > 0 )==0) then  UNCHANGED  else  UNDEFINED  endif  }
   "Blast std design ResDHWSys:DWHRSysRef[4]"   ResDHWSys:DWHRSysRef[4]  = {
         if (IfValidAnd( IsStdDesignElec > 0 )==0) then  UNCHANGED  else  UNDEFINED  endif  }
   "Blast std design ResDHWSys:DWHRSysRef[5]"   ResDHWSys:DWHRSysRef[5]  = {
         if (IfValidAnd( IsStdDesignElec > 0 )==0) then  UNCHANGED  else  UNDEFINED  endif  }
   "Blast std design ResDHWSys:DWHRSysRef[6]"   ResDHWSys:DWHRSysRef[6]  = {
         if (IfValidAnd( IsStdDesignElec > 0 )==0) then  UNCHANGED  else  UNDEFINED  endif  }
END
;*************************************************************************  SAC 3/5/19 (tic #1072)
RULELIST  "ForceDefault_ShowerDrainHeatRecov_SFam_Equal" 1 0 1 1
   "Set std design ResDHWSys:DWHRSysTakeCold[1]"   ResDHWSys:DWHRSysTakeCold[1]    = {  DWHRSysShowers[1]  }
   "Set std design ResDHWSys:DWHRSysFeedHeater[1]" ResDHWSys:DWHRSysFeedHeater[1]  = {  1  }
END
RULELIST  "ForceDefault_ShowerDrainHeatRecov_SFam_UneqWHtr" 1 0 1 1
   "Set std design ResDHWSys:DWHRSysTakeCold[1]"   ResDHWSys:DWHRSysTakeCold[1]    = {  0  }
   "Set std design ResDHWSys:DWHRSysFeedHeater[1]" ResDHWSys:DWHRSysFeedHeater[1]  = {  1  }
END
RULELIST  "ForceDefault_ShowerDrainHeatRecov_SFam_UneqShwr" 1 0 1 1
   "Set std design ResDHWSys:DWHRSysTakeCold[1]"   ResDHWSys:DWHRSysTakeCold[1]    = {  DWHRSysShowers[1]  }
   "Set std design ResDHWSys:DWHRSysFeedHeater[1]" ResDHWSys:DWHRSysFeedHeater[1]  = {  0  }
END
RULELIST  "ForceDefault_ShowerDrainHeatRecov_SFam_None" 1 0 1 1
   "Set std design ResDHWSys:DWHRSysTakeCold[1]"   ResDHWSys:DWHRSysTakeCold[1]    = {  UNDEFINED  }
   "Set std design ResDHWSys:DWHRSysFeedHeater[1]" ResDHWSys:DWHRSysFeedHeater[1]  = {  UNDEFINED  }
END
;*************************************************************************  SAC 1/12/19
RULELIST  "Remove_ShowerDrainHeatRecov_SFam" 1 0 0 1
   "Blast Proj:ShwrDRAINHREFF"   Proj:ShwrDRAINHREFF  = {  0  }
   "Blast std design ResDHWSys:DWHRSysRef[1]"   ResDHWSys:DWHRSysRef[1]  = {  
         if (IfValidAnd( IsExisting > 0.5 ) .OR. IfValidAnd( FloorAreaServed[1] < 0.1 )) then  UNCHANGED  else  UNDEFINED  endif  }
   "Blast std design ResDHWSys:DWHRSysRef[2]"   ResDHWSys:DWHRSysRef[2]  = {  
         if (IfValidAnd( IsExisting > 0.5 ) .OR. IfValidAnd( FloorAreaServed[1] < 0.1 )) then  UNCHANGED  else  UNDEFINED  endif  }
   "Blast std design ResDHWSys:DWHRSysRef[3]"   ResDHWSys:DWHRSysRef[3]  = {  
         if (IfValidAnd( IsExisting > 0.5 ) .OR. IfValidAnd( FloorAreaServed[1] < 0.1 )) then  UNCHANGED  else  UNDEFINED  endif  }
   "Blast std design ResDHWSys:DWHRSysRef[4]"   ResDHWSys:DWHRSysRef[4]  = {  
         if (IfValidAnd( IsExisting > 0.5 ) .OR. IfValidAnd( FloorAreaServed[1] < 0.1 )) then  UNCHANGED  else  UNDEFINED  endif  }
   "Blast std design ResDHWSys:DWHRSysRef[5]"   ResDHWSys:DWHRSysRef[5]  = {  
         if (IfValidAnd( IsExisting > 0.5 ) .OR. IfValidAnd( FloorAreaServed[1] < 0.1 )) then  UNCHANGED  else  UNDEFINED  endif  }
   "Blast std design ResDHWSys:DWHRSysRef[6]"   ResDHWSys:DWHRSysRef[6]  = {  
         if (IfValidAnd( IsExisting > 0.5 ) .OR. IfValidAnd( FloorAreaServed[1] < 0.1 )) then  UNCHANGED  else  UNDEFINED  endif  }
END
;*************************************************************************

;*************************************************************************  - SAC 1/12/19  / SAC 3/25/19 - revised for new ResProj-level specification
RULELIST  "ForceDefault_CompactDistribution_SFam" 1 0 1 1
   "Set std design ResProj:SFamCompactDistrib"    ResProj:SFamCompactDistrib  =                 ; StdDesignCompactDistYear - SAC 01/22/21   ; StdDesignCompactDistVal - SAC 01/27/21
      {  if ( SumAcrossIf( ResDHWSys:IsStdDesignElec, ResDHWSys:IsExisting < 0.5 ) > 0 .OR.
              (AllowStdDesignFuel > 0 .AND. IfValidAnd( StdDesignCompactDistrib > 0 ) .AND.
               (RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. (ResProj:SMFFollowsStdDesignFuel .AND. ResProj:RunAbbrev == "smf"))) )
         then  if (AllowStdDesignFuel > 0 .AND. IfValidAnd( StdDesignCompactDistrib > 0 ) .AND.
                   IfValidAnd( StdDesignCompactDistVal > 0 ) .AND. (RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. (ResProj:SMFFollowsStdDesignFuel .AND. ResProj:RunAbbrev == "smf")))
               then  switch (StdDesignCompactDistVal)
                        case  1.0 :  "not compact"
                        case  0.7 :  "Basic Credit"
                        default   :  "Expanded Credit (HERS req'd)"
                     endswitch
               else  switch (T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignCompactDistYear, "BldgType", Proj:BldgTypeTblStr ))
                        case  0.0 :  "not compact"    ; covers DRtg run
                        case  1.0 :  "not compact"
                        case  0.7 :  "Basic Credit"
                        default   :  "Expanded Credit (HERS req'd)"
                     endswitch
               endif
         else  T24RClimateZoneCodeBase:DHWCompactDistrib( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignCompactDistYear, "BldgType", Proj:BldgTypeTblStr )
         endif  }
                        ;"dbg" ResProj:Action = { PostMessageToLog( "just set SFamCompactDistrib to '%s', %s run, %g StdDesignCompactDistYear, %g StdDesignBase", EnumString( SFamCompactDistrib ), RunAbbrev, StdDesignCompactDistYear, StdDesignBase ) }
   ;"Set std design ResProj:SFamUserSpecCmpctDist"      ResProj:SFamUserSpecCmpctDist  = 
   ;   {  if (SFamCompactDistrib == 2) then  1  else  0  endif  }
   ; replaced SFamUserSpecCmpctDist w/ SFamCDSpecFixDists - SAC 09/30/21 (tic #1277)
   "Set std design ResProj:SFamCDSpecFixDists"          ResProj:SFamCDSpecFixDists  = 
      {  if (SFamCompactDistrib == 2) then  0  else  UNCHANGED  endif  }
   "Set std design ResProj:SFamUserCompactFactor"      ResProj:SFamUserCompactFactor  =         ; StdDesignCompactDistVal - SAC 01/27/21
      {  if (SFamCDSpecFixDists > 0) then  UNDEFINED
         else if (AllowStdDesignFuel > 0 .AND. IfValidAnd( StdDesignCompactDistrib > 0 ) .AND.
                  IfValidAnd( StdDesignCompactDistVal > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. (ResProj:SMFFollowsStdDesignFuel .AND. ResProj:RunAbbrev == "smf")))
         then  StdDesignCompactDistVal
         else  T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignCompactDistYear, "BldgType", Proj:BldgTypeTblStr )
         endif endif  }

   "Process DHWSys for CompactDistrib"    ResDHWSys:Action  =                    ; StdDesignCompactDistYear - SAC 01/22/21
      {  if (IfValidAnd( IsExisting < 1 )==0) then  UNCHANGED
         else if ( (IfValidAnd( IsStdDesignElec > 0 )    .AND. T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignCompactDistYear, "BldgType", Proj:BldgTypeTblStr ) < 1) .OR.
                   (IfValidAnd( IsStdDesignElec > 0 )==0 .AND. T24RClimateZoneCodeBase:DHWCompactDistrib(    "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignCompactDistYear, "BldgType", Proj:BldgTypeTblStr ) != "not compact") .OR.
                   (ResProj:AllowStdDesignFuel > 0 .AND. IfValidAnd( ResProj:StdDesignCompactDistrib > 0 ) .AND. (ResProj:RunAbbrev == "s" .OR. ResProj:RunAbbrev == "zb" .OR. (ResProj:SMFFollowsStdDesignFuel .AND. ResProj:RunAbbrev == "smf")) .AND. ResProj:SFamCompactDistrib > 0) )
         then  EvalRulelist( "ForceDefault_CompactDistribution_SFam_DHWSys_ServeAll", 1 )
         else  EvalRulelist( "ForceDefault_CompactDistribution_SFam_DHWSys_NoCompact", 1 )
         endif endif  }
END
;*************************************************************************  - SAC 3/25/19
RULELIST  "ForceDefault_CompactDistribution_SFam_DHWSys_ServeAll" 1 0 1 1
   "Toggle ON DHWSys MBath CompactDistrib"      ResDHWSys:CDServesMBathFix  = {  1  }
   "Set DHWSys MBath CompactDistrib distance"   ResDHWSys:CDMBathFixDist    = {  3  }    ; random distance to just make sure it registers
   "Toggle ON DHWSys Kit CompactDistrib"        ResDHWSys:CDServesKitFix    = {  1  }
   "Set DHWSys Kit CompactDistrib distance"     ResDHWSys:CDKitFixDist      = {  3  }
   "Toggle ON DHWSys Third CompactDistrib"      ResDHWSys:CDServesThirdFix  = {  1  }
   "Set DHWSys Third CompactDistrib distance"   ResDHWSys:CDThirdFixDist    = {  3  }
END
;*************************************************************************  - SAC 3/25/19
RULELIST  "ForceDefault_CompactDistribution_SFam_DHWSys_NoCompact" 1 0 1 1
   "Toggle OFF DHWSys MBath CompactDistrib"     ResDHWSys:CDServesMBathFix  = {  0  }
   "Set DHWSys MBath CompactDistrib distance"   ResDHWSys:CDMBathFixDist    = {  0  }
   "Toggle OFF DHWSys Kit CompactDistrib"       ResDHWSys:CDServesKitFix    = {  0  }
   "Set DHWSys Kit CompactDistrib distance"     ResDHWSys:CDKitFixDist      = {  0  }
   "Toggle OFF DHWSys Third CompactDistrib"     ResDHWSys:CDServesThirdFix  = {  0  }
   "Set DHWSys Third CompactDistrib distance"   ResDHWSys:CDThirdFixDist    = {  0  }
END
;*************************************************************************
; SAC 3/25/19 - replaced OLD DHWSys-centric std design CompactDistrib rules (below) w/ latest Proj-level (above)
; ;*************************************************************************  - SAC 1/12/19
; RULELIST  "ForceDefault_CompactDistribution_SFam" 1 0 1 1
;    "Set std design ResDHWSys:CompactDistrib"    ResDHWSys:CompactDistrib  = {
;          if (IfValidAnd( IsStdDesignElec > 0 ))
;          then  if (T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr ) == 0.7)
;                then  "Basic Credit"
;                else  "Expanded Credit (HERS req'd)"
;                endif
;          else  T24RClimateZoneCodeBase:DHWCompactDistrib(     "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
;          endif  }
;    "Set std design ResDHWSys:UserSpecCmpctDist"    ResDHWSys:UserSpecCmpctDist  = {
;          if (ResProj:IsMultiFamily .OR. CompactDistrib == 0)
;          then  0
;          else  1  endif  }
;    "Set std design ResDHWSys:UserCompactFactor"    ResDHWSys:UserCompactFactor  = {
;          if (ResProj:IsMultiFamily .OR. UserSpecCmpctDist = 0)
;          then  UNDEFINED
;          else if (IfValidAnd( IsStdDesignElec > 0 ))
;          then  T24RClimateZoneCodeBase:ElecDHWCompactFactor( "ClimateZone", Proj:CliZnNum, "CodeBase", Proj:StdDesignBase, "BldgType", Proj:BldgTypeTblStr )
;          else  0.7
;          endif endif  }
; END
; ;*************************************************************************  - SAC 1/12/19
; RULELIST  "Remove_CompactDistribution_SFam" 1 0 0 1
;    "Blast std design ResDHWSys:CompactDistrib"   ResDHWSys:CompactDistrib  = {
;          if (IfValidAnd( IsExisting > 0.5 ) .OR. IfValidAnd( FloorAreaServed[1] < 0.1 )) then  UNCHANGED  else  0  endif  }
; END
; ;*************************************************************************


;*************************************************************************   - SAC 1/18/19 (tic #1054)
RULELIST  "ForceReset_DHWHeater_RecovEff"  1 0 0 1
   "Blast ResWtrHtr:RecovEff"       ResWtrHtr:RecovEff     = {  UNDEFINED  }
END
;*************************************************************************   - SAC 6/11/18 (tic #940)
RULELIST  "ForceReset_DHWHeater_InputRating"  1 0 0 1
   "Blast ResWtrHtr:InputRating"    ResWtrHtr:InputRating  = {  UNDEFINED  }
END
;*************************************************************************   - SAC 3/1/18 (tic #993)
RULELIST  "GasDHWHeater_ConvertToNew_ConsumerInstantaneousUEF"  1 0 0 1
   "Blast ResWtrHtr:InputRating"    ResWtrHtr:InputRating  = {  UNDEFINED  }
   "Blast ResWtrHtr:TankVolume"     ResWtrHtr:TankVolume   = {  UNDEFINED  }
   "Blast ResWtrHtr:RatedFlow"      ResWtrHtr:RatedFlow    = {  UNDEFINED  }
   "Post message to log describing TankType conversion"   ResWtrHtr:Action  = {
      PostWarning( "DHWHeater '%s' Tank Type '%s' has been upgraded to use a new CSE simulation model and its inputs should be reviewed for accuracy before performing analysis.", Name, EnumString( TankType ) )  }
END
;*************************************************************************

;*************************************************************************   - SAC 3/1/18 (tic #993)
RULELIST  "ForceReset_DHWHeaterPerformance_ConsumerInstantaneousUEF"  1 0 0 0
   "Blast ResWtrHtr:RatedFlow"      ResWtrHtr:RatedFlow    = {  UNDEFINED  }
   "Blast ResWtrHtr:AnnFuelUse"     ResWtrHtr:AnnFuelUse   = {  UNDEFINED  }
   "Blast ResWtrHtr:AnnElecUse"     ResWtrHtr:AnnElecUse   = {  UNDEFINED  }
   "Blast ResWtrHtr:StandbyElec"    ResWtrHtr:StandbyElec  = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************   - SAC 1/2/19
RULELIST  "ForceDefault_DHWSys_HeaterMultFlt"  1 0 0 1
   "Blast ResDHWSys:HeaterMultFlt[1]"  ResDHWSys:HeaterMultFlt[1]  = {  UNDEFINED  }
   "Blast ResDHWSys:HeaterMultFlt[2]"  ResDHWSys:HeaterMultFlt[2]  = {  UNDEFINED  }
   "Blast ResDHWSys:HeaterMultFlt[3]"  ResDHWSys:HeaterMultFlt[3]  = {  UNDEFINED  }
   "Blast ResDHWSys:HeaterMultFlt[4]"  ResDHWSys:HeaterMultFlt[4]  = {  UNDEFINED  }
   "Blast ResDHWSys:HeaterMultFlt[5]"  ResDHWSys:HeaterMultFlt[5]  = {  UNDEFINED  }
   "Blast ResDHWSys:HeaterMultFlt[6]"  ResDHWSys:HeaterMultFlt[6]  = {  UNDEFINED  }
END
;*************************************************************************

; SAC 5/27/19 - rules to force updates to older ResWtrHtr:TankType settings for New/Alt heaters in 2019+ analysis (excl. Std & DRtg models) (tic #1096)
;*************************************************************************  SAC 5/27/19 (tic #1096)
RULELIST "CheckForUpdateNeeded_DHWHeater_OldTankType"  0 0 0 0
   ; SAC 5/27/19 - revised logic to ignore HPWHs
   "Set ResWtrHtr:TankTypeResetReqd when nceessary"      ResWtrHtr:TankTypeResetReqd  =      ; revised logic to NOT reset TankType of DHWHeaters w/ no valid Status - SAC 08/14/20 (tic #1052)
      {  if (ResProj:EnergyCodeYearNum < 2019 .OR. Status < 2 .OR. HeaterElementType > 1) then  UNDEFINED
         else if (IfValidAnd( ResProj:RunAbbrev == "s" ) .OR. IfValidAnd( ResProj:RunAbbrev == "zb" ) .OR. IfValidAnd( ResProj:RunAbbrev == "smf" ) .OR. IfValidAnd( ResProj:RunAbbrev == "dr" )) then  UNDEFINED
         else if (TankType = 2 .OR. TankType = 3 .OR. TankType = 5 .OR. TankType = 6) then  1
         else  UNDEFINED  endif endif endif  }
   "Eval rules to force reset of ResWtrHtr:TankType when necessary"     ResWtrHtr:Action  =
      {  if (IfValidAnd( TankTypeResetReqd > 0 )) then  EvalRulelist( "ForceUpdate_DHWHeater_OldTankType", 1 )
         else  UNCHANGED  endif  }
   "Reset ResWtrHtr:TankTypeResetReqd flag to avoid re-default or reporting of heaters updated but not assigned to Zones"  ResWtrHtr:TankTypeResetReqd  =
      {  if (IfValidAnd( TankTypeResetReqd > 0 ) .AND. IfValidAnd( FloorAreaServed > 1 )==0)
         then  UNDEFINED  else  UNCHANGED  endif  }
   "Re-do DHW system defaulting if any ResWtrHtr:TankType settings were updated above"    Proj:Action  =
      {  if (SumAll( ResWtrHtr:TankTypeResetReqd ) < 1) then  UNCHANGED
         else  EvalRulelist( "ProposedInput_DHWEquipment" )  endif  }
   "Alert user to reset ResWtrHtr:TankTypes"    Proj:Action  =
      {  if (IfValidAnd( ResProj:BypassMessageBoxes > 0 ) .OR. SumAll( ResWtrHtr:TankTypeResetReqd ) < 1) then  UNCHANGED
         else  MessageBox( "%g DHWHeater(s) have been updated to reference new TankType settings, replacing older selections that are no longer compatible with new/altered equipment. These DHW heaters should be reviewed and updated as needed before performing compliance analysis. Consult the project log file for more details.", SumAll( ResWtrHtr:TankTypeResetReqd ) )
         endif  }
END 
;*************************************************************************  SAC 5/27/19 (tic #1096)
RULELIST "ForceUpdate_DHWHeater_OldTankType"  1 0 1 0
   "log warning re: reset of ResWtrHtr:TankType"     ResWtrHtr:Action  =
      {  if (Status = 2)
         then  switch (TankType)
                  case  2 :  PostWarning( "Altered DHWHeater '%s' TankType is being updated from 'Large Instantaneous' to 'Commercial Instantaneous (TE)' and will require further review/revision", Name )
                  case  3 :  PostWarning( "Altered DHWHeater '%s' TankType is being updated from 'Large Storage' to 'Commercial Storage (TE & SBL)' and will require further review/revision", Name )
                  case  5 :  PostWarning( "Altered DHWHeater '%s' TankType is being updated from 'Small Instantaneous' to 'Consumer Instantaneous (UEF)' and will require further review/revision", Name )
                  case  6 :  PostWarning( "Altered DHWHeater '%s' TankType is being updated from 'Small Storage' to 'Consumer Storage (UEF)' and will require further review/revision", Name )
                  default :  UNCHANGED
               endswitch
         else  switch (TankType)
                  case  2 :  PostWarning( "New DHWHeater '%s' TankType is being updated from 'Large Instantaneous' to 'Commercial Instantaneous (TE)' and will require further review/revision", Name )
                  case  3 :  PostWarning( "New DHWHeater '%s' TankType is being updated from 'Large Storage' to 'Commercial Storage (TE & SBL)' and will require further review/revision", Name )
                  case  5 :  PostWarning( "New DHWHeater '%s' TankType is being updated from 'Small Instantaneous' to 'Consumer Instantaneous (UEF)' and will require further review/revision", Name )
                  case  6 :  PostWarning( "New DHWHeater '%s' TankType is being updated from 'Small Storage' to 'Consumer Storage (UEF)' and will require further review/revision", Name )
                  default :  UNCHANGED
               endswitch  endif  }
   "Update ResWtrHtr:TankType to new standard option"    ResWtrHtr:TankType  =
      {  switch (TankType)
            case  2 :  11   ; "Large Instantaneous" -> "Commercial Instantaneous (TE)"
            case  3 :  13   ; "Large Storage"       -> "Commercial Storage (TE & SBL)"
            case  5 :  10   ; "Small Instantaneous" -> "Consumer Instantaneous (UEF)" 
            case  6 :  12   ; "Small Storage"       -> "Consumer Storage (UEF)"       
            default :  UNCHANGED
         endswitch  }
END
;*************************************************************************

;*************************************************************************  SAC 10/24/19
RULELIST "ForceReset_DHWSys_NewCentralElecModel"  1 0 0 0
   "Blast ResDHWSys:NewCentralElecModel"  ResDHWSys:NewCentralElecModel  = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************  SAC 12/2/19
RULELIST "ForceReset_DHWSys_UseMaxDurNumHtrs"  1 0 0 0
   "Blast ResDHWSys:UseMaxDurNumHtrs"     ResDHWSys:UseMaxDurNumHtrs  = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************   - SAC 10/25/22
RULELIST  "ForceReset_DHWSys_CentralDHW"  1 0 0 1
   "Blast ResDHWSys:CentralDHW"           ResDHWSys:CentralDHW  = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************   - SAC 1/1/20 (tic #862)
RULELIST  "ForceReset_DHWSys_CentralDHWType"  1 0 0 1
   "Blast ResDHWSys:CentralDHWType"       ResDHWSys:CentralDHWType  = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************   - SAC 02/10/21 (tic #1219)
RULELIST  "ForceReset_DHWSys_DHWHeaters_2thru6"  1 0 0 1
   "Blast ResDHWSys:DHWHeater[2]"      ResDHWSys:DHWHeater[2]  = {  UNDEFINED  }
   "Blast ResDHWSys:DHWHeater[3]"      ResDHWSys:DHWHeater[3]  = {  UNDEFINED  }
   "Blast ResDHWSys:DHWHeater[4]"      ResDHWSys:DHWHeater[4]  = {  UNDEFINED  }
   "Blast ResDHWSys:DHWHeater[5]"      ResDHWSys:DHWHeater[5]  = {  UNDEFINED  }
   "Blast ResDHWSys:DHWHeater[6]"      ResDHWSys:DHWHeater[6]  = {  UNDEFINED  }
END
;*************************************************************************
RULELIST  "ForceReset_DHWSys_DHWHeaters_1"  1 0 0 1
   "Blast ResDHWSys:DHWHeater[1]"      ResDHWSys:DHWHeater[1]  = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************   - SAC 12/30/19 (tic #862)
RULELIST  "ForceReset_DHWHeater_TankVolume"  1 0 0 1
   "Blast ResWtrHtr:TankVolume"     ResWtrHtr:TankVolume  = {  UNDEFINED  }
END
;*************************************************************************


;*************************************************************************  - SAC 3/6/20
RULELIST  "ForceDefault_DHWSys_CHPWHNumCompFlt"  1 0 0 1
   "Blast ResDHWSys:CHPWHNumCompFlt"   ResDHWSys:CHPWHNumCompFlt  = {  UNDEFINED  }
END
;*************************************************************************

;*************************************************************************  - SAC 07/16/21 (tic #1275)
RULELIST  "ForceDefault_DHWSys_CHPWHLoopTankResCtrls"  1 0 0 1
   "Restore default ResDHWSys:CHPWHLoopTankResCtrls"     ResDHWSys:CHPWHLoopTankResCtrls     = {  1  }
   "Restore default ResDHWSys:StdCHPWHLoopTankResCtrls"  ResDHWSys:StdCHPWHLoopTankResCtrls  = {  1  }
END
;*************************************************************************

;*************************************************************************  - SAC 8/10/20
RULELIST  "Blast_CHPWH_TankSetpoints"  1 0 0 1
   "Blast ResDHWSys:CHPWHTankSetpt"       ResDHWSys:CHPWHTankSetpt      = {  UNDEFINED  }
   "Blast ResDHWSys:CHPWHLoopTankSetpt"   ResDHWSys:CHPWHLoopTankSetpt  = {  UNDEFINED  }
END
;*************************************************************************


;************************************************************************* SAC 02/02/21
RULELIST "DHWSys_Blast_DemResponsive" 1 0 0 1
   "Blast ResDHWSys:DemResponsive"     ResDHWSys:DemResponsive  = {  UNDEFINED  }
END
;*************************************************************************


;*************************************************************************  - SAC 5/27/20
RULELIST  "BackwardCompat_DHWSys_CHPWH"  1 0 1 1
   "Set ResDHWSys:CHPWHSysDescrip to Large"  ResDHWSys:CHPWHSysDescrip = {  2  }  ; Large Single Pass Primary
   "Set ResDHWSys:CHPWHTotTankVol based on CHPWHPrimTankVol & CHPWHNumComp(Flt)"    ResDHWSys:CHPWHTotTankVol =
      {  if (IfValidAnd( CHPWHPrimTankVol > 0 )==0) then  UNDEFINED
         else if (Proj:EnableResearchMode > 0 .AND. IfValidAnd( CHPWHNumCompFlt > 0 )) then  CHPWHPrimTankVol * CHPWHNumCompFlt
         else if (IfValidAnd( CHPWHNumComp > 0 )) then  CHPWHPrimTankVol * CHPWHNumComp
         else  UNDEFINED  endif endif endif  }
   "Blast ResDHWSys:CHPWHPrimTankVol"     ResDHWSys:CHPWHPrimTankVol = {  UNDEFINED  }
END
;*************************************************************************

;************************************************************************* ; SAC 02/23/22
RULELIST "BackwardCompat_ResDHWSys_CHPWHLoopTankType_IntegPkg"  1 0 1 1
   "Set ResDHWSys:CHPWHLoopTankConfig"       ResDHWSys:CHPWHLoopTankConfig = {  1  }   ; Series?
   "Set ResDHWSys:CHPWHLoopTankIntegPkgType" ResDHWSys:CHPWHLoopTankIntegPkgType =
      {  switch (CHPWHLoopTankType)
            case  8 :  1      ; "Residential (NEEA rated) Product"
            case  9 :  2      ; "Commercial Product"
            default :  DEFAULT
         endswitch  }
   "Set ResDHWSys:CHPWHLoopTankType"         ResDHWSys:CHPWHLoopTankType   = {  2  }   ; "Integrated/Packaged System"
END
;*************************************************************************
RULELIST "BackwardCompat_ResDHWSys_CHPWHLoopTankType_None"  1 0 1 1
   "Set ResDHWSys:CHPWHLoopTankConfig"    ResDHWSys:CHPWHLoopTankConfig = {  0  }      ; none
   "Set ResDHWSys:CHPWHLoopTankType"      ResDHWSys:CHPWHLoopTankType   = {  1  }      ; "Electric Resistance"
END
;*************************************************************************
RULELIST "BackwardCompat_ResDHWSys_CHPWHLoopTankType_Present"  1 0 1 1
   "Set ResDHWSys:CHPWHLoopTankConfig"    ResDHWSys:CHPWHLoopTankConfig = {  1  }      ; Series?
END
;*************************************************************************


;*************************************************************************  - SAC 4/3/20
RULELIST  "BlastInputs_DHWSolarSys_Count" 1 0 0 0
   "Blast DHWSolSys:Count"     DHWSolSys:Count    = {  UNDEFINED  }
END
RULELIST  "BlastInputs_DHWSolarSys_CountFlt" 1 0 0 0
   "Blast DHWSolSys:CountFlt"  DHWSolSys:CountFlt = {  UNDEFINED  }
END
;*************************************************************************


;*************************************************************************  - SAC 12/04/20
RULELIST  "SetupDemRespSched_DHWSys" 1 0 1 0
   ; DR Temperature Sched
   "Create ResDHWSys:DRTempSetptSchRef"            ResDHWSys:DRTempSetptSchRef               = {  CreateComp( Sch, Name + "-DRTempSch" )  }
   "Set ResDHWSys:DRTempSetptSchRef:Type"          ResDHWSys:DRTempSetptSchRef:Type          = {  "Temperature"  }
   "Set ResDHWSys:DRTempSetptSchRef:Description"   ResDHWSys:DRTempSetptSchRef:Description   = {  "MonthlyWDWE"  }   ; SAC 12/10/20
   "Set ResDHWSys:DRTempSetptSchRef:NumWeeks"      ResDHWSys:DRTempSetptSchRef:NumWeeks      = {  12  }
   "Set ResDHWSys:DRTempSetptSchRef:EndMonth[1]"   ResDHWSys:DRTempSetptSchRef:EndMonth[1]   = {   1  }     "Set ResDHWSys:DRTempSetptSchRef:EndDay[1]"   ResDHWSys:DRTempSetptSchRef:EndDay[1]  = {  31  }
   "Set ResDHWSys:DRTempSetptSchRef:EndMonth[2]"   ResDHWSys:DRTempSetptSchRef:EndMonth[2]   = {   2  }     "Set ResDHWSys:DRTempSetptSchRef:EndDay[2]"   ResDHWSys:DRTempSetptSchRef:EndDay[2]  = {  28  }
   "Set ResDHWSys:DRTempSetptSchRef:EndMonth[3]"   ResDHWSys:DRTempSetptSchRef:EndMonth[3]   = {   3  }     "Set ResDHWSys:DRTempSetptSchRef:EndDay[3]"   ResDHWSys:DRTempSetptSchRef:EndDay[3]  = {  31  }
   "Set ResDHWSys:DRTempSetptSchRef:EndMonth[4]"   ResDHWSys:DRTempSetptSchRef:EndMonth[4]   = {   4  }     "Set ResDHWSys:DRTempSetptSchRef:EndDay[4]"   ResDHWSys:DRTempSetptSchRef:EndDay[4]  = {  30  }
   "Set ResDHWSys:DRTempSetptSchRef:EndMonth[5]"   ResDHWSys:DRTempSetptSchRef:EndMonth[5]   = {   5  }     "Set ResDHWSys:DRTempSetptSchRef:EndDay[5]"   ResDHWSys:DRTempSetptSchRef:EndDay[5]  = {  31  }
   "Set ResDHWSys:DRTempSetptSchRef:EndMonth[6]"   ResDHWSys:DRTempSetptSchRef:EndMonth[6]   = {   6  }     "Set ResDHWSys:DRTempSetptSchRef:EndDay[6]"   ResDHWSys:DRTempSetptSchRef:EndDay[6]  = {  30  }
   "Set ResDHWSys:DRTempSetptSchRef:EndMonth[7]"   ResDHWSys:DRTempSetptSchRef:EndMonth[7]   = {   7  }     "Set ResDHWSys:DRTempSetptSchRef:EndDay[7]"   ResDHWSys:DRTempSetptSchRef:EndDay[7]  = {  31  }
   "Set ResDHWSys:DRTempSetptSchRef:EndMonth[8]"   ResDHWSys:DRTempSetptSchRef:EndMonth[8]   = {   8  }     "Set ResDHWSys:DRTempSetptSchRef:EndDay[8]"   ResDHWSys:DRTempSetptSchRef:EndDay[8]  = {  31  }
   "Set ResDHWSys:DRTempSetptSchRef:EndMonth[9]"   ResDHWSys:DRTempSetptSchRef:EndMonth[9]   = {   9  }     "Set ResDHWSys:DRTempSetptSchRef:EndDay[9]"   ResDHWSys:DRTempSetptSchRef:EndDay[9]  = {  30  }
   "Set ResDHWSys:DRTempSetptSchRef:EndMonth[10]"  ResDHWSys:DRTempSetptSchRef:EndMonth[10]  = {  10  }     "Set ResDHWSys:DRTempSetptSchRef:EndDay[10]"  ResDHWSys:DRTempSetptSchRef:EndDay[10] = {  31  }
   "Set ResDHWSys:DRTempSetptSchRef:EndMonth[11]"  ResDHWSys:DRTempSetptSchRef:EndMonth[11]  = {  11  }     "Set ResDHWSys:DRTempSetptSchRef:EndDay[11]"  ResDHWSys:DRTempSetptSchRef:EndDay[11] = {  30  }
   "Set ResDHWSys:DRTempSetptSchRef:EndMonth[12]"  ResDHWSys:DRTempSetptSchRef:EndMonth[12]  = {  12  }     "Set ResDHWSys:DRTempSetptSchRef:EndDay[12]"  ResDHWSys:DRTempSetptSchRef:EndDay[12] = {  31  }

   "Create ResDHWSys:DRTempSetptSchRef:SchWeekRef[1-12]"    for:#Mo=(1to12) ResDHWSys:DRTempSetptSchRef:SchWeekRef[#Mo]    = {  CreateComp( SchWeek, Name + "-DRTempSchWk#Mo" )  }
   "Set    ResDHWSys:DRTempSetptSchRef:SchWeekRef[1-12]:Type"           for:#Mo=(1to12) ResDHWSys:DRTempSetptSchRef:SchWeekRef[#Mo]:Type           = {  "Temperature"  }
   "Create ResDHWSys:DRTempSetptSchRef:SchWeekRef[1-12]:SchDayWDRef"    for:#Mo=(1to12) ResDHWSys:DRTempSetptSchRef:SchWeekRef[#Mo]:SchDayWDRef    = {  CreateComp( SchDay, Name + "-DRTempSchWk#MoWD", "SetSchDay_Type_Temperature" )  }
   "Create ResDHWSys:DRTempSetptSchRef:SchWeekRef[1-12]:SchDayWERef"    for:#Mo=(1to12) ResDHWSys:DRTempSetptSchRef:SchWeekRef[#Mo]:SchDayWERef    = {  CreateComp( SchDay, Name + "-DRTempSchWk#MoWE", "SetSchDay_Type_Temperature" )  }
   ; set new SchDayNoTESWDRef/SchDayNoTESWERef properties so that subsequent defaulting rules will work - SAC 04/25/23
   "Set ResDHWSys:DRTempSetptSchRef:SchWeekRef[1-12]:SchDayNoTESWDRef"  for:#Mo=(1to12) ResDHWSys:DRTempSetptSchRef:SchWeekRef[#Mo]:SchDayNoTESWDRef  = {  DRTempSetptSchRef:SchWeekRef[#Mo]:SchDayWDRef  }
   "Set ResDHWSys:DRTempSetptSchRef:SchWeekRef[1-12]:SchDayNoTESWERef"  for:#Mo=(1to12) ResDHWSys:DRTempSetptSchRef:SchWeekRef[#Mo]:SchDayNoTESWERef  = {  DRTempSetptSchRef:SchWeekRef[#Mo]:SchDayWERef  }
   "Set ResDHWSys:DRTempSetptSchRef:SchWeekRef[1-12]:SchDayNoTESWDRef:Type"  for:#Mo=(1to12) ResDHWSys:DRTempSetptSchRef:SchWeekRef[#Mo]:SchDayNoTESWDRef:Type  = {  "Temperature"  }
   "Set ResDHWSys:DRTempSetptSchRef:SchWeekRef[1-12]:SchDayNoTESWERef:Type"  for:#Mo=(1to12) ResDHWSys:DRTempSetptSchRef:SchWeekRef[#Mo]:SchDayNoTESWERef:Type  = {  "Temperature"  }

   ; switch ResProj:EnergyCodeYearNum to Proj:CompCodeBase for CBECC MFam compatibility - SAC 03/06/23
   "Set ResDHWSys:DRTempSetptSchRef:SchWeekRef[1-12]:SchDayNoTESWDRef:Hr[1-24]"  for:#Mo=(1to12) for:#Hr=(1to24) ResDHWSys:DRTempSetptSchRef:SchWeekRef[#Mo]:SchDayNoTESWDRef:Hr[#Hr]  =
      {  T24RDemandResponseHPWH_Sched:Val( "CodeVint", Proj:CompCodeBase, "Schedule", EnumString( DemRespControl ), "ClimateZone", Proj:CliZnNum, "Month", #Mo, "DayType", "Weekday", "Signal_Setpoint", "Setpoint", "Hour", #Hr )  }
   "Set ResDHWSys:DRTempSetptSchRef:SchWeekRef[1-12]:SchDayNoTESWERef:Hr[1-24]"  for:#Mo=(1to12) for:#Hr=(1to24) ResDHWSys:DRTempSetptSchRef:SchWeekRef[#Mo]:SchDayNoTESWERef:Hr[#Hr]  =
      {  T24RDemandResponseHPWH_Sched:Val( "CodeVint", Proj:CompCodeBase, "Schedule", EnumString( DemRespControl ), "ClimateZone", Proj:CliZnNum, "Month", #Mo, "DayType", "Weekend", "Signal_Setpoint", "Setpoint", "Hour", #Hr )  }

   ; DR Signal Sched
   "Create ResDHWSys:DRSignalSchRef"            ResDHWSys:DRSignalSchRef               = {  CreateComp( Sch, Name + "-DRSignalSch" )  }
   "Set ResDHWSys:DRSignalSchRef:Type"          ResDHWSys:DRSignalSchRef:Type          = {  "Keyword"  }
   "Set ResDHWSys:DRSignalSchRef:Description"   ResDHWSys:DRSignalSchRef:Description   = {  "MonthlyWDWE"  }   ; SAC 12/10/20
   "Set ResDHWSys:DRSignalSchRef:NumWeeks"      ResDHWSys:DRSignalSchRef:NumWeeks      = {  12  }
   "Set ResDHWSys:DRSignalSchRef:EndMonth[1]"   ResDHWSys:DRSignalSchRef:EndMonth[1]   = {   1  }     "Set ResDHWSys:DRSignalSchRef:EndDay[1]"   ResDHWSys:DRSignalSchRef:EndDay[1]  = {  31  }
   "Set ResDHWSys:DRSignalSchRef:EndMonth[2]"   ResDHWSys:DRSignalSchRef:EndMonth[2]   = {   2  }     "Set ResDHWSys:DRSignalSchRef:EndDay[2]"   ResDHWSys:DRSignalSchRef:EndDay[2]  = {  28  }
   "Set ResDHWSys:DRSignalSchRef:EndMonth[3]"   ResDHWSys:DRSignalSchRef:EndMonth[3]   = {   3  }     "Set ResDHWSys:DRSignalSchRef:EndDay[3]"   ResDHWSys:DRSignalSchRef:EndDay[3]  = {  31  }
   "Set ResDHWSys:DRSignalSchRef:EndMonth[4]"   ResDHWSys:DRSignalSchRef:EndMonth[4]   = {   4  }     "Set ResDHWSys:DRSignalSchRef:EndDay[4]"   ResDHWSys:DRSignalSchRef:EndDay[4]  = {  30  }
   "Set ResDHWSys:DRSignalSchRef:EndMonth[5]"   ResDHWSys:DRSignalSchRef:EndMonth[5]   = {   5  }     "Set ResDHWSys:DRSignalSchRef:EndDay[5]"   ResDHWSys:DRSignalSchRef:EndDay[5]  = {  31  }
   "Set ResDHWSys:DRSignalSchRef:EndMonth[6]"   ResDHWSys:DRSignalSchRef:EndMonth[6]   = {   6  }     "Set ResDHWSys:DRSignalSchRef:EndDay[6]"   ResDHWSys:DRSignalSchRef:EndDay[6]  = {  30  }
   "Set ResDHWSys:DRSignalSchRef:EndMonth[7]"   ResDHWSys:DRSignalSchRef:EndMonth[7]   = {   7  }     "Set ResDHWSys:DRSignalSchRef:EndDay[7]"   ResDHWSys:DRSignalSchRef:EndDay[7]  = {  31  }
   "Set ResDHWSys:DRSignalSchRef:EndMonth[8]"   ResDHWSys:DRSignalSchRef:EndMonth[8]   = {   8  }     "Set ResDHWSys:DRSignalSchRef:EndDay[8]"   ResDHWSys:DRSignalSchRef:EndDay[8]  = {  31  }
   "Set ResDHWSys:DRSignalSchRef:EndMonth[9]"   ResDHWSys:DRSignalSchRef:EndMonth[9]   = {   9  }     "Set ResDHWSys:DRSignalSchRef:EndDay[9]"   ResDHWSys:DRSignalSchRef:EndDay[9]  = {  30  }
   "Set ResDHWSys:DRSignalSchRef:EndMonth[10]"  ResDHWSys:DRSignalSchRef:EndMonth[10]  = {  10  }     "Set ResDHWSys:DRSignalSchRef:EndDay[10]"  ResDHWSys:DRSignalSchRef:EndDay[10] = {  31  }
   "Set ResDHWSys:DRSignalSchRef:EndMonth[11]"  ResDHWSys:DRSignalSchRef:EndMonth[11]  = {  11  }     "Set ResDHWSys:DRSignalSchRef:EndDay[11]"  ResDHWSys:DRSignalSchRef:EndDay[11] = {  30  }
   "Set ResDHWSys:DRSignalSchRef:EndMonth[12]"  ResDHWSys:DRSignalSchRef:EndMonth[12]  = {  12  }     "Set ResDHWSys:DRSignalSchRef:EndDay[12]"  ResDHWSys:DRSignalSchRef:EndDay[12] = {  31  }

   "Create ResDHWSys:DRSignalSchRef:SchWeekRef[1-12]"                 for:#Mo=(1to12) ResDHWSys:DRSignalSchRef:SchWeekRef[#Mo]    = {  CreateComp( SchWeek, Name + "-DRSgnlSchWk#Mo" )  }
   "Set    ResDHWSys:DRSignalSchRef:SchWeekRef[1-12]:Type"            for:#Mo=(1to12) ResDHWSys:DRSignalSchRef:SchWeekRef[#Mo]:Type           = {  "Keyword"  }
   "Create ResDHWSys:DRSignalSchRef:SchWeekRef[1-12]:SchDayWDRef"     for:#Mo=(1to12) ResDHWSys:DRSignalSchRef:SchWeekRef[#Mo]:SchDayWDRef    = {  CreateComp( SchDay, Name + "-DRSgnlSchWk#MoWD" )  }
   "Create ResDHWSys:DRSignalSchRef:SchWeekRef[1-12]:SchDayWERef"     for:#Mo=(1to12) ResDHWSys:DRSignalSchRef:SchWeekRef[#Mo]:SchDayWERef    = {  CreateComp( SchDay, Name + "-DRSgnlSchWk#MoWE" )  }
   ; set new SchDayNoTESWDRef/SchDayNoTESWERef properties so that subsequent defaulting rules will work - SAC 04/25/23
   "Set ResDHWSys:DRSignalSchRef:SchWeekRef[1-12]:SchDayNoTESWDRef"   for:#Mo=(1to12) ResDHWSys:DRSignalSchRef:SchWeekRef[#Mo]:SchDayNoTESWDRef  = {  DRSignalSchRef:SchWeekRef[#Mo]:SchDayWDRef  }
   "Set ResDHWSys:DRSignalSchRef:SchWeekRef[1-12]:SchDayNoTESWERef"   for:#Mo=(1to12) ResDHWSys:DRSignalSchRef:SchWeekRef[#Mo]:SchDayNoTESWERef  = {  DRSignalSchRef:SchWeekRef[#Mo]:SchDayWERef  }
   "Set ResDHWSys:DRSignalSchRef:SchWeekRef[1-12]:SchDayNoTESWDRef:Type"   for:#Mo=(1to12) ResDHWSys:DRSignalSchRef:SchWeekRef[#Mo]:SchDayNoTESWDRef:Type  = {  "Keyword"  }
   "Set ResDHWSys:DRSignalSchRef:SchWeekRef[1-12]:SchDayNoTESWERef:Type"   for:#Mo=(1to12) ResDHWSys:DRSignalSchRef:SchWeekRef[#Mo]:SchDayNoTESWERef:Type  = {  "Keyword"  }

   ; switch ResProj:EnergyCodeYearNum to Proj:CompCodeBase for CBECC MFam compatibility - SAC 03/06/23
   "Set ResDHWSys:DRSignalSchRef:SchWeekRef[1-12]:SchDayNoTESWDRef:Key[1-24]"  for:#Mo=(1to12) for:#Hr=(1to24) ResDHWSys:DRSignalSchRef:SchWeekRef[#Mo]:SchDayNoTESWDRef:Key[#Hr]  =
      {  T24RDemandResponseHPWH_Sched:Val( "CodeVint", Proj:CompCodeBase, "Schedule", EnumString( DemRespControl ), "ClimateZone", Proj:CliZnNum, "Month", #Mo, "DayType", "Weekday", "Signal_Setpoint", "Signal", "Hour", #Hr )  }
   "Set ResDHWSys:DRSignalSchRef:SchWeekRef[1-12]:SchDayNoTESWERef:Key[1-24]"  for:#Mo=(1to12) for:#Hr=(1to24) ResDHWSys:DRSignalSchRef:SchWeekRef[#Mo]:SchDayNoTESWERef:Key[#Hr]  =
      {  T24RDemandResponseHPWH_Sched:Val( "CodeVint", Proj:CompCodeBase, "Schedule", EnumString( DemRespControl ), "ClimateZone", Proj:CliZnNum, "Month", #Mo, "DayType", "Weekend", "Signal_Setpoint", "Signal", "Hour", #Hr )  }



;1,           "Type",             BEMP_Sym,  1,  0,  1,  "",                 0,  0,                               3004, "Type"
;1,           "SchDayWDRef",      BEMP_Obj,  1,  0,  0,  "",                 0,  1, "SchDay", -99, "Type",        3004, "ScheduleDayWeekdaysReference"  
;1,           "SchDayWERef",      BEMP_Obj,  1,  0,  0,  "",                 0,  1, "SchDay", -99, "Type",        3004, "ScheduleDayWeekendsReference"  

;1,           "Type",           BEMP_Sym,  1,  0,  1,  "",                 0,  0,                           3004, "Type"
;1,           "EndMonth",       BEMP_Int, 53,  1,  1,  "",                 0,  0,                           3004, "EndMonth"
;1,           "EndDay",         BEMP_Int, 53,  1,  1,  "",                 0,  0,                           3004, "EndDay"
;1,           "SchWeekRef",     BEMP_Obj, 53,  1,  1,  "",                 0,  1, "SchWeek",  -99, "Type",  3004, "ScheduleWeekReference" 
;1,           "NumWeeks",       BEMP_Int,  1,  0,  1,  "",                 0,  0,                           3004, "NumWeeks"

;      {  if (IfValidAnd( DemRespValid > 0 )==0) then  UNCHANGED
;         else  EvalRulelist( "SetupDemRespSched_DHWSys", 1 )  endif  }
;ResDHWSys:DRTempSetptSchRef,           NotInput,   0,    0,   0,    1,  1,  1
;ResDHWSys:DRSignalSchRef,              NotInput,   0,    0,   0,    1,  1,  1

;2,              3,    "Temperature"
;2,              4,    "Keyword"     ; SAC 12/03/20

END
;*************************************************************************

;*************************************************************************  - SAC 07/01/23
RULELIST  "SetSchDay_Type_Temperature" 1 0 1 0
   "Set SchDay:Type to 'Temperature'"     SchDay:Type = {  "Temperature"  }
END
;*************************************************************************


;;------------------------------------------------------------------------------------------------
;;                LName              Template             MD  MR  AC   Parent1  P2  P3  P4  P5  P6  P7  P8  P9  P10 P11 P12 P13 P14 P15  MC  MS  bP  CF  SR  IN     HI 
;;               --------------------------------------------------------------------------------------------------------------------------------------------------------------
;0,  "SchDay",   "ScheduleDay",     "Sch Day <i>",         0,  0,  0, "",       "", "", "", "", "", "", "", "", "", "", "", "", "", "",  -1,  1,  1,  0,  0,  0,   3000
;;
;;                              VType     NV  WA  SP   UL                 UT  NO  OC             CV  CP      HI    LName                  
;;                             ----------------------------------------------------------------------------------------------
;1,           "Type",           BEMP_Sym,  1,  0,  1,  "",                 0,  0,                           3004, "ScheduleDayType"    
;1,           "Hr",             BEMP_Flt, 24,  1,  1,  "",                 0,  0,                           3004, "ScheduleDayHour"   
;1,           "Key",            BEMP_Str, 24,  1,  1,  "",                 0,  0,                           3004, "ScheduleDayHour Key"   ; SAC 12/03/20
;;------------------------------------------------------------------------------------------------




;*************************************************************************
;*************************************************************************

ENDFILE

